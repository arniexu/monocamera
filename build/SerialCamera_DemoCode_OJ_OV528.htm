<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\build\SerialCamera_DemoCode_OJ_OV528.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\build\SerialCamera_DemoCode_OJ_OV528.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5040049: Last Updated: Wed Oct 28 08:26:50 2015
<BR><P>
<H3>Maximum Stack Usage =       1792 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; $Super$$main &rArr; cmd_findvalidfilename(unsigned char*, unsigned char) &rArr; mbed::Stream::printf(const char*, ...) &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; serial_set_flow_control &rArr; gpio_init_out_ex &rArr; gpio_init &rArr; pin_function &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[29f]">mbed_assert_internal</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2d7]">mbed_die</a><BR>
 <LI><a href="#[2e2]">pinmap_merge</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[134]">error</a><BR>
 <LI><a href="#[2d3]">pinmap_pinout</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[134]">error</a><BR>
 <LI><a href="#[2d2]">pinmap_peripheral</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[134]">error</a><BR>
 <LI><a href="#[29]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[29]">NMI_Handler</a><BR>
 <LI><a href="#[2a]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2a]">HardFault_Handler</a><BR>
 <LI><a href="#[2b]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2b]">MemManage_Handler</a><BR>
 <LI><a href="#[2c]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2c]">BusFault_Handler</a><BR>
 <LI><a href="#[2d]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2d]">UsageFault_Handler</a><BR>
 <LI><a href="#[2e]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2e]">SVC_Handler</a><BR>
 <LI><a href="#[2f]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2f]">DebugMon_Handler</a><BR>
 <LI><a href="#[30]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[30]">PendSV_Handler</a><BR>
 <LI><a href="#[31]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[31]">SysTick_Handler</a><BR>
 <LI><a href="#[48]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[48]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[64]">&lang;Func1&rang;</a> from SerialBase.o(i.<Func1>) referenced from SerialBase.o(i._ZN4mbed10SerialBaseC1E7PinNameS1_)
 <LI><a href="#[48]">ADC_IRQHandler</a> from startup_LPC17xx.o(.text) referenced from startup_LPC17xx.o(RESET)
 <LI><a href="#[49]">BOD_IRQHandler</a> from startup_LPC17xx.o(.text) referenced from startup_LPC17xx.o(RESET)
 <LI><a href="#[2c]">BusFault_Handler</a> from startup_LPC17xx.o(.text) referenced from startup_LPC17xx.o(RESET)
 <LI><a href="#[4b]">CAN_IRQHandler</a> from startup_LPC17xx.o(.text) referenced from startup_LPC17xx.o(RESET)
 <LI><a href="#[4c]">DMA_IRQHandler</a> from startup_LPC17xx.o(.text) referenced from startup_LPC17xx.o(RESET)
 <LI><a href="#[2f]">DebugMon_Handler</a> from startup_LPC17xx.o(.text) referenced from startup_LPC17xx.o(RESET)
 <LI><a href="#[44]">EINT0_IRQHandler</a> from startup_LPC17xx.o(.text) referenced from startup_LPC17xx.o(RESET)
 <LI><a href="#[45]">EINT1_IRQHandler</a> from startup_LPC17xx.o(.text) referenced from startup_LPC17xx.o(RESET)
 <LI><a href="#[46]">EINT2_IRQHandler</a> from startup_LPC17xx.o(.text) referenced from startup_LPC17xx.o(RESET)
 <LI><a href="#[47]">EINT3_IRQHandler</a> from startup_LPC17xx.o(.text) referenced from startup_LPC17xx.o(RESET)
 <LI><a href="#[4e]">ENET_IRQHandler</a> from startup_LPC17xx.o(.text) referenced from startup_LPC17xx.o(RESET)
 <LI><a href="#[2a]">HardFault_Handler</a> from startup_LPC17xx.o(.text) referenced from startup_LPC17xx.o(RESET)
 <LI><a href="#[3c]">I2C0_IRQHandler</a> from startup_LPC17xx.o(.text) referenced from startup_LPC17xx.o(RESET)
 <LI><a href="#[3d]">I2C1_IRQHandler</a> from startup_LPC17xx.o(.text) referenced from startup_LPC17xx.o(RESET)
 <LI><a href="#[3e]">I2C2_IRQHandler</a> from startup_LPC17xx.o(.text) referenced from startup_LPC17xx.o(RESET)
 <LI><a href="#[4d]">I2S_IRQHandler</a> from startup_LPC17xx.o(.text) referenced from startup_LPC17xx.o(RESET)
 <LI><a href="#[50]">MCPWM_IRQHandler</a> from startup_LPC17xx.o(.text) referenced from startup_LPC17xx.o(RESET)
 <LI><a href="#[2b]">MemManage_Handler</a> from startup_LPC17xx.o(.text) referenced from startup_LPC17xx.o(RESET)
 <LI><a href="#[29]">NMI_Handler</a> from startup_LPC17xx.o(.text) referenced from startup_LPC17xx.o(RESET)
 <LI><a href="#[42]">PLL0_IRQHandler</a> from startup_LPC17xx.o(.text) referenced from startup_LPC17xx.o(RESET)
 <LI><a href="#[52]">PLL1_IRQHandler</a> from startup_LPC17xx.o(.text) referenced from startup_LPC17xx.o(RESET)
 <LI><a href="#[3b]">PWM1_IRQHandler</a> from startup_LPC17xx.o(.text) referenced from startup_LPC17xx.o(RESET)
 <LI><a href="#[30]">PendSV_Handler</a> from startup_LPC17xx.o(.text) referenced from startup_LPC17xx.o(RESET)
 <LI><a href="#[51]">QEI_IRQHandler</a> from startup_LPC17xx.o(.text) referenced from startup_LPC17xx.o(RESET)
 <LI><a href="#[4f]">RIT_IRQHandler</a> from startup_LPC17xx.o(.text) referenced from startup_LPC17xx.o(RESET)
 <LI><a href="#[43]">RTC_IRQHandler</a> from startup_LPC17xx.o(.text) referenced from startup_LPC17xx.o(RESET)
 <LI><a href="#[28]">Reset_Handler</a> from startup_LPC17xx.o(.text) referenced from startup_LPC17xx.o(RESET)
 <LI><a href="#[3f]">SPI_IRQHandler</a> from startup_LPC17xx.o(.text) referenced from startup_LPC17xx.o(RESET)
 <LI><a href="#[40]">SSP0_IRQHandler</a> from startup_LPC17xx.o(.text) referenced from startup_LPC17xx.o(RESET)
 <LI><a href="#[41]">SSP1_IRQHandler</a> from startup_LPC17xx.o(.text) referenced from startup_LPC17xx.o(RESET)
 <LI><a href="#[2e]">SVC_Handler</a> from startup_LPC17xx.o(.text) referenced from startup_LPC17xx.o(RESET)
 <LI><a href="#[31]">SysTick_Handler</a> from startup_LPC17xx.o(.text) referenced from startup_LPC17xx.o(RESET)
 <LI><a href="#[59]">SystemInit</a> from system_LPC17xx.o(i.SystemInit) referenced from startup_LPC17xx.o(.text)
 <LI><a href="#[33]">TIMER0_IRQHandler</a> from startup_LPC17xx.o(.text) referenced from startup_LPC17xx.o(RESET)
 <LI><a href="#[34]">TIMER1_IRQHandler</a> from startup_LPC17xx.o(.text) referenced from startup_LPC17xx.o(RESET)
 <LI><a href="#[35]">TIMER2_IRQHandler</a> from startup_LPC17xx.o(.text) referenced from startup_LPC17xx.o(RESET)
 <LI><a href="#[36]">TIMER3_IRQHandler</a> from startup_LPC17xx.o(.text) referenced from startup_LPC17xx.o(RESET)
 <LI><a href="#[37]">UART0_IRQHandler</a> from startup_LPC17xx.o(.text) referenced from startup_LPC17xx.o(RESET)
 <LI><a href="#[38]">UART1_IRQHandler</a> from startup_LPC17xx.o(.text) referenced from startup_LPC17xx.o(RESET)
 <LI><a href="#[39]">UART2_IRQHandler</a> from startup_LPC17xx.o(.text) referenced from startup_LPC17xx.o(RESET)
 <LI><a href="#[3a]">UART3_IRQHandler</a> from startup_LPC17xx.o(.text) referenced from startup_LPC17xx.o(RESET)
 <LI><a href="#[4a]">USB_IRQHandler</a> from startup_LPC17xx.o(.text) referenced from startup_LPC17xx.o(RESET)
 <LI><a href="#[2d]">UsageFault_Handler</a> from startup_LPC17xx.o(.text) referenced from startup_LPC17xx.o(RESET)
 <LI><a href="#[32]">WDT_IRQHandler</a> from startup_LPC17xx.o(.text) referenced from startup_LPC17xx.o(RESET)
 <LI><a href="#[11]">cmd_remove(unsigned char*, unsigned char)</a> from command.o(.text) referenced 2 times from command.o(.data)
 <LI><a href="#[23]">cmd_display(unsigned char*, unsigned char)</a> from command.o(.text) referenced 2 times from command.o(.data)
 <LI><a href="#[1f]">cmd_drawdot(unsigned char*, unsigned char)</a> from command.o(.text) referenced 2 times from command.o(.data)
 <LI><a href="#[16]">cmd_printer(unsigned char*, unsigned char)</a> from command.o(.text) referenced 2 times from command.o(.data)
 <LI><a href="#[1c]">cmd_setfont(unsigned char*, unsigned char)</a> from command.o(.text) referenced 2 times from command.o(.data)
 <LI><a href="#[1c9]">flushBImage(int, int, unsigned char*)</a> from command.o(.text) referenced from command.o(.text)
 <LI><a href="#[168]">RxIntHandler()</a> from serial_camera.o(.text) referenced from serial_camera.o(.text)
 <LI><a href="#[1e]">cmd_drawchar(unsigned char*, unsigned char)</a> from command.o(.text) referenced 2 times from command.o(.data)
 <LI><a href="#[20]">cmd_drawicon(unsigned char*, unsigned char)</a> from command.o(.text) referenced 2 times from command.o(.data)
 <LI><a href="#[21]">cmd_drawmenu(unsigned char*, unsigned char)</a> from command.o(.text) referenced 2 times from command.o(.data)
 <LI><a href="#[1b]">cmd_drawrect(unsigned char*, unsigned char)</a> from command.o(.text) referenced 2 times from command.o(.data)
 <LI><a href="#[10]">cmd_helpinfo(unsigned char*, unsigned char)</a> from command.o(.text) referenced 2 times from command.o(.data)
 <LI><a href="#[12]">cmd_removeall(unsigned char*, unsigned char)</a> from command.o(.text) referenced 2 times from command.o(.data)
 <LI><a href="#[14]">cmd_takephoto(unsigned char*, unsigned char)</a> from command.o(.text) referenced 2 times from command.o(.data)
 <LI><a href="#[26]">cmd_drawcircle(unsigned char*, unsigned char)</a> from command.o(.text) referenced 2 times from command.o(.data)
 <LI><a href="#[1d]">cmd_drawstring(unsigned char*, unsigned char)</a> from command.o(.text) referenced 2 times from command.o(.data)
 <LI><a href="#[25]">cmd_setdismode(unsigned char*, unsigned char)</a> from command.o(.text) referenced 2 times from command.o(.data)
 <LI><a href="#[17]">cmd_convert1bpp(unsigned char*, unsigned char)</a> from command.o(.text) referenced 2 times from command.o(.data)
 <LI><a href="#[18]">cmd_convert2bmp(unsigned char*, unsigned char)</a> from command.o(.text) referenced 2 times from command.o(.data)
 <LI><a href="#[15]">cmd_takepicture(unsigned char*, unsigned char)</a> from command.o(.text) referenced 2 times from command.o(.data)
 <LI><a href="#[1a]">cmd_browseSDcard(unsigned char*, unsigned char)</a> from command.o(.text) referenced 2 times from command.o(.data)
 <LI><a href="#[24]">cmd_cleardisplay(unsigned char*, unsigned char)</a> from command.o(.text) referenced 2 times from command.o(.data)
 <LI><a href="#[27]">cmd_writedisplay(unsigned char*, unsigned char)</a> from command.o(.text) referenced 2 times from command.o(.data)
 <LI><a href="#[19]">cmd_convertbimage(unsigned char*, unsigned char)</a> from command.o(.text) referenced 2 times from command.o(.data)
 <LI><a href="#[22]">cmd_getbuttonevent(unsigned char*, unsigned char)</a> from command.o(.text) referenced 2 times from command.o(.data)
 <LI><a href="#[1ae]">joystick_Int_Handler()</a> from joystick.o(.text) referenced from joystick.o(.text)
 <LI><a href="#[67]">__default_new_handler()</a> from arm_newhandler_noexceptions.o(.text) referenced from new.o(i._Znwj)
 <LI><a href="#[13]">cmd_findvalidfilename(unsigned char*, unsigned char)</a> from command.o(.text) referenced 2 times from command.o(.data)
 <LI><a href="#[63]">__default_terminate_handler()</a> from arm_exceptions_globs.o(.text) referenced from arm_exceptions_globs.o(.text)
 <LI><a href="#[1d5]">flushRGB(int, int, unsigned char*)</a> from command.o(.text) referenced from command.o(.text)
 <LI><a href="#[57]">donothing(__package_info*)</a> from serial_camera.o(.text) referenced from command.o(.text)
 <LI><a href="#[1d3]">flush1BPP(int, int, unsigned char*)</a> from command.o(.text) referenced from command.o(.text)
 <LI><a href="#[7a]">TextDisplay::background(unsigned short)</a> from textdisplay.o(.text) referenced from textdisplay.o(.constdata__ZTV11TextDisplay)
 <LI><a href="#[7a]">TextDisplay::background(unsigned short)</a> from textdisplay.o(.text) referenced from graphicsdisplay.o(.constdata__ZTV15GraphicsDisplay)
 <LI><a href="#[7a]">TextDisplay::background(unsigned short)</a> from textdisplay.o(.text) referenced from eaepaper.o(.constdata__ZTV8EaEpaper)
 <LI><a href="#[79]">TextDisplay::foreground(unsigned short)</a> from textdisplay.o(.text) referenced from textdisplay.o(.constdata__ZTV11TextDisplay)
 <LI><a href="#[79]">TextDisplay::foreground(unsigned short)</a> from textdisplay.o(.text) referenced from graphicsdisplay.o(.constdata__ZTV15GraphicsDisplay)
 <LI><a href="#[79]">TextDisplay::foreground(unsigned short)</a> from textdisplay.o(.text) referenced from eaepaper.o(.constdata__ZTV8EaEpaper)
 <LI><a href="#[77]">TextDisplay::cls()</a> from textdisplay.o(.text) referenced from textdisplay.o(.constdata__ZTV11TextDisplay)
 <LI><a href="#[75]">TextDisplay::_getc()</a> from textdisplay.o(.text) referenced from textdisplay.o(.constdata__ZTV11TextDisplay)
 <LI><a href="#[75]">TextDisplay::_getc()</a> from textdisplay.o(.text) referenced from graphicsdisplay.o(.constdata__ZTV15GraphicsDisplay)
 <LI><a href="#[75]">TextDisplay::_getc()</a> from textdisplay.o(.text) referenced from eaepaper.o(.constdata__ZTV8EaEpaper)
 <LI><a href="#[74]">TextDisplay::_putc(int)</a> from textdisplay.o(.text) referenced from textdisplay.o(.constdata__ZTV11TextDisplay)
 <LI><a href="#[74]">TextDisplay::_putc(int)</a> from textdisplay.o(.text) referenced from graphicsdisplay.o(.constdata__ZTV15GraphicsDisplay)
 <LI><a href="#[76]">TextDisplay::claim(std::__FILE*)</a> from textdisplay.o(.text) referenced from textdisplay.o(.constdata__ZTV11TextDisplay)
 <LI><a href="#[76]">TextDisplay::claim(std::__FILE*)</a> from textdisplay.o(.text) referenced from graphicsdisplay.o(.constdata__ZTV15GraphicsDisplay)
 <LI><a href="#[76]">TextDisplay::claim(std::__FILE*)</a> from textdisplay.o(.text) referenced from eaepaper.o(.constdata__ZTV8EaEpaper)
 <LI><a href="#[78]">TextDisplay::locate(int, int)</a> from textdisplay.o(.text) referenced from textdisplay.o(.constdata__ZTV11TextDisplay)
 <LI><a href="#[78]">TextDisplay::locate(int, int)</a> from textdisplay.o(.text) referenced from graphicsdisplay.o(.constdata__ZTV15GraphicsDisplay)
 <LI><a href="#[7c]">FATDirHandle::readdir()</a> from fatdirhandle.o(.text) referenced from fatdirhandle.o(.constdata__ZTV12FATDirHandle)
 <LI><a href="#[7f]">FATDirHandle::seekdir(long)</a> from fatdirhandle.o(.text) referenced from fatdirhandle.o(.constdata__ZTV12FATDirHandle)
 <LI><a href="#[7e]">FATDirHandle::telldir()</a> from fatdirhandle.o(.text) referenced from fatdirhandle.o(.constdata__ZTV12FATDirHandle)
 <LI><a href="#[7b]">FATDirHandle::closedir()</a> from fatdirhandle.o(.text) referenced from fatdirhandle.o(.constdata__ZTV12FATDirHandle)
 <LI><a href="#[7d]">FATDirHandle::rewinddir()</a> from fatdirhandle.o(.text) referenced from fatdirhandle.o(.constdata__ZTV12FATDirHandle)
 <LI><a href="#[81]">FATDirHandle::~FATDirHandle__deallocating()</a> from fatdirhandle.o(i._ZN12FATDirHandleD0Ev) referenced from fatdirhandle.o(.constdata__ZTV12FATDirHandle)
 <LI><a href="#[80]">FATDirHandle::~FATDirHandle()</a> from fatdirhandle.o(i._ZN12FATDirHandleD1Ev) referenced from fatdirhandle.o(.constdata__ZTV12FATDirHandle)
 <LI><a href="#[8a]">SDFileSystem::disk_write(const unsigned char*, unsigned long long)</a> from sdfilesystem.o(.text) referenced from sdfilesystem.o(.constdata__ZTV12SDFileSystem)
 <LI><a href="#[88]">SDFileSystem::disk_status()</a> from sdfilesystem.o(.text) referenced from sdfilesystem.o(.constdata__ZTV12SDFileSystem)
 <LI><a href="#[8c]">SDFileSystem::disk_sectors()</a> from sdfilesystem.o(.text) referenced from sdfilesystem.o(.constdata__ZTV12SDFileSystem)
 <LI><a href="#[87]">SDFileSystem::disk_initialize()</a> from sdfilesystem.o(.text) referenced from sdfilesystem.o(.constdata__ZTV12SDFileSystem)
 <LI><a href="#[89]">SDFileSystem::disk_read(unsigned char*, unsigned long long)</a> from sdfilesystem.o(.text) referenced from sdfilesystem.o(.constdata__ZTV12SDFileSystem)
 <LI><a href="#[8b]">SDFileSystem::disk_sync()</a> from sdfilesystem.o(.text) referenced from sdfilesystem.o(.constdata__ZTV12SDFileSystem)
 <LI><a href="#[53]">SDFileSystem::~SDFileSystem()</a> from main.o(i._ZN12SDFileSystemD1Ev) referenced from sdfilesystem.o(.constdata__ZTV12SDFileSystem)
 <LI><a href="#[53]">SDFileSystem::~SDFileSystem()</a> from main.o(i._ZN12SDFileSystemD1Ev) referenced from main.o(.text)
 <LI><a href="#[93]">FATFileHandle::flen()</a> from fatfilehandle.o(.text) referenced from fatfilehandle.o(.constdata__ZTV13FATFileHandle)
 <LI><a href="#[8f]">FATFileHandle::read(void*, unsigned)</a> from fatfilehandle.o(.text) referenced from fatfilehandle.o(.constdata__ZTV13FATFileHandle)
 <LI><a href="#[8e]">FATFileHandle::close()</a> from fatfilehandle.o(.text) referenced from fatfilehandle.o(.constdata__ZTV13FATFileHandle)
 <LI><a href="#[92]">FATFileHandle::fsync()</a> from fatfilehandle.o(.text) referenced from fatfilehandle.o(.constdata__ZTV13FATFileHandle)
 <LI><a href="#[91]">FATFileHandle::lseek(long, int)</a> from fatfilehandle.o(.text) referenced from fatfilehandle.o(.constdata__ZTV13FATFileHandle)
 <LI><a href="#[8d]">FATFileHandle::write(const void*, unsigned)</a> from fatfilehandle.o(.text) referenced from fatfilehandle.o(.constdata__ZTV13FATFileHandle)
 <LI><a href="#[90]">FATFileHandle::isatty()</a> from fatfilehandle.o(.text) referenced from fatfilehandle.o(.constdata__ZTV13FATFileHandle)
 <LI><a href="#[95]">FATFileHandle::~FATFileHandle__deallocating()</a> from fatfilehandle.o(i._ZN13FATFileHandleD0Ev) referenced from fatfilehandle.o(.constdata__ZTV13FATFileHandle)
 <LI><a href="#[94]">FATFileHandle::~FATFileHandle()</a> from fatfilehandle.o(i._ZN13FATFileHandleD1Ev) referenced from fatfilehandle.o(.constdata__ZTV13FATFileHandle)
 <LI><a href="#[99]">FATFileSystem::disk_status()</a> from fatfilesystem.o(i._ZN13FATFileSystem11disk_statusEv) referenced from fatfilesystem.o(.constdata__ZTV13FATFileSystem)
 <LI><a href="#[98]">FATFileSystem::disk_initialize()</a> from fatfilesystem.o(i._ZN13FATFileSystem15disk_initializeEv) referenced from fatfilesystem.o(.constdata__ZTV13FATFileSystem)
 <LI><a href="#[82]">FATFileSystem::open(const char*, int)</a> from fatfilesystem.o(.text) referenced from sdfilesystem.o(.constdata__ZTV12SDFileSystem)
 <LI><a href="#[82]">FATFileSystem::open(const char*, int)</a> from fatfilesystem.o(.text) referenced from fatfilesystem.o(.constdata__ZTV13FATFileSystem)
 <LI><a href="#[85]">FATFileSystem::mkdir(const char*, int)</a> from fatfilesystem.o(.text) referenced from sdfilesystem.o(.constdata__ZTV12SDFileSystem)
 <LI><a href="#[85]">FATFileSystem::mkdir(const char*, int)</a> from fatfilesystem.o(.text) referenced from fatfilesystem.o(.constdata__ZTV13FATFileSystem)
 <LI><a href="#[86]">FATFileSystem::format()</a> from fatfilesystem.o(.text) referenced from sdfilesystem.o(.constdata__ZTV12SDFileSystem)
 <LI><a href="#[86]">FATFileSystem::format()</a> from fatfilesystem.o(.text) referenced from fatfilesystem.o(.constdata__ZTV13FATFileSystem)
 <LI><a href="#[83]">FATFileSystem::remove(const char*)</a> from fatfilesystem.o(.text) referenced from sdfilesystem.o(.constdata__ZTV12SDFileSystem)
 <LI><a href="#[83]">FATFileSystem::remove(const char*)</a> from fatfilesystem.o(.text) referenced from fatfilesystem.o(.constdata__ZTV13FATFileSystem)
 <LI><a href="#[84]">FATFileSystem::opendir(const char*)</a> from fatfilesystem.o(.text) referenced from sdfilesystem.o(.constdata__ZTV12SDFileSystem)
 <LI><a href="#[84]">FATFileSystem::opendir(const char*)</a> from fatfilesystem.o(.text) referenced from fatfilesystem.o(.constdata__ZTV13FATFileSystem)
 <LI><a href="#[9a]">FATFileSystem::disk_sync()</a> from fatfilesystem.o(i._ZN13FATFileSystem9disk_syncEv) referenced from fatfilesystem.o(.constdata__ZTV13FATFileSystem)
 <LI><a href="#[97]">FATFileSystem::~FATFileSystem__deallocating()</a> from fatfilesystem.o(.text) referenced from fatfilesystem.o(.constdata__ZTV13FATFileSystem)
 <LI><a href="#[96]">FATFileSystem::~FATFileSystem__sub_object()</a> from fatfilesystem.o(.text) referenced from fatfilesystem.o(.constdata__ZTV13FATFileSystem)
 <LI><a href="#[9e]">GraphicsDisplay::cls()</a> from graphicsdisplay.o(.text) referenced from graphicsdisplay.o(.constdata__ZTV15GraphicsDisplay)
 <LI><a href="#[a2]">GraphicsDisplay::blit(int, int, int, int, const int*)</a> from graphicsdisplay.o(.text) referenced from graphicsdisplay.o(.constdata__ZTV15GraphicsDisplay)
 <LI><a href="#[a2]">GraphicsDisplay::blit(int, int, int, int, const int*)</a> from graphicsdisplay.o(.text) referenced from eaepaper.o(.constdata__ZTV8EaEpaper)
 <LI><a href="#[a1]">GraphicsDisplay::fill(int, int, int, int, int)</a> from graphicsdisplay.o(.text) referenced from graphicsdisplay.o(.constdata__ZTV15GraphicsDisplay)
 <LI><a href="#[a1]">GraphicsDisplay::fill(int, int, int, int, int)</a> from graphicsdisplay.o(.text) referenced from eaepaper.o(.constdata__ZTV8EaEpaper)
 <LI><a href="#[a0]">GraphicsDisplay::putp(int)</a> from graphicsdisplay.o(.text) referenced from graphicsdisplay.o(.constdata__ZTV15GraphicsDisplay)
 <LI><a href="#[a0]">GraphicsDisplay::putp(int)</a> from graphicsdisplay.o(.text) referenced from eaepaper.o(.constdata__ZTV8EaEpaper)
 <LI><a href="#[9c]">GraphicsDisplay::rows()</a> from graphicsdisplay.o(.text) referenced from graphicsdisplay.o(.constdata__ZTV15GraphicsDisplay)
 <LI><a href="#[9f]">GraphicsDisplay::window(int, int, int, int)</a> from graphicsdisplay.o(.text) referenced from graphicsdisplay.o(.constdata__ZTV15GraphicsDisplay)
 <LI><a href="#[9f]">GraphicsDisplay::window(int, int, int, int)</a> from graphicsdisplay.o(.text) referenced from eaepaper.o(.constdata__ZTV8EaEpaper)
 <LI><a href="#[a3]">GraphicsDisplay::blitbit(int, int, int, int, const char*)</a> from graphicsdisplay.o(.text) referenced from graphicsdisplay.o(.constdata__ZTV15GraphicsDisplay)
 <LI><a href="#[a3]">GraphicsDisplay::blitbit(int, int, int, int, const char*)</a> from graphicsdisplay.o(.text) referenced from eaepaper.o(.constdata__ZTV8EaEpaper)
 <LI><a href="#[9d]">GraphicsDisplay::columns()</a> from graphicsdisplay.o(.text) referenced from graphicsdisplay.o(.constdata__ZTV15GraphicsDisplay)
 <LI><a href="#[9b]">GraphicsDisplay::character(int, int, int)</a> from graphicsdisplay.o(.text) referenced from graphicsdisplay.o(.constdata__ZTV15GraphicsDisplay)
 <LI><a href="#[58]">Adafruit_Thermal::~Adafruit_Thermal()</a> from command.o(i._ZN16Adafruit_ThermalD1Ev) referenced from adafruit_thermal.o(.constdata__ZTV16Adafruit_Thermal)
 <LI><a href="#[58]">Adafruit_Thermal::~Adafruit_Thermal()</a> from command.o(i._ZN16Adafruit_ThermalD1Ev) referenced from command.o(.text)
 <LI><a href="#[a8]">SimpleJpegDecode::outputMARK(unsigned char)</a> from simplejpegdecode.o(.text) referenced from simplejpegdecode.o(.constdata__ZTV16SimpleJpegDecode)
 <LI><a href="#[a9]">SimpleJpegDecode::outputBLOCK(int, int, signed char*)</a> from simplejpegdecode.o(.text) referenced from simplejpegdecode.o(.constdata__ZTV16SimpleJpegDecode)
 <LI><a href="#[a7]">SimpleJpegDecode::outputAC(int, int, int, int)</a> from simplejpegdecode.o(.text) referenced from simplejpegdecode.o(.constdata__ZTV16SimpleJpegDecode)
 <LI><a href="#[a6]">SimpleJpegDecode::outputDC(int, int, int)</a> from simplejpegdecode.o(.text) referenced from simplejpegdecode.o(.constdata__ZTV16SimpleJpegDecode)
 <LI><a href="#[b4]">mbed::FileHandle::flen()</a> from retarget.o(i._ZN4mbed10FileHandle4flenEv) referenced from retarget.o(.constdata__ZTVN4mbed10FileHandleE)
 <LI><a href="#[b4]">mbed::FileHandle::flen()</a> from retarget.o(i._ZN4mbed10FileHandle4flenEv) referenced from FileLike.o(.constdata__ZTVN4mbed8FileLikeE)
 <LI><a href="#[b5]">mbed::FileHandle::~FileHandle__sub_object()</a> from retarget.o(i._ZN4mbed10FileHandleD2Ev) referenced from retarget.o(.constdata__ZTVN4mbed10FileHandleE)
 <LI><a href="#[65]">mbed::SerialBase::_irq_handler(unsigned, SerialIrq)</a> from SerialBase.o(i._ZN4mbed10SerialBase12_irq_handlerEj9SerialIrq) referenced from SerialBase.o(i._ZN4mbed10SerialBaseC1E7PinNameS1_)
 <LI><a href="#[66]">mbed::TimerEvent::irq(unsigned)</a> from TimerEvent.o(i._ZN4mbed10TimerEvent3irqEj) referenced from TimerEvent.o(i._ZN4mbed10TimerEventC2Ev)
 <LI><a href="#[b6]">mbed::TimerEvent::~TimerEvent__sub_object()</a> from TimerEvent.o(i._ZN4mbed10TimerEventD2Ev) referenced from TimerEvent.o(.constdata__ZTVN4mbed10TimerEventE)
 <LI><a href="#[b8]">mbed::BaseDirHandle::readdir()</a> from FileSystemLike.o(i._ZN4mbed13BaseDirHandle7readdirEv) referenced from FileSystemLike.o(.constdata__ZTVN4mbed13BaseDirHandleE)
 <LI><a href="#[b7]">mbed::BaseDirHandle::closedir()</a> from FileSystemLike.o(i._ZN4mbed13BaseDirHandle8closedirEv) referenced from FileSystemLike.o(.constdata__ZTVN4mbed13BaseDirHandleE)
 <LI><a href="#[b9]">mbed::BaseDirHandle::~BaseDirHandle__deallocating()</a> from FileSystemLike.o(i._ZN4mbed13BaseDirHandleD0Ev) referenced from FileSystemLike.o(.constdata__ZTVN4mbed13BaseDirHandleE)
 <LI><a href="#[bb]">mbed::FileSystemLike::remove(const char*)</a> from FileSystemLike.o(i._ZN4mbed14FileSystemLike6removeEPKc) referenced from FileSystemLike.o(.constdata__ZTVN4mbed14FileSystemLikeE)
 <LI><a href="#[bc]">mbed::FileSystemLike::opendir(const char*)</a> from FileSystemLike.o(i._ZN4mbed14FileSystemLike7opendirEPKc) referenced from FileSystemLike.o(.constdata__ZTVN4mbed14FileSystemLikeE)
 <LI><a href="#[ba]">mbed::FileSystemLike::~FileSystemLike__sub_object()</a> from FileSystemLike.o(i._ZN4mbed14FileSystemLikeD2Ev) referenced from FileSystemLike.o(.constdata__ZTVN4mbed14FileSystemLikeE)
 <LI><a href="#[bd]">mbed::SPI::write(int)</a> from SPI.o(i._ZN4mbed3SPI5writeEi) referenced from SPI.o(.constdata__ZTVN4mbed3SPIE)
 <LI><a href="#[55]">mbed::Serial::~Serial()</a> from Serial.o(i._ZN4mbed6SerialD1Ev) referenced from Serial.o(.constdata__ZTVN4mbed6SerialE)
 <LI><a href="#[55]">mbed::Serial::~Serial()</a> from Serial.o(i._ZN4mbed6SerialD1Ev) referenced 2 times from main.o(.text)
 <LI><a href="#[73]">mbed::Stream::flen()</a> from Stream.o(i._ZN4mbed6Stream4flenEv) referenced from textdisplay.o(.constdata__ZTV11TextDisplay)
 <LI><a href="#[73]">mbed::Stream::flen()</a> from Stream.o(i._ZN4mbed6Stream4flenEv) referenced from graphicsdisplay.o(.constdata__ZTV15GraphicsDisplay)
 <LI><a href="#[73]">mbed::Stream::flen()</a> from Stream.o(i._ZN4mbed6Stream4flenEv) referenced from adafruit_thermal.o(.constdata__ZTV16Adafruit_Thermal)
 <LI><a href="#[73]">mbed::Stream::flen()</a> from Stream.o(i._ZN4mbed6Stream4flenEv) referenced from eaepaper.o(.constdata__ZTV8EaEpaper)
 <LI><a href="#[73]">mbed::Stream::flen()</a> from Stream.o(i._ZN4mbed6Stream4flenEv) referenced from Serial.o(.constdata__ZTVN4mbed6SerialE)
 <LI><a href="#[73]">mbed::Stream::flen()</a> from Stream.o(i._ZN4mbed6Stream4flenEv) referenced from Stream.o(.constdata__ZTVN4mbed6StreamE)
 <LI><a href="#[70]">mbed::Stream::read(void*, unsigned)</a> from Stream.o(i._ZN4mbed6Stream4readEPvj) referenced from textdisplay.o(.constdata__ZTV11TextDisplay)
 <LI><a href="#[70]">mbed::Stream::read(void*, unsigned)</a> from Stream.o(i._ZN4mbed6Stream4readEPvj) referenced from graphicsdisplay.o(.constdata__ZTV15GraphicsDisplay)
 <LI><a href="#[70]">mbed::Stream::read(void*, unsigned)</a> from Stream.o(i._ZN4mbed6Stream4readEPvj) referenced from adafruit_thermal.o(.constdata__ZTV16Adafruit_Thermal)
 <LI><a href="#[70]">mbed::Stream::read(void*, unsigned)</a> from Stream.o(i._ZN4mbed6Stream4readEPvj) referenced from eaepaper.o(.constdata__ZTV8EaEpaper)
 <LI><a href="#[70]">mbed::Stream::read(void*, unsigned)</a> from Stream.o(i._ZN4mbed6Stream4readEPvj) referenced from Serial.o(.constdata__ZTVN4mbed6SerialE)
 <LI><a href="#[70]">mbed::Stream::read(void*, unsigned)</a> from Stream.o(i._ZN4mbed6Stream4readEPvj) referenced from Stream.o(.constdata__ZTVN4mbed6StreamE)
 <LI><a href="#[6f]">mbed::Stream::close()</a> from Stream.o(i._ZN4mbed6Stream5closeEv) referenced from textdisplay.o(.constdata__ZTV11TextDisplay)
 <LI><a href="#[6f]">mbed::Stream::close()</a> from Stream.o(i._ZN4mbed6Stream5closeEv) referenced from graphicsdisplay.o(.constdata__ZTV15GraphicsDisplay)
 <LI><a href="#[6f]">mbed::Stream::close()</a> from Stream.o(i._ZN4mbed6Stream5closeEv) referenced from adafruit_thermal.o(.constdata__ZTV16Adafruit_Thermal)
 <LI><a href="#[6f]">mbed::Stream::close()</a> from Stream.o(i._ZN4mbed6Stream5closeEv) referenced from eaepaper.o(.constdata__ZTV8EaEpaper)
 <LI><a href="#[6f]">mbed::Stream::close()</a> from Stream.o(i._ZN4mbed6Stream5closeEv) referenced from Serial.o(.constdata__ZTVN4mbed6SerialE)
 <LI><a href="#[6f]">mbed::Stream::close()</a> from Stream.o(i._ZN4mbed6Stream5closeEv) referenced from Stream.o(.constdata__ZTVN4mbed6StreamE)
 <LI><a href="#[72]">mbed::Stream::lseek(long, int)</a> from Stream.o(i._ZN4mbed6Stream5lseekEli) referenced from textdisplay.o(.constdata__ZTV11TextDisplay)
 <LI><a href="#[72]">mbed::Stream::lseek(long, int)</a> from Stream.o(i._ZN4mbed6Stream5lseekEli) referenced from graphicsdisplay.o(.constdata__ZTV15GraphicsDisplay)
 <LI><a href="#[72]">mbed::Stream::lseek(long, int)</a> from Stream.o(i._ZN4mbed6Stream5lseekEli) referenced from adafruit_thermal.o(.constdata__ZTV16Adafruit_Thermal)
 <LI><a href="#[72]">mbed::Stream::lseek(long, int)</a> from Stream.o(i._ZN4mbed6Stream5lseekEli) referenced from eaepaper.o(.constdata__ZTV8EaEpaper)
 <LI><a href="#[72]">mbed::Stream::lseek(long, int)</a> from Stream.o(i._ZN4mbed6Stream5lseekEli) referenced from Serial.o(.constdata__ZTVN4mbed6SerialE)
 <LI><a href="#[72]">mbed::Stream::lseek(long, int)</a> from Stream.o(i._ZN4mbed6Stream5lseekEli) referenced from Stream.o(.constdata__ZTVN4mbed6StreamE)
 <LI><a href="#[6e]">mbed::Stream::write(const void*, unsigned)</a> from Stream.o(i._ZN4mbed6Stream5writeEPKvj) referenced from textdisplay.o(.constdata__ZTV11TextDisplay)
 <LI><a href="#[6e]">mbed::Stream::write(const void*, unsigned)</a> from Stream.o(i._ZN4mbed6Stream5writeEPKvj) referenced from graphicsdisplay.o(.constdata__ZTV15GraphicsDisplay)
 <LI><a href="#[6e]">mbed::Stream::write(const void*, unsigned)</a> from Stream.o(i._ZN4mbed6Stream5writeEPKvj) referenced from adafruit_thermal.o(.constdata__ZTV16Adafruit_Thermal)
 <LI><a href="#[6e]">mbed::Stream::write(const void*, unsigned)</a> from Stream.o(i._ZN4mbed6Stream5writeEPKvj) referenced from eaepaper.o(.constdata__ZTV8EaEpaper)
 <LI><a href="#[6e]">mbed::Stream::write(const void*, unsigned)</a> from Stream.o(i._ZN4mbed6Stream5writeEPKvj) referenced from Serial.o(.constdata__ZTVN4mbed6SerialE)
 <LI><a href="#[6e]">mbed::Stream::write(const void*, unsigned)</a> from Stream.o(i._ZN4mbed6Stream5writeEPKvj) referenced from Stream.o(.constdata__ZTVN4mbed6StreamE)
 <LI><a href="#[71]">mbed::Stream::isatty()</a> from Stream.o(i._ZN4mbed6Stream6isattyEv) referenced from textdisplay.o(.constdata__ZTV11TextDisplay)
 <LI><a href="#[71]">mbed::Stream::isatty()</a> from Stream.o(i._ZN4mbed6Stream6isattyEv) referenced from graphicsdisplay.o(.constdata__ZTV15GraphicsDisplay)
 <LI><a href="#[71]">mbed::Stream::isatty()</a> from Stream.o(i._ZN4mbed6Stream6isattyEv) referenced from adafruit_thermal.o(.constdata__ZTV16Adafruit_Thermal)
 <LI><a href="#[71]">mbed::Stream::isatty()</a> from Stream.o(i._ZN4mbed6Stream6isattyEv) referenced from eaepaper.o(.constdata__ZTV8EaEpaper)
 <LI><a href="#[71]">mbed::Stream::isatty()</a> from Stream.o(i._ZN4mbed6Stream6isattyEv) referenced from Serial.o(.constdata__ZTVN4mbed6SerialE)
 <LI><a href="#[71]">mbed::Stream::isatty()</a> from Stream.o(i._ZN4mbed6Stream6isattyEv) referenced from Stream.o(.constdata__ZTVN4mbed6StreamE)
 <LI><a href="#[be]">mbed::Stream::~Stream__sub_object()</a> from Stream.o(i._ZN4mbed6StreamD2Ev) referenced from Stream.o(.constdata__ZTVN4mbed6StreamE)
 <LI><a href="#[bf]">mbed::Ticker::handler()</a> from Ticker.o(i._ZN4mbed6Ticker7handlerEv) referenced from Ticker.o(.constdata__ZTVN4mbed6TickerE)
 <LI><a href="#[56]">mbed::Ticker::~Ticker()</a> from Ticker.o(i._ZN4mbed6TickerD1Ev) referenced from Ticker.o(.constdata__ZTVN4mbed6TickerE)
 <LI><a href="#[56]">mbed::Ticker::~Ticker()</a> from Ticker.o(i._ZN4mbed6TickerD1Ev) referenced from joystick.o(.text)
 <LI><a href="#[c0]">mbed::FileBase::~FileBase()</a> from FileBase.o(i._ZN4mbed8FileBaseD1Ev) referenced from FileBase.o(.constdata__ZTVN4mbed8FileBaseE)
 <LI><a href="#[c1]">mbed::FileLike::~FileLike__sub_object()</a> from FileLike.o(i._ZN4mbed8FileLikeD2Ev) referenced from FileLike.o(.constdata__ZTVN4mbed8FileLikeE)
 <LI><a href="#[af]">EaEpaper::cls()</a> from eaepaper.o(.text) referenced from eaepaper.o(.constdata__ZTV8EaEpaper)
 <LI><a href="#[ad]">EaEpaper::rows()</a> from eaepaper.o(.text) referenced from eaepaper.o(.constdata__ZTV8EaEpaper)
 <LI><a href="#[ab]">EaEpaper::_putc(int)</a> from eaepaper.o(.text) referenced from eaepaper.o(.constdata__ZTV8EaEpaper)
 <LI><a href="#[b1]">EaEpaper::pixel(int, int, int)</a> from eaepaper.o(.text) referenced from eaepaper.o(.constdata__ZTV8EaEpaper)
 <LI><a href="#[b2]">EaEpaper::width()</a> from eaepaper.o(.text) referenced from eaepaper.o(.constdata__ZTV8EaEpaper)
 <LI><a href="#[b3]">EaEpaper::height()</a> from eaepaper.o(.text) referenced from eaepaper.o(.constdata__ZTV8EaEpaper)
 <LI><a href="#[b0]">EaEpaper::locate(int, int)</a> from eaepaper.o(.text) referenced from eaepaper.o(.constdata__ZTV8EaEpaper)
 <LI><a href="#[ae]">EaEpaper::columns()</a> from eaepaper.o(.text) referenced from eaepaper.o(.constdata__ZTV8EaEpaper)
 <LI><a href="#[ac]">EaEpaper::character(int, int, int)</a> from eaepaper.o(.text) referenced from eaepaper.o(.constdata__ZTV8EaEpaper)
 <LI><a href="#[54]">EaEpaper::~EaEpaper()</a> from main.o(i._ZN8EaEpaperD1Ev) referenced from eaepaper.o(.constdata__ZTV8EaEpaper)
 <LI><a href="#[54]">EaEpaper::~EaEpaper()</a> from main.o(i._ZN8EaEpaperD1Ev) referenced from main.o(.text)
 <LI><a href="#[a5]">thunk{-72} to mbed::Serial::_getc()</a> from Serial.o(i._ZThn72_N4mbed6Serial5_getcEv) referenced from adafruit_thermal.o(.constdata__ZTV16Adafruit_Thermal)
 <LI><a href="#[a5]">thunk{-72} to mbed::Serial::_getc()</a> from Serial.o(i._ZThn72_N4mbed6Serial5_getcEv) referenced from Serial.o(.constdata__ZTVN4mbed6SerialE)
 <LI><a href="#[a4]">thunk{-72} to mbed::Serial::_putc(int)</a> from Serial.o(i._ZThn72_N4mbed6Serial5_putcEi) referenced from adafruit_thermal.o(.constdata__ZTV16Adafruit_Thermal)
 <LI><a href="#[a4]">thunk{-72} to mbed::Serial::_putc(int)</a> from Serial.o(i._ZThn72_N4mbed6Serial5_putcEi) referenced from Serial.o(.constdata__ZTVN4mbed6SerialE)
 <LI><a href="#[aa]">thunk{-96} to SimpleJpegDecode::outputBLOCK(int, int, signed char*)</a> from simplejpegdecode.o(.text) referenced from simplejpegdecode.o(.constdata__ZTV16SimpleJpegDecode)
 <LI><a href="#[6d]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced from simplejpegdecode.o(.constdata__ZTV10inverseDCT)
 <LI><a href="#[6d]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced 3 times from textdisplay.o(.constdata__ZTV11TextDisplay)
 <LI><a href="#[6d]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced 3 times from fatfilesystem.o(.constdata__ZTV13FATFileSystem)
 <LI><a href="#[6d]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced 3 times from basejpegdecode.o(.constdata__ZTV14BaseJpegDecode)
 <LI><a href="#[6d]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced 3 times from graphicsdisplay.o(.constdata__ZTV15GraphicsDisplay)
 <LI><a href="#[6d]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced 6 times from retarget.o(.constdata__ZTVN4mbed10FileHandleE)
 <LI><a href="#[6d]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced from TimerEvent.o(.constdata__ZTVN4mbed10TimerEventE)
 <LI><a href="#[6d]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced from FileSystemLike.o(.constdata__ZTVN4mbed14FileSystemLikeE)
 <LI><a href="#[6d]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced 2 times from Stream.o(.constdata__ZTVN4mbed6StreamE)
 <LI><a href="#[6d]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced 6 times from FileLike.o(.constdata__ZTVN4mbed8FileLikeE)
 <LI><a href="#[6d]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced 3 times from fatdirhandle.o(.constdata__ZTVN4mbed9DirHandleE)
 <LI><a href="#[c7]">__main</a> from __main.o(!!!main) referenced from startup_LPC17xx.o(.text)
 <LI><a href="#[c6]">__sti___11_command_cpp_369aa827</a> from command.o(.text) referenced from command.o(.init_array)
 <LI><a href="#[c5]">__sti___12_joystick_cpp_joystick</a> from joystick.o(.text) referenced from joystick.o(.init_array)
 <LI><a href="#[c3]">__sti___17_serial_camera_cpp_OE</a> from serial_camera.o(.text) referenced from serial_camera.o(.init_array)
 <LI><a href="#[c4]">__sti___7_EPD_cpp__time</a> from epd.o(.text) referenced from epd.o(.init_array)
 <LI><a href="#[c2]">__sti___8_main_cpp_sd</a> from main.o(.text) referenced from main.o(.init_array)
 <LI><a href="#[5e]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[5f]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[5d]">_sbackspace</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[61]">_scanf_char_input</a> from scanf_char.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[5c]">_sgetc</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[5b]">_sputc</a> from _sputc.o(.text) referenced from __2sprintf.o(.text)
 <LI><a href="#[60]">fputc</a> from fputc.o(i.fputc) referenced from _printf_char_file.o(.text)
 <LI><a href="#[62]">isspace</a> from isspace.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[68]">uart0_irq</a> from serial_api.o(i.uart0_irq) referenced from serial_api.o(i.serial_irq_set_internal)
 <LI><a href="#[69]">uart1_irq</a> from serial_api.o(i.uart1_irq) referenced from serial_api.o(i.serial_irq_set_internal)
 <LI><a href="#[6a]">uart2_irq</a> from serial_api.o(i.uart2_irq) referenced from serial_api.o(i.serial_irq_set_internal)
 <LI><a href="#[6b]">uart3_irq</a> from serial_api.o(i.uart3_irq) referenced from serial_api.o(i.serial_irq_set_internal)
 <LI><a href="#[6c]">us_ticker_irq_handler</a> from us_ticker_api.o(i.us_ticker_irq_handler) referenced from us_ticker.o(i.us_ticker_init)
 <LI><a href="#[6c]">us_ticker_irq_handler</a> from us_ticker_api.o(i.us_ticker_irq_handler) referenced from us_ticker.o(i.us_ticker_read)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[c7]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[c9]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[cb]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[30f]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[310]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[311]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[312]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[cc]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[313]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[cd]"></a>_printf_n</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_n.o(.ARM.Collect$$_printf_percent$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_charcount
</UL>

<P><STRONG><a name="[236]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[cf]"></a>_printf_p</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_p.o(.ARM.Collect$$_printf_percent$$00000002))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_p &rArr; _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
</UL>

<P><STRONG><a name="[d1]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[d3]"></a>_printf_e</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_e.o(.ARM.Collect$$_printf_percent$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = _printf_e &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[d4]"></a>_printf_g</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_g.o(.ARM.Collect$$_printf_percent$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = _printf_g &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[d5]"></a>_printf_a</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_a.o(.ARM.Collect$$_printf_percent$$00000006))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = _printf_a &rArr; _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[314]"></a>_printf_ll</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ll.o(.ARM.Collect$$_printf_percent$$00000007))

<P><STRONG><a name="[d7]"></a>_printf_i</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_i.o(.ARM.Collect$$_printf_percent$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_i &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[d9]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[da]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[db]"></a>_printf_o</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_o.o(.ARM.Collect$$_printf_percent$$0000000B))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_o &rArr; _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[dd]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[df]"></a>_printf_lli</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lli.o(.ARM.Collect$$_printf_percent$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lli &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[e1]"></a>_printf_lld</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lld.o(.ARM.Collect$$_printf_percent$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lld &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[e2]"></a>_printf_llu</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llu.o(.ARM.Collect$$_printf_percent$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_llu &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[e3]"></a>_printf_llo</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llo.o(.ARM.Collect$$_printf_percent$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_llo &rArr; _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
</UL>

<P><STRONG><a name="[e5]"></a>_printf_llx</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llx.o(.ARM.Collect$$_printf_percent$$00000011))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_llx &rArr; _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
</UL>

<P><STRONG><a name="[315]"></a>_printf_l</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_l.o(.ARM.Collect$$_printf_percent$$00000012))

<P><STRONG><a name="[e7]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[e9]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[eb]"></a>_printf_lc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lc.o(.ARM.Collect$$_printf_percent$$00000015))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[ed]"></a>_printf_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ls.o(.ARM.Collect$$_printf_percent$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_ls &rArr; _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
</UL>

<P><STRONG><a name="[316]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[fe]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[317]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[ef]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[318]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000008))

<P><STRONG><a name="[f1]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000D))
<BR><BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[319]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[31a]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[31b]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))

<P><STRONG><a name="[f3]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[31c]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[31d]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[f4]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[31e]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[31f]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[320]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[321]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[322]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[323]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[324]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[f6]"></a>__rt_lib_init_stdio_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000022))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_stdio_2 &rArr; _initio &rArr; freopen &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; serial_set_flow_control &rArr; gpio_init_out_ex &rArr; gpio_init &rArr; pin_function &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[325]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[326]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002A))

<P><STRONG><a name="[f8]"></a>__rt_lib_init_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002F))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_cpp_2 &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[327]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[328]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[329]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[32a]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000031))

<P><STRONG><a name="[f9]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000001))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __rt_lib_shutdown_cpp_1 &rArr; __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[ca]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[32b]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[fb]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[32c]"></a>__rt_lib_shutdown_stdio_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[fd]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[32d]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[ff]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 1792 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; $Super$$main &rArr; cmd_findvalidfilename(unsigned char*, unsigned char) &rArr; mbed::Stream::printf(const char*, ...) &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; serial_set_flow_control &rArr; gpio_init_out_ex &rArr; gpio_init &rArr; pin_function &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[32e]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[102]"></a>FATDirHandle::FATDirHandle(const FATFS_DIR&)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, fatdirhandle.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FATDirHandle::FATDirHandle(const FATFS_DIR&) &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFileSystem::opendir(const char*)
</UL>

<P><STRONG><a name="[32f]"></a>FATDirHandle::FATDirHandle__sub_object(const FATFS_DIR&)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fatdirhandle.o(.text), UNUSED)

<P><STRONG><a name="[330]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, maybetermalloc1.o(.emb_text), UNUSED)

<P><STRONG><a name="[7b]"></a>FATDirHandle::closedir()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, fatdirhandle.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FATDirHandle::closedir()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fatdirhandle.o(.constdata__ZTV12FATDirHandle)
</UL>
<P><STRONG><a name="[7c]"></a>FATDirHandle::readdir()</STRONG> (Thumb, 68 bytes, Stack size 48 bytes, fatdirhandle.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = FATDirHandle::readdir() &rArr; f_readdir &rArr; dir_read(FATFS_DIR*) &rArr; dir_next(FATFS_DIR*, int) &rArr; create_chain(FATFS*, unsigned long) &rArr; put_fat(FATFS*, unsigned long, unsigned long) &rArr; move_window(FATFS*, unsigned long) &rArr; disk_read(unsigned char, unsigned char*, unsigned long, unsigned char) &rArr; debug_if(int, const char*, ...) &rArr; __c89vfprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fatdirhandle.o(.constdata__ZTV12FATDirHandle)
</UL>
<P><STRONG><a name="[7d]"></a>FATDirHandle::rewinddir()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fatdirhandle.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> fatdirhandle.o(.constdata__ZTV12FATDirHandle)
</UL>
<P><STRONG><a name="[7e]"></a>FATDirHandle::telldir()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fatdirhandle.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> fatdirhandle.o(.constdata__ZTV12FATDirHandle)
</UL>
<P><STRONG><a name="[7f]"></a>FATDirHandle::seekdir(long)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fatdirhandle.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> fatdirhandle.o(.constdata__ZTV12FATDirHandle)
</UL>
<P><STRONG><a name="[1d1]"></a>feof</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, feof.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_convertbimage(unsigned char*, unsigned char)
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_convert2bmp(unsigned char*, unsigned char)
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_convert1bpp(unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[106]"></a>turnonLED(int, int)</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = turnonLED(int, int) &rArr; mbed::DigitalOut::operator =(int) &rArr; mbed::DigitalOut::write(int) &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::operator =(int)
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[109]"></a>$Super$$main</STRONG> (Thumb, 266 bytes, Stack size 328 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1784 + Unknown Stack Size
<LI>Call Chain = $Super$$main &rArr; cmd_findvalidfilename(unsigned char*, unsigned char) &rArr; mbed::Stream::printf(const char*, ...) &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; serial_set_flow_control &rArr; gpio_init_out_ex &rArr; gpio_init &rArr; pin_function &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ms
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::printf(const char*, ...)
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::baud(int)
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_findvalidfilename(unsigned char*, unsigned char)
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_joystick()
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_convertbimage(unsigned char*, unsigned char)
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_takepicture(unsigned char*, unsigned char)
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_removeall(unsigned char*, unsigned char)
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_printer(unsigned char*, unsigned char)
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turnonLED(int, int)
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10e]"></a>SDFileSystem::SDFileSystem(PinName, PinName, PinName, PinName, const char*)</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, sdfilesystem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = SDFileSystem::SDFileSystem(PinName, PinName, PinName, PinName, const char*) &rArr; mbed::SPI::SPI(PinName, PinName, PinName, PinName) &rArr; spi_init &rArr; spi_frequency &rArr; error &rArr; exit &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; serial_set_flow_control &rArr; gpio_init_out_ex &rArr; gpio_init &rArr; pin_function &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::SPI(PinName, PinName, PinName, PinName)
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFileSystem::FATFileSystem__sub_object(const char*)
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::operator =(int)
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_out
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_sd
</UL>

<P><STRONG><a name="[331]"></a>SDFileSystem::SDFileSystem__sub_object(PinName, PinName, PinName, PinName, const char*)</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, sdfilesystem.o(.text), UNUSED)

<P><STRONG><a name="[11a]"></a>SDFileSystem::_cmd(int, int)</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, sdfilesystem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = SDFileSystem::_cmd(int, int) &rArr; mbed::SPI::write(int) &rArr; spi_frequency &rArr; error &rArr; exit &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; serial_set_flow_control &rArr; gpio_init_out_ex &rArr; gpio_init &rArr; pin_function &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::write(int)
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::operator =(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDFileSystem::disk_write(const unsigned char*, unsigned long long)
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDFileSystem::disk_read(unsigned char*, unsigned long long)
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDFileSystem::disk_initialize()
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDFileSystem::initialise_card()
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDFileSystem::initialise_card_v2()
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDFileSystem::initialise_card_v1()
</UL>

<P><STRONG><a name="[11b]"></a>SDFileSystem::_read(unsigned char*, unsigned)</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, sdfilesystem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = SDFileSystem::_read(unsigned char*, unsigned) &rArr; mbed::SPI::write(int) &rArr; spi_frequency &rArr; error &rArr; exit &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; serial_set_flow_control &rArr; gpio_init_out_ex &rArr; gpio_init &rArr; pin_function &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::write(int)
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::operator =(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDFileSystem::disk_read(unsigned char*, unsigned long long)
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDFileSystem::_sd_sectors()
</UL>

<P><STRONG><a name="[11c]"></a>SDFileSystem::_cmdx(int, int)</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, sdfilesystem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = SDFileSystem::_cmdx(int, int) &rArr; mbed::SPI::write(int) &rArr; spi_frequency &rArr; error &rArr; exit &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; serial_set_flow_control &rArr; gpio_init_out_ex &rArr; gpio_init &rArr; pin_function &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::write(int)
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::operator =(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDFileSystem::_sd_sectors()
</UL>

<P><STRONG><a name="[11d]"></a>SDFileSystem::_sd_sectors()</STRONG> (Thumb, 270 bytes, Stack size 88 bytes, sdfilesystem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = SDFileSystem::_sd_sectors() &rArr; SDFileSystem::_cmdx(int, int) &rArr; mbed::SPI::write(int) &rArr; spi_frequency &rArr; error &rArr; exit &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; serial_set_flow_control &rArr; gpio_init_out_ex &rArr; gpio_init &rArr; pin_function &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDFileSystem::_cmdx(int, int)
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDFileSystem::_read(unsigned char*, unsigned)
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug(const char*, ...)
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_bits(unsigned char*, int, int)
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_if(int, const char*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDFileSystem::disk_initialize()
</UL>

<P><STRONG><a name="[120]"></a>SDFileSystem::initialise_card_v1()</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, sdfilesystem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = SDFileSystem::initialise_card_v1() &rArr; SDFileSystem::_cmd(int, int) &rArr; mbed::SPI::write(int) &rArr; spi_frequency &rArr; error &rArr; exit &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; serial_set_flow_control &rArr; gpio_init_out_ex &rArr; gpio_init &rArr; pin_function &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDFileSystem::_cmd(int, int)
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug(const char*, ...)
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_if(int, const char*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDFileSystem::initialise_card()
</UL>

<P><STRONG><a name="[121]"></a>SDFileSystem::_cmd58()</STRONG> (Thumb, 506 bytes, Stack size 24 bytes, sdfilesystem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = SDFileSystem::_cmd58() &rArr; mbed::SPI::write(int) &rArr; spi_frequency &rArr; error &rArr; exit &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; serial_set_flow_control &rArr; gpio_init_out_ex &rArr; gpio_init &rArr; pin_function &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::write(int)
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::operator =(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDFileSystem::initialise_card_v2()
</UL>

<P><STRONG><a name="[122]"></a>SDFileSystem::initialise_card_v2()</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, sdfilesystem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = SDFileSystem::initialise_card_v2() &rArr; SDFileSystem::_cmd58() &rArr; mbed::SPI::write(int) &rArr; spi_frequency &rArr; error &rArr; exit &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; serial_set_flow_control &rArr; gpio_init_out_ex &rArr; gpio_init &rArr; pin_function &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDFileSystem::_cmd58()
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDFileSystem::_cmd(int, int)
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug(const char*, ...)
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_if(int, const char*, ...)
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDFileSystem::initialise_card()
</UL>

<P><STRONG><a name="[123]"></a>SDFileSystem::_cmd8()</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, sdfilesystem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = SDFileSystem::_cmd8() &rArr; mbed::SPI::write(int) &rArr; spi_frequency &rArr; error &rArr; exit &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; serial_set_flow_control &rArr; gpio_init_out_ex &rArr; gpio_init &rArr; pin_function &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::write(int)
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::operator =(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDFileSystem::initialise_card()
</UL>

<P><STRONG><a name="[124]"></a>SDFileSystem::initialise_card()</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, sdfilesystem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = SDFileSystem::initialise_card() &rArr; SDFileSystem::initialise_card_v2() &rArr; SDFileSystem::_cmd58() &rArr; mbed::SPI::write(int) &rArr; spi_frequency &rArr; error &rArr; exit &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; serial_set_flow_control &rArr; gpio_init_out_ex &rArr; gpio_init &rArr; pin_function &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::frequency(int)
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::write(int)
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDFileSystem::_cmd8()
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDFileSystem::initialise_card_v2()
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDFileSystem::initialise_card_v1()
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDFileSystem::_cmd(int, int)
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug(const char*, ...)
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::operator =(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDFileSystem::disk_initialize()
</UL>

<P><STRONG><a name="[87]"></a>SDFileSystem::disk_initialize()</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, sdfilesystem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = SDFileSystem::disk_initialize() &rArr; SDFileSystem::_sd_sectors() &rArr; SDFileSystem::_cmdx(int, int) &rArr; mbed::SPI::write(int) &rArr; spi_frequency &rArr; error &rArr; exit &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; serial_set_flow_control &rArr; gpio_init_out_ex &rArr; gpio_init &rArr; pin_function &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::frequency(int)
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDFileSystem::initialise_card()
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDFileSystem::_sd_sectors()
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDFileSystem::_cmd(int, int)
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug(const char*, ...)
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_if(int, const char*, ...)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sdfilesystem.o(.constdata__ZTV12SDFileSystem)
</UL>
<P><STRONG><a name="[88]"></a>SDFileSystem::disk_status()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sdfilesystem.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> sdfilesystem.o(.constdata__ZTV12SDFileSystem)
</UL>
<P><STRONG><a name="[89]"></a>SDFileSystem::disk_read(unsigned char*, unsigned long long)</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, sdfilesystem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = SDFileSystem::disk_read(unsigned char*, unsigned long long) &rArr; SDFileSystem::_read(unsigned char*, unsigned) &rArr; mbed::SPI::write(int) &rArr; spi_frequency &rArr; error &rArr; exit &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; serial_set_flow_control &rArr; gpio_init_out_ex &rArr; gpio_init &rArr; pin_function &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDFileSystem::_read(unsigned char*, unsigned)
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDFileSystem::_cmd(int, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sdfilesystem.o(.constdata__ZTV12SDFileSystem)
</UL>
<P><STRONG><a name="[126]"></a>SDFileSystem::_write(const unsigned char*, unsigned)</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, sdfilesystem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = SDFileSystem::_write(const unsigned char*, unsigned) &rArr; mbed::SPI::write(int) &rArr; spi_frequency &rArr; error &rArr; exit &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; serial_set_flow_control &rArr; gpio_init_out_ex &rArr; gpio_init &rArr; pin_function &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::write(int)
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::operator =(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDFileSystem::disk_write(const unsigned char*, unsigned long long)
</UL>

<P><STRONG><a name="[8a]"></a>SDFileSystem::disk_write(const unsigned char*, unsigned long long)</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, sdfilesystem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = SDFileSystem::disk_write(const unsigned char*, unsigned long long) &rArr; SDFileSystem::_write(const unsigned char*, unsigned) &rArr; mbed::SPI::write(int) &rArr; spi_frequency &rArr; error &rArr; exit &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; serial_set_flow_control &rArr; gpio_init_out_ex &rArr; gpio_init &rArr; pin_function &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDFileSystem::_write(const unsigned char*, unsigned)
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDFileSystem::_cmd(int, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sdfilesystem.o(.constdata__ZTV12SDFileSystem)
</UL>
<P><STRONG><a name="[8b]"></a>SDFileSystem::disk_sync()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sdfilesystem.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> sdfilesystem.o(.constdata__ZTV12SDFileSystem)
</UL>
<P><STRONG><a name="[8c]"></a>SDFileSystem::disk_sectors()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, sdfilesystem.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> sdfilesystem.o(.constdata__ZTV12SDFileSystem)
</UL>
<P><STRONG><a name="[128]"></a>FATFileHandle::FATFileHandle(FIL)</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, fatfilehandle.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FATFileHandle::FATFileHandle(FIL) &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFileSystem::open(const char*, int)
</UL>

<P><STRONG><a name="[332]"></a>FATFileHandle::FATFileHandle__sub_object(FIL)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, fatfilehandle.o(.text), UNUSED)

<P><STRONG><a name="[8e]"></a>FATFileHandle::close()</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, fatfilehandle.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = FATFileHandle::close() &rArr; f_close &rArr; f_sync &rArr; sync(FATFS*) &rArr; move_window(FATFS*, unsigned long) &rArr; disk_read(unsigned char, unsigned char*, unsigned long, unsigned char) &rArr; debug_if(int, const char*, ...) &rArr; __c89vfprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fatfilehandle.o(.constdata__ZTV13FATFileHandle)
</UL>
<P><STRONG><a name="[8d]"></a>FATFileHandle::write(const void*, unsigned)</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, fatfilehandle.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = FATFileHandle::write(const void*, unsigned) &rArr; f_write &rArr; create_chain(FATFS*, unsigned long) &rArr; put_fat(FATFS*, unsigned long, unsigned long) &rArr; move_window(FATFS*, unsigned long) &rArr; disk_read(unsigned char, unsigned char*, unsigned long, unsigned char) &rArr; debug_if(int, const char*, ...) &rArr; __c89vfprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_if(int, const char*, ...)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fatfilehandle.o(.constdata__ZTV13FATFileHandle)
</UL>
<P><STRONG><a name="[8f]"></a>FATFileHandle::read(void*, unsigned)</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, fatfilehandle.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = FATFileHandle::read(void*, unsigned) &rArr; f_read &rArr; get_fat(FATFS*, unsigned long) &rArr; move_window(FATFS*, unsigned long) &rArr; disk_read(unsigned char, unsigned char*, unsigned long, unsigned char) &rArr; debug_if(int, const char*, ...) &rArr; __c89vfprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_if(int, const char*, ...)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fatfilehandle.o(.constdata__ZTV13FATFileHandle)
</UL>
<P><STRONG><a name="[90]"></a>FATFileHandle::isatty()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fatfilehandle.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> fatfilehandle.o(.constdata__ZTV13FATFileHandle)
</UL>
<P><STRONG><a name="[91]"></a>FATFileHandle::lseek(long, int)</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, fatfilehandle.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = FATFileHandle::lseek(long, int) &rArr; f_lseek &rArr; create_chain(FATFS*, unsigned long) &rArr; put_fat(FATFS*, unsigned long, unsigned long) &rArr; move_window(FATFS*, unsigned long) &rArr; disk_read(unsigned char, unsigned char*, unsigned long, unsigned char) &rArr; debug_if(int, const char*, ...) &rArr; __c89vfprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_if(int, const char*, ...)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fatfilehandle.o(.constdata__ZTV13FATFileHandle)
</UL>
<P><STRONG><a name="[92]"></a>FATFileHandle::fsync()</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, fatfilehandle.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = FATFileHandle::fsync() &rArr; f_sync &rArr; sync(FATFS*) &rArr; move_window(FATFS*, unsigned long) &rArr; disk_read(unsigned char, unsigned char*, unsigned long, unsigned char) &rArr; debug_if(int, const char*, ...) &rArr; __c89vfprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_if(int, const char*, ...)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fatfilehandle.o(.constdata__ZTV13FATFileHandle)
</UL>
<P><STRONG><a name="[93]"></a>FATFileHandle::flen()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fatfilehandle.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> fatfilehandle.o(.constdata__ZTV13FATFileHandle)
</UL>
<P><STRONG><a name="[12f]"></a>get_fattime</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, fatfilesystem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = get_fattime &rArr; time &rArr; rtc_read &rArr; mktime &rArr; _tm_carry
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[117]"></a>FATFileSystem::FATFileSystem__sub_object(const char*)</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, fatfilesystem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = FATFileSystem::FATFileSystem__sub_object(const char*) &rArr; error &rArr; exit &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; serial_set_flow_control &rArr; gpio_init_out_ex &rArr; gpio_init &rArr; pin_function &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileSystemLike::FileSystemLike__sub_object(const char*)
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_if(int, const char*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDFileSystem::SDFileSystem(PinName, PinName, PinName, PinName, const char*)
</UL>

<P><STRONG><a name="[333]"></a>FATFileSystem::~FATFileSystem()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fatfilesystem.o(.text), UNUSED)

<P><STRONG><a name="[96]"></a>FATFileSystem::~FATFileSystem__sub_object()</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, fatfilesystem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FATFileSystem::~FATFileSystem__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileSystemLike::~FileSystemLike__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFileSystem::~FATFileSystem__deallocating()
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDFileSystem::~SDFileSystem()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fatfilesystem.o(.constdata__ZTV13FATFileSystem)
</UL>
<P><STRONG><a name="[97]"></a>FATFileSystem::~FATFileSystem__deallocating()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, fatfilesystem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FATFileSystem::~FATFileSystem__deallocating() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFileSystem::~FATFileSystem__sub_object()
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fatfilesystem.o(.constdata__ZTV13FATFileSystem)
</UL>
<P><STRONG><a name="[82]"></a>FATFileSystem::open(const char*, int)</STRONG> (Thumb, 178 bytes, Stack size 1176 bytes, fatfilesystem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1648 + Unknown Stack Size
<LI>Call Chain = FATFileSystem::open(const char*, int) &rArr; f_open &rArr; dir_register(FATFS_DIR*) &rArr; dir_find(FATFS_DIR*) &rArr; dir_next(FATFS_DIR*, int) &rArr; create_chain(FATFS*, unsigned long) &rArr; put_fat(FATFS*, unsigned long, unsigned long) &rArr; move_window(FATFS*, unsigned long) &rArr; disk_read(unsigned char, unsigned char*, unsigned long, unsigned char) &rArr; debug_if(int, const char*, ...) &rArr; __c89vfprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_if(int, const char*, ...)
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFileHandle::FATFileHandle(FIL)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sdfilesystem.o(.constdata__ZTV12SDFileSystem)
<LI> fatfilesystem.o(.constdata__ZTV13FATFileSystem)
</UL>
<P><STRONG><a name="[83]"></a>FATFileSystem::remove(const char*)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, fatfilesystem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = FATFileSystem::remove(const char*) &rArr; f_unlink &rArr; follow_path(FATFS_DIR*, const char*) &rArr; dir_find(FATFS_DIR*) &rArr; dir_next(FATFS_DIR*, int) &rArr; create_chain(FATFS*, unsigned long) &rArr; put_fat(FATFS*, unsigned long, unsigned long) &rArr; move_window(FATFS*, unsigned long) &rArr; disk_read(unsigned char, unsigned char*, unsigned long, unsigned char) &rArr; debug_if(int, const char*, ...) &rArr; __c89vfprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_if(int, const char*, ...)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sdfilesystem.o(.constdata__ZTV12SDFileSystem)
<LI> fatfilesystem.o(.constdata__ZTV13FATFileSystem)
</UL>
<P><STRONG><a name="[86]"></a>FATFileSystem::format()</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, fatfilesystem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = FATFileSystem::format() &rArr; f_mkfs &rArr; disk_write(unsigned char, const unsigned char*, unsigned long, unsigned char) &rArr; debug_if(int, const char*, ...) &rArr; __c89vfprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_if(int, const char*, ...)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sdfilesystem.o(.constdata__ZTV12SDFileSystem)
<LI> fatfilesystem.o(.constdata__ZTV13FATFileSystem)
</UL>
<P><STRONG><a name="[84]"></a>FATFileSystem::opendir(const char*)</STRONG> (Thumb, 46 bytes, Stack size 56 bytes, fatfilesystem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = FATFileSystem::opendir(const char*) &rArr; f_opendir &rArr; follow_path(FATFS_DIR*, const char*) &rArr; dir_find(FATFS_DIR*) &rArr; dir_next(FATFS_DIR*, int) &rArr; create_chain(FATFS*, unsigned long) &rArr; put_fat(FATFS*, unsigned long, unsigned long) &rArr; move_window(FATFS*, unsigned long) &rArr; disk_read(unsigned char, unsigned char*, unsigned long, unsigned char) &rArr; debug_if(int, const char*, ...) &rArr; __c89vfprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATDirHandle::FATDirHandle(const FATFS_DIR&)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sdfilesystem.o(.constdata__ZTV12SDFileSystem)
<LI> fatfilesystem.o(.constdata__ZTV13FATFileSystem)
</UL>
<P><STRONG><a name="[85]"></a>FATFileSystem::mkdir(const char*, int)</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, fatfilesystem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = FATFileSystem::mkdir(const char*, int) &rArr; f_mkdir &rArr; dir_register(FATFS_DIR*) &rArr; dir_find(FATFS_DIR*) &rArr; dir_next(FATFS_DIR*, int) &rArr; create_chain(FATFS*, unsigned long) &rArr; put_fat(FATFS*, unsigned long, unsigned long) &rArr; move_window(FATFS*, unsigned long) &rArr; disk_read(unsigned char, unsigned char*, unsigned long, unsigned char) &rArr; debug_if(int, const char*, ...) &rArr; __c89vfprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sdfilesystem.o(.constdata__ZTV12SDFileSystem)
<LI> fatfilesystem.o(.constdata__ZTV13FATFileSystem)
</UL>
<P><STRONG><a name="[156]"></a>ff_convert</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, ccsbcs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ff_convert
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo(FATFS_DIR*, FILINFO*)
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name(FATFS_DIR*, const char**)
</UL>

<P><STRONG><a name="[14a]"></a>ff_wtoupper</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, ccsbcs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn(unsigned short*, unsigned char*)
</UL>

<P><STRONG><a name="[147]"></a>clust2sect(FATFS*, unsigned long)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ff.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next(FATFS_DIR*, int)
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi(FATFS_DIR*, unsigned short)
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>

<P><STRONG><a name="[142]"></a>get_fat(FATFS*, unsigned long)</STRONG> (Thumb, 228 bytes, Stack size 24 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = get_fat(FATFS*, unsigned long) &rArr; move_window(FATFS*, unsigned long) &rArr; disk_read(unsigned char, unsigned char*, unsigned long, unsigned char) &rArr; debug_if(int, const char*, ...) &rArr; __c89vfprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window(FATFS*, unsigned long)
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next(FATFS_DIR*, int)
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi(FATFS_DIR*, unsigned short)
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain(FATFS*, unsigned long)
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain(FATFS*, unsigned long)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>

<P><STRONG><a name="[143]"></a>put_fat(FATFS*, unsigned long, unsigned long)</STRONG> (Thumb, 310 bytes, Stack size 32 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = put_fat(FATFS*, unsigned long, unsigned long) &rArr; move_window(FATFS*, unsigned long) &rArr; disk_read(unsigned char, unsigned char*, unsigned long, unsigned char) &rArr; debug_if(int, const char*, ...) &rArr; __c89vfprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window(FATFS*, unsigned long)
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain(FATFS*, unsigned long)
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain(FATFS*, unsigned long)
</UL>

<P><STRONG><a name="[14b]"></a>gen_numname(unsigned char*, const unsigned char*, const unsigned short*, unsigned short)</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = gen_numname(unsigned char*, const unsigned char*, const unsigned short*, unsigned short) &rArr; mem_cpy(void*, const void*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy(void*, const void*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register(FATFS_DIR*)
</UL>

<P><STRONG><a name="[133]"></a>f_mount</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, ff.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFileSystem::FATFileSystem__sub_object(const char*)
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFileSystem::~FATFileSystem__sub_object()
</UL>

<P><STRONG><a name="[136]"></a>f_open</STRONG> (Thumb, 374 bytes, Stack size 88 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = f_open &rArr; dir_register(FATFS_DIR*) &rArr; dir_find(FATFS_DIR*) &rArr; dir_next(FATFS_DIR*, int) &rArr; create_chain(FATFS*, unsigned long) &rArr; put_fat(FATFS*, unsigned long, unsigned long) &rArr; move_window(FATFS*, unsigned long) &rArr; disk_read(unsigned char, unsigned char*, unsigned long, unsigned char) &rArr; debug_if(int, const char*, ...) &rArr; __c89vfprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted(const char**, FATFS**, unsigned char)
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path(FATFS_DIR*, const char*)
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register(FATFS_DIR*)
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust(unsigned char*, unsigned long)
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust(FATFS*, unsigned char*)
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain(FATFS*, unsigned long)
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window(FATFS*, unsigned long)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFileSystem::open(const char*, int)
</UL>

<P><STRONG><a name="[12b]"></a>f_read</STRONG> (Thumb, 458 bytes, Stack size 64 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = f_read &rArr; get_fat(FATFS*, unsigned long) &rArr; move_window(FATFS*, unsigned long) &rArr; disk_read(unsigned char, unsigned char*, unsigned long, unsigned char) &rArr; debug_if(int, const char*, ...) &rArr; __c89vfprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read(unsigned char, unsigned char*, unsigned long, unsigned char)
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write(unsigned char, const unsigned char*, unsigned long, unsigned char)
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat(FATFS*, unsigned long)
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect(FATFS*, unsigned long)
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate(void*)
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy(void*, const void*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFileHandle::read(void*, unsigned)
</UL>

<P><STRONG><a name="[12a]"></a>f_write</STRONG> (Thumb, 524 bytes, Stack size 64 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = f_write &rArr; create_chain(FATFS*, unsigned long) &rArr; put_fat(FATFS*, unsigned long, unsigned long) &rArr; move_window(FATFS*, unsigned long) &rArr; disk_read(unsigned char, unsigned char*, unsigned long, unsigned char) &rArr; debug_if(int, const char*, ...) &rArr; __c89vfprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read(unsigned char, unsigned char*, unsigned long, unsigned char)
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write(unsigned char, const unsigned char*, unsigned long, unsigned char)
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect(FATFS*, unsigned long)
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate(void*)
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain(FATFS*, unsigned long)
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy(void*, const void*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFileHandle::write(const void*, unsigned)
</UL>

<P><STRONG><a name="[12d]"></a>f_sync</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = f_sync &rArr; sync(FATFS*) &rArr; move_window(FATFS*, unsigned long) &rArr; disk_read(unsigned char, unsigned char*, unsigned long, unsigned char) &rArr; debug_if(int, const char*, ...) &rArr; __c89vfprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write(unsigned char, const unsigned char*, unsigned long, unsigned char)
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate(void*)
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust(unsigned char*, unsigned long)
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync(FATFS*)
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window(FATFS*, unsigned long)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFileHandle::fsync()
</UL>

<P><STRONG><a name="[129]"></a>f_close</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = f_close &rArr; f_sync &rArr; sync(FATFS*) &rArr; move_window(FATFS*, unsigned long) &rArr; disk_read(unsigned char, unsigned char*, unsigned long, unsigned char) &rArr; debug_if(int, const char*, ...) &rArr; __c89vfprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFileHandle::close()
</UL>

<P><STRONG><a name="[12c]"></a>f_lseek</STRONG> (Thumb, 430 bytes, Stack size 32 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = f_lseek &rArr; create_chain(FATFS*, unsigned long) &rArr; put_fat(FATFS*, unsigned long, unsigned long) &rArr; move_window(FATFS*, unsigned long) &rArr; disk_read(unsigned char, unsigned char*, unsigned long, unsigned char) &rArr; debug_if(int, const char*, ...) &rArr; __c89vfprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read(unsigned char, unsigned char*, unsigned long, unsigned char)
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write(unsigned char, const unsigned char*, unsigned long, unsigned char)
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat(FATFS*, unsigned long)
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect(FATFS*, unsigned long)
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate(void*)
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain(FATFS*, unsigned long)
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFileHandle::lseek(long, int)
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFileSystem::open(const char*, int)
</UL>

<P><STRONG><a name="[13a]"></a>f_opendir</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = f_opendir &rArr; follow_path(FATFS_DIR*, const char*) &rArr; dir_find(FATFS_DIR*) &rArr; dir_next(FATFS_DIR*, int) &rArr; create_chain(FATFS*, unsigned long) &rArr; put_fat(FATFS*, unsigned long, unsigned long) &rArr; move_window(FATFS*, unsigned long) &rArr; disk_read(unsigned char, unsigned char*, unsigned long, unsigned char) &rArr; debug_if(int, const char*, ...) &rArr; __c89vfprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted(const char**, FATFS**, unsigned char)
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path(FATFS_DIR*, const char*)
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust(FATFS*, unsigned char*)
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi(FATFS_DIR*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFileSystem::opendir(const char*)
</UL>

<P><STRONG><a name="[104]"></a>f_readdir</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = f_readdir &rArr; dir_read(FATFS_DIR*) &rArr; dir_next(FATFS_DIR*, int) &rArr; create_chain(FATFS*, unsigned long) &rArr; put_fat(FATFS*, unsigned long, unsigned long) &rArr; move_window(FATFS*, unsigned long) &rArr; disk_read(unsigned char, unsigned char*, unsigned long, unsigned char) &rArr; debug_if(int, const char*, ...) &rArr; __c89vfprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate(void*)
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo(FATFS_DIR*, FILINFO*)
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read(FATFS_DIR*)
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next(FATFS_DIR*, int)
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi(FATFS_DIR*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATDirHandle::readdir()
</UL>

<P><STRONG><a name="[161]"></a>f_stat</STRONG> (Thumb, 62 bytes, Stack size 72 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted(const char**, FATFS**, unsigned char)
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path(FATFS_DIR*, const char*)
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo(FATFS_DIR*, FILINFO*)
</UL>

<P><STRONG><a name="[162]"></a>f_getfree</STRONG> (Thumb, 260 bytes, Stack size 56 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat(FATFS*, unsigned long)
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted(const char**, FATFS**, unsigned char)
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window(FATFS*, unsigned long)
</UL>

<P><STRONG><a name="[163]"></a>f_truncate</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat(FATFS*, unsigned long, unsigned long)
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat(FATFS*, unsigned long)
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate(void*)
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain(FATFS*, unsigned long)
</UL>

<P><STRONG><a name="[138]"></a>f_unlink</STRONG> (Thumb, 172 bytes, Stack size 104 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = f_unlink &rArr; follow_path(FATFS_DIR*, const char*) &rArr; dir_find(FATFS_DIR*) &rArr; dir_next(FATFS_DIR*, int) &rArr; create_chain(FATFS*, unsigned long) &rArr; put_fat(FATFS*, unsigned long, unsigned long) &rArr; move_window(FATFS*, unsigned long) &rArr; disk_read(unsigned char, unsigned char*, unsigned long, unsigned char) &rArr; debug_if(int, const char*, ...) &rArr; __c89vfprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted(const char**, FATFS**, unsigned char)
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path(FATFS_DIR*, const char*)
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove(FATFS_DIR*)
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read(FATFS_DIR*)
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust(FATFS*, unsigned char*)
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi(FATFS_DIR*, unsigned short)
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain(FATFS*, unsigned long)
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync(FATFS*)
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy(void*, const void*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFileSystem::remove(const char*)
</UL>

<P><STRONG><a name="[13b]"></a>f_mkdir</STRONG> (Thumb, 364 bytes, Stack size 88 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = f_mkdir &rArr; dir_register(FATFS_DIR*) &rArr; dir_find(FATFS_DIR*) &rArr; dir_next(FATFS_DIR*, int) &rArr; create_chain(FATFS*, unsigned long) &rArr; put_fat(FATFS*, unsigned long, unsigned long) &rArr; move_window(FATFS*, unsigned long) &rArr; disk_read(unsigned char, unsigned char*, unsigned long, unsigned char) &rArr; debug_if(int, const char*, ...) &rArr; __c89vfprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect(FATFS*, unsigned long)
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted(const char**, FATFS**, unsigned char)
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path(FATFS_DIR*, const char*)
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register(FATFS_DIR*)
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust(unsigned char*, unsigned long)
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain(FATFS*, unsigned long)
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain(FATFS*, unsigned long)
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync(FATFS*)
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window(FATFS*, unsigned long)
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set(void*, int, unsigned)
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy(void*, const void*, unsigned)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFileSystem::mkdir(const char*, int)
</UL>

<P><STRONG><a name="[164]"></a>f_chmod</STRONG> (Thumb, 88 bytes, Stack size 80 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted(const char**, FATFS**, unsigned char)
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path(FATFS_DIR*, const char*)
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync(FATFS*)
</UL>

<P><STRONG><a name="[165]"></a>f_utime</STRONG> (Thumb, 90 bytes, Stack size 72 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted(const char**, FATFS**, unsigned char)
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path(FATFS_DIR*, const char*)
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync(FATFS*)
</UL>

<P><STRONG><a name="[166]"></a>f_rename</STRONG> (Thumb, 280 bytes, Stack size 144 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect(FATFS*, unsigned long)
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted(const char**, FATFS**, unsigned char)
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path(FATFS_DIR*, const char*)
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove(FATFS_DIR*)
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register(FATFS_DIR*)
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust(unsigned char*, unsigned long)
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust(FATFS*, unsigned char*)
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync(FATFS*)
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window(FATFS*, unsigned long)
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy(void*, const void*, unsigned)
</UL>

<P><STRONG><a name="[139]"></a>f_mkfs</STRONG> (Thumb, 1536 bytes, Stack size 104 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = f_mkfs &rArr; disk_write(unsigned char, const unsigned char*, unsigned long, unsigned char) &rArr; debug_if(int, const char*, ...) &rArr; __c89vfprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize(unsigned char)
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write(unsigned char, const unsigned char*, unsigned long, unsigned char)
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl(unsigned char, unsigned char, void*)
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set(void*, int, unsigned)
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy(void*, const void*, unsigned)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFileSystem::format()
</UL>

<P><STRONG><a name="[15e]"></a>disk_initialize(unsigned char)</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, diskio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = disk_initialize(unsigned char) &rArr; debug_if(int, const char*, ...) &rArr; __c89vfprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_if(int, const char*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted(const char**, FATFS**, unsigned char)
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
</UL>

<P><STRONG><a name="[15d]"></a>disk_status(unsigned char)</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, diskio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = disk_status(unsigned char) &rArr; debug_if(int, const char*, ...) &rArr; __c89vfprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_if(int, const char*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate(void*)
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted(const char**, FATFS**, unsigned char)
</UL>

<P><STRONG><a name="[13e]"></a>disk_read(unsigned char, unsigned char*, unsigned long, unsigned char)</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, diskio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = disk_read(unsigned char, unsigned char*, unsigned long, unsigned char) &rArr; debug_if(int, const char*, ...) &rArr; __c89vfprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_if(int, const char*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted(const char**, FATFS**, unsigned char)
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs(FATFS*, unsigned long)
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window(FATFS*, unsigned long)
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>

<P><STRONG><a name="[13d]"></a>disk_write(unsigned char, const unsigned char*, unsigned long, unsigned char)</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, diskio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = disk_write(unsigned char, const unsigned char*, unsigned long, unsigned char) &rArr; debug_if(int, const char*, ...) &rArr; __c89vfprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_if(int, const char*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync(FATFS*)
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window(FATFS*, unsigned long)
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>

<P><STRONG><a name="[141]"></a>disk_ioctl(unsigned char, unsigned char, void*)</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, diskio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = disk_ioctl(unsigned char, unsigned char, void*) &rArr; debug_if(int, const char*, ...) &rArr; __c89vfprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_if(int, const char*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync(FATFS*)
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
</UL>

<P><STRONG><a name="[168]"></a>RxIntHandler()</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, serial_camera.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = RxIntHandler() &rArr; mbed::Stream::getc() &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; serial_set_flow_control &rArr; gpio_init_out_ex &rArr; gpio_init &rArr; pin_function &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::getc()
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::readable()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_camera.o(.text)
</UL>
<P><STRONG><a name="[57]"></a>donothing(__package_info*)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, serial_camera.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> command.o(.text)
</UL>
<P><STRONG><a name="[174]"></a>is_ack(char*, unsigned short, unsigned short)</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, serial_camera.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;instructCamera(char*, unsigned short, char*)
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;makeConnection(char*, unsigned short)
</UL>

<P><STRONG><a name="[16b]"></a>clearRxBuf()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, serial_camera.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = clearRxBuf() &rArr; mbed::Stream::getc() &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; serial_set_flow_control &rArr; gpio_init_out_ex &rArr; gpio_init &rArr; pin_function &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::getc()
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::readable()
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;makeConnection(char*, unsigned short)
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;preCapture()
</UL>

<P><STRONG><a name="[16c]"></a>sendCmd(char*, int)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, serial_camera.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = sendCmd(char*, int) &rArr; mbed::Stream::putc(int) &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; serial_set_flow_control &rArr; gpio_init_out_ex &rArr; gpio_init &rArr; pin_function &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::putc(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPictureData(__picture_info*)
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cameraGo(__picture_info*)
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cameraSnapshot(__picture_info*)
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;instructCamera(char*, unsigned short, char*)
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;makeConnection(char*, unsigned short)
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;preCapture()
</UL>

<P><STRONG><a name="[16e]"></a>verifyPackage(char*, unsigned short)</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, serial_camera.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = verifyPackage(char*, unsigned short) &rArr; mbed::Stream::printf(const char*, ...) &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; serial_set_flow_control &rArr; gpio_init_out_ex &rArr; gpio_init &rArr; pin_function &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::printf(const char*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cameraGo(__picture_info*)
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cameraSnapshot(__picture_info*)
</UL>

<P><STRONG><a name="[16f]"></a>getResponse(char**, unsigned short, unsigned short)</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, serial_camera.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = getResponse(char**, unsigned short, unsigned short) &rArr; mbed::Stream::printf(const char*, ...) &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; serial_set_flow_control &rArr; gpio_init_out_ex &rArr; gpio_init &rArr; pin_function &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ms
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::printf(const char*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPictureData(__picture_info*)
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cameraGo(__picture_info*)
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cameraSnapshot(__picture_info*)
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;instructCamera(char*, unsigned short, char*)
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;makeConnection(char*, unsigned short)
</UL>

<P><STRONG><a name="[170]"></a>preCapture()</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, serial_camera.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendCmd(char*, int)
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearRxBuf()
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>

<P><STRONG><a name="[172]"></a>makeConnection(char*, unsigned short)</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, serial_camera.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = makeConnection(char*, unsigned short) &rArr; getResponse(char**, unsigned short, unsigned short) &rArr; mbed::Stream::printf(const char*, ...) &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; serial_set_flow_control &rArr; gpio_init_out_ex &rArr; gpio_init &rArr; pin_function &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debuginfo(char*, unsigned short)
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getResponse(char**, unsigned short, unsigned short)
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendCmd(char*, int)
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearRxBuf()
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_ack(char*, unsigned short, unsigned short)
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::printf(const char*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize()
</UL>

<P><STRONG><a name="[175]"></a>instructCamera(char*, unsigned short, char*)</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, serial_camera.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = instructCamera(char*, unsigned short, char*) &rArr; getResponse(char**, unsigned short, unsigned short) &rArr; mbed::Stream::printf(const char*, ...) &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; serial_set_flow_control &rArr; gpio_init_out_ex &rArr; gpio_init &rArr; pin_function &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debuginfo(char*, unsigned short)
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getResponse(char**, unsigned short, unsigned short)
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendCmd(char*, int)
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_ack(char*, unsigned short, unsigned short)
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::printf(const char*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cameraGo(__picture_info*)
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cameraSnapshot(__picture_info*)
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetCamera()
</UL>

<P><STRONG><a name="[176]"></a>initialize()</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, serial_camera.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = initialize() &rArr; makeConnection(char*, unsigned short) &rArr; getResponse(char**, unsigned short, unsigned short) &rArr; mbed::Stream::printf(const char*, ...) &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; serial_set_flow_control &rArr; gpio_init_out_ex &rArr; gpio_init &rArr; pin_function &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::attach(void(*)(), mbed::SerialBase::IrqType)
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;makeConnection(char*, unsigned short)
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::write(int)
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::printf(const char*, ...)
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::baud(int)
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_takepicture(unsigned char*, unsigned char)
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_takephoto(unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[17a]"></a>resetCamera()</STRONG> (Thumb, 424 bytes, Stack size 56 bytes, serial_camera.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = resetCamera() &rArr; instructCamera(char*, unsigned short, char*) &rArr; getResponse(char**, unsigned short, unsigned short) &rArr; mbed::Stream::printf(const char*, ...) &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; serial_set_flow_control &rArr; gpio_init_out_ex &rArr; gpio_init &rArr; pin_function &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;instructCamera(char*, unsigned short, char*)
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::printf(const char*, ...)
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_takephoto(unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[17b]"></a>cameraSnapshot(__picture_info*)</STRONG> (Thumb, 1452 bytes, Stack size 288 bytes, serial_camera.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 752 + Unknown Stack Size
<LI>Call Chain = cameraSnapshot(__picture_info*) &rArr; instructCamera(char*, unsigned short, char*) &rArr; getResponse(char**, unsigned short, unsigned short) &rArr; mbed::Stream::printf(const char*, ...) &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; serial_set_flow_control &rArr; gpio_init_out_ex &rArr; gpio_init &rArr; pin_function &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debuginfo(char*, unsigned short)
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;instructCamera(char*, unsigned short, char*)
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getResponse(char**, unsigned short, unsigned short)
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verifyPackage(char*, unsigned short)
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendCmd(char*, int)
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::printf(const char*, ...)
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_takephoto(unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[180]"></a>cameraGo(__picture_info*)</STRONG> (Thumb, 1004 bytes, Stack size 240 bytes, serial_camera.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = cameraGo(__picture_info*) &rArr; instructCamera(char*, unsigned short, char*) &rArr; getResponse(char**, unsigned short, unsigned short) &rArr; mbed::Stream::printf(const char*, ...) &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; serial_set_flow_control &rArr; gpio_init_out_ex &rArr; gpio_init &rArr; pin_function &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debuginfo(char*, unsigned short)
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;instructCamera(char*, unsigned short, char*)
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getResponse(char**, unsigned short, unsigned short)
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verifyPackage(char*, unsigned short)
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendCmd(char*, int)
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::printf(const char*, ...)
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_takepicture(unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[181]"></a>getPictureData(__picture_info*)</STRONG> (Thumb, 446 bytes, Stack size 32 bytes, serial_camera.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debuginfo(char*, unsigned short)
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getResponse(char**, unsigned short, unsigned short)
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendCmd(char*, int)
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::printf(const char*, ...)
</UL>

<P><STRONG><a name="[173]"></a>debuginfo(char*, unsigned short)</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, debug.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = debuginfo(char*, unsigned short) &rArr; mbed::Stream::printf(const char*, ...) &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; serial_set_flow_control &rArr; gpio_init_out_ex &rArr; gpio_init &rArr; pin_function &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::printf(const char*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPictureData(__picture_info*)
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cameraGo(__picture_info*)
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cameraSnapshot(__picture_info*)
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;instructCamera(char*, unsigned short, char*)
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;makeConnection(char*, unsigned short)
</UL>

<P><STRONG><a name="[110]"></a>EaEpaper::EaEpaper(PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, const char*)</STRONG> (Thumb, 128 bytes, Stack size 72 bytes, eaepaper.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = EaEpaper::EaEpaper(PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, const char*) &rArr; EPD_Class::EPD_Class(EPD_size, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName) &rArr; mbed::SPI::SPI(PinName, PinName, PinName, PinName) &rArr; spi_init &rArr; spi_frequency &rArr; error &rArr; exit &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; serial_set_flow_control &rArr; gpio_init_out_ex &rArr; gpio_init &rArr; pin_function &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_Class::EPD_Class(EPD_size, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName)
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::I2C(PinName, PinName)
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GraphicsDisplay::GraphicsDisplay__sub_object(const char*)
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_sd
</UL>

<P><STRONG><a name="[334]"></a>EaEpaper::EaEpaper__sub_object(PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, const char*)</STRONG> (Thumb, 0 bytes, Stack size 72 bytes, eaepaper.o(.text), UNUSED)

<P><STRONG><a name="[b2]"></a>EaEpaper::width()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, eaepaper.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> eaepaper.o(.constdata__ZTV8EaEpaper)
</UL>
<P><STRONG><a name="[186]"></a>EaEpaper::getCharacterSize(int)</STRONG> (Thumb, 196 bytes, Stack size 0 bytes, eaepaper.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EaEpaper::putchar(int, int, char)
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EaEpaper::getFontIndex(int)
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EaEpaper::cwidth(int)
</UL>

<P><STRONG><a name="[185]"></a>EaEpaper::cwidth(int)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, eaepaper.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EaEpaper::cwidth(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EaEpaper::getCharacterSize(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EaEpaper::print_string(char*, int, int)
</UL>

<P><STRONG><a name="[b3]"></a>EaEpaper::height()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, eaepaper.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> eaepaper.o(.constdata__ZTV8EaEpaper)
</UL>
<P><STRONG><a name="[335]"></a>EaEpaper::cheight()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, eaepaper.o(.text), UNUSED)

<P><STRONG><a name="[187]"></a>EaEpaper::readTemperature()</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, eaepaper.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = EaEpaper::readTemperature() &rArr; mbed::I2C::read(int, char*, int, bool) &rArr; i2c_read
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::write(int, const char*, int, bool)
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::read(int, char*, int, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EaEpaper::write_disp()
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EaEpaper::clear()
</UL>

<P><STRONG><a name="[18a]"></a>EaEpaper::clear()</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, eaepaper.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 728 + Unknown Stack Size
<LI>Call Chain = EaEpaper::clear() &rArr; EPD_Class::end() &rArr; EPD_Class::frame_fixed(unsigned char, EPD_stage) &rArr; EPD_Class::line(unsigned short, const unsigned char*, unsigned char, bool, EPD_stage) &rArr; EPD_Class::SPI_put_wait(unsigned char, mbed::DigitalIn) &rArr; EPD_Class::SPI_put(unsigned char) &rArr; mbed::SPI::write(int) &rArr; spi_frequency &rArr; error &rArr; exit &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; serial_set_flow_control &rArr; gpio_init_out_ex &rArr; gpio_init &rArr; pin_function &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_Class::setFactor(int)
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_Class::begin()
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_Class::end()
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_Class::frame_fixed_repeat(unsigned char, EPD_stage)
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EaEpaper::readTemperature()
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_cleardisplay(unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[18f]"></a>EaEpaper::write_disp()</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, eaepaper.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 736 + Unknown Stack Size
<LI>Call Chain = EaEpaper::write_disp() &rArr; EPD_Class::end() &rArr; EPD_Class::frame_fixed(unsigned char, EPD_stage) &rArr; EPD_Class::line(unsigned short, const unsigned char*, unsigned char, bool, EPD_stage) &rArr; EPD_Class::SPI_put_wait(unsigned char, mbed::DigitalIn) &rArr; EPD_Class::SPI_put(unsigned char) &rArr; mbed::SPI::write(int) &rArr; spi_frequency &rArr; error &rArr; exit &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; serial_set_flow_control &rArr; gpio_init_out_ex &rArr; gpio_init &rArr; pin_function &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_Class::setFactor(int)
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_Class::begin()
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_Class::end()
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_Class::frame_data_repeat(const unsigned char*, EPD_stage)
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EaEpaper::readTemperature()
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_writedisplay(unsigned char*, unsigned char)
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_cleardisplay(unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[b1]"></a>EaEpaper::pixel(int, int, int)</STRONG> (Thumb, 262 bytes, Stack size 20 bytes, eaepaper.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = EaEpaper::pixel(int, int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_drawdot(unsigned char*, unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> eaepaper.o(.constdata__ZTV8EaEpaper)
</UL>
<P><STRONG><a name="[af]"></a>EaEpaper::cls()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, eaepaper.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EaEpaper::cls()
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> eaepaper.o(.constdata__ZTV8EaEpaper)
</UL>
<P><STRONG><a name="[192]"></a>EaEpaper::line(int, int, int, int, int)</STRONG> (Thumb, 254 bytes, Stack size 64 bytes, eaepaper.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = EaEpaper::line(int, int, int, int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EaEpaper::fillcircle(int, int, int, int)
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EaEpaper::rect(int, int, int, int, int)
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_drawmenu(unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[191]"></a>EaEpaper::rect(int, int, int, int, int)</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, eaepaper.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EaEpaper::line(int, int, int, int, int)
</UL>

<P><STRONG><a name="[336]"></a>EaEpaper::fillrect(int, int, int, int, int)</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, eaepaper.o(.text), UNUSED)

<P><STRONG><a name="[337]"></a>EaEpaper::circle(int, int, int, int)</STRONG> (Thumb, 154 bytes, Stack size 40 bytes, eaepaper.o(.text), UNUSED)

<P><STRONG><a name="[193]"></a>EaEpaper::fillcircle(int, int, int, int)</STRONG> (Thumb, 124 bytes, Stack size 64 bytes, eaepaper.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = EaEpaper::fillcircle(int, int, int, int) &rArr; EaEpaper::line(int, int, int, int, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EaEpaper::line(int, int, int, int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_drawcircle(unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[1d9]"></a>EaEpaper::setmode(int)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, eaepaper.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_setdismode(unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[b0]"></a>EaEpaper::locate(int, int)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, eaepaper.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> eaepaper.o(.constdata__ZTV8EaEpaper)
</UL>
<P><STRONG><a name="[ae]"></a>EaEpaper::columns()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, eaepaper.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EaEpaper::columns()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> eaepaper.o(.constdata__ZTV8EaEpaper)
</UL>
<P><STRONG><a name="[ad]"></a>EaEpaper::rows()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, eaepaper.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EaEpaper::rows()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> eaepaper.o(.constdata__ZTV8EaEpaper)
</UL>
<P><STRONG><a name="[ab]"></a>EaEpaper::_putc(int)</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, eaepaper.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EaEpaper::_putc(int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> eaepaper.o(.constdata__ZTV8EaEpaper)
</UL>
<P><STRONG><a name="[ac]"></a>EaEpaper::character(int, int, int)</STRONG> (Thumb, 250 bytes, Stack size 64 bytes, eaepaper.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = EaEpaper::character(int, int, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> eaepaper.o(.constdata__ZTV8EaEpaper)
</UL>
<P><STRONG><a name="[194]"></a>EaEpaper::getFontIndex(int)</STRONG> (Thumb, 46 bytes, Stack size 20 bytes, eaepaper.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = EaEpaper::getFontIndex(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EaEpaper::getCharacterSize(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EaEpaper::putchar(int, int, char)
</UL>

<P><STRONG><a name="[195]"></a>EaEpaper::putchar(int, int, char)</STRONG> (Thumb, 408 bytes, Stack size 40 bytes, eaepaper.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = EaEpaper::putchar(int, int, char) &rArr; EaEpaper::getFontIndex(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EaEpaper::getFontIndex(int)
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EaEpaper::getCharacterSize(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EaEpaper::print_string(char*, int, int)
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_drawchar(unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[1d8]"></a>EaEpaper::set_font(unsigned char*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, eaepaper.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_setfont(unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[338]"></a>EaEpaper::set_rofont(const unsigned char*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, eaepaper.o(.text), UNUSED)

<P><STRONG><a name="[1da]"></a>EaEpaper::print_bm(Bitmap, int, int)</STRONG> (Thumb, 150 bytes, Stack size 48 bytes, eaepaper.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = EaEpaper::print_bm(Bitmap, int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_drawmenu(unsigned char*, unsigned char)
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_drawicon(unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[339]"></a>EaEpaper::print_inversebm(Bitmap, int, int)</STRONG> (Thumb, 150 bytes, Stack size 48 bytes, eaepaper.o(.text), UNUSED)

<P><STRONG><a name="[196]"></a>EaEpaper::print_string(char*, int, int)</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, eaepaper.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = EaEpaper::print_string(char*, int, int) &rArr; EaEpaper::putchar(int, int, char) &rArr; EaEpaper::getFontIndex(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EaEpaper::putchar(int, int, char)
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EaEpaper::cwidth(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_drawmenu(unsigned char*, unsigned char)
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_drawstring(unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[182]"></a>GraphicsDisplay::GraphicsDisplay__sub_object(const char*)</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, graphicsdisplay.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = GraphicsDisplay::GraphicsDisplay__sub_object(const char*) &rArr; TextDisplay::TextDisplay__sub_object(const char*) &rArr; mbed::Stream::Stream__sub_object(const char*) &rArr; fopen &rArr; freopen &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; serial_set_flow_control &rArr; gpio_init_out_ex &rArr; gpio_init &rArr; pin_function &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TextDisplay::TextDisplay__sub_object(const char*)
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TextDisplay::foreground(unsigned short)
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TextDisplay::background(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EaEpaper::EaEpaper(PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, const char*)
</UL>

<P><STRONG><a name="[9f]"></a>GraphicsDisplay::window(int, int, int, int)</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, graphicsdisplay.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GraphicsDisplay::window(int, int, int, int)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> eaepaper.o(.constdata__ZTV8EaEpaper)
<LI> graphicsdisplay.o(.constdata__ZTV15GraphicsDisplay)
</UL>
<P><STRONG><a name="[a0]"></a>GraphicsDisplay::putp(int)</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, graphicsdisplay.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GraphicsDisplay::putp(int)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> eaepaper.o(.constdata__ZTV8EaEpaper)
<LI> graphicsdisplay.o(.constdata__ZTV15GraphicsDisplay)
</UL>
<P><STRONG><a name="[9e]"></a>GraphicsDisplay::cls()</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, graphicsdisplay.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GraphicsDisplay::cls()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> graphicsdisplay.o(.constdata__ZTV15GraphicsDisplay)
</UL>
<P><STRONG><a name="[a1]"></a>GraphicsDisplay::fill(int, int, int, int, int)</STRONG> (Thumb, 60 bytes, Stack size 40 bytes, graphicsdisplay.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GraphicsDisplay::fill(int, int, int, int, int)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> eaepaper.o(.constdata__ZTV8EaEpaper)
<LI> graphicsdisplay.o(.constdata__ZTV15GraphicsDisplay)
</UL>
<P><STRONG><a name="[a2]"></a>GraphicsDisplay::blit(int, int, int, int, const int*)</STRONG> (Thumb, 62 bytes, Stack size 40 bytes, graphicsdisplay.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GraphicsDisplay::blit(int, int, int, int, const int*)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> eaepaper.o(.constdata__ZTV8EaEpaper)
<LI> graphicsdisplay.o(.constdata__ZTV15GraphicsDisplay)
</UL>
<P><STRONG><a name="[a3]"></a>GraphicsDisplay::blitbit(int, int, int, int, const char*)</STRONG> (Thumb, 92 bytes, Stack size 56 bytes, graphicsdisplay.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GraphicsDisplay::blitbit(int, int, int, int, const char*)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> eaepaper.o(.constdata__ZTV8EaEpaper)
<LI> graphicsdisplay.o(.constdata__ZTV15GraphicsDisplay)
</UL>
<P><STRONG><a name="[9b]"></a>GraphicsDisplay::character(int, int, int)</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, graphicsdisplay.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GraphicsDisplay::character(int, int, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> graphicsdisplay.o(.constdata__ZTV15GraphicsDisplay)
</UL>
<P><STRONG><a name="[9d]"></a>GraphicsDisplay::columns()</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, graphicsdisplay.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GraphicsDisplay::columns()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> graphicsdisplay.o(.constdata__ZTV15GraphicsDisplay)
</UL>
<P><STRONG><a name="[9c]"></a>GraphicsDisplay::rows()</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, graphicsdisplay.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GraphicsDisplay::rows()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> graphicsdisplay.o(.constdata__ZTV15GraphicsDisplay)
</UL>
<P><STRONG><a name="[197]"></a>TextDisplay::TextDisplay__sub_object(const char*)</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, textdisplay.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = TextDisplay::TextDisplay__sub_object(const char*) &rArr; mbed::Stream::Stream__sub_object(const char*) &rArr; fopen &rArr; freopen &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; serial_set_flow_control &rArr; gpio_init_out_ex &rArr; gpio_init &rArr; pin_function &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::Stream__sub_object(const char*)
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GraphicsDisplay::GraphicsDisplay__sub_object(const char*)
</UL>

<P><STRONG><a name="[76]"></a>TextDisplay::claim(std::__FILE*)</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, textdisplay.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = TextDisplay::claim(std::__FILE*) &rArr; freopen &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; serial_set_flow_control &rArr; gpio_init_out_ex &rArr; gpio_init &rArr; pin_function &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Address Reference Count : 3]<UL><LI> eaepaper.o(.constdata__ZTV8EaEpaper)
<LI> graphicsdisplay.o(.constdata__ZTV15GraphicsDisplay)
<LI> textdisplay.o(.constdata__ZTV11TextDisplay)
</UL>
<P><STRONG><a name="[77]"></a>TextDisplay::cls()</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, textdisplay.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = TextDisplay::cls() &rArr; mbed::Stream::putc(int) &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; serial_set_flow_control &rArr; gpio_init_out_ex &rArr; gpio_init &rArr; pin_function &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::putc(int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> textdisplay.o(.constdata__ZTV11TextDisplay)
</UL>
<P><STRONG><a name="[78]"></a>TextDisplay::locate(int, int)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, textdisplay.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> graphicsdisplay.o(.constdata__ZTV15GraphicsDisplay)
<LI> textdisplay.o(.constdata__ZTV11TextDisplay)
</UL>
<P><STRONG><a name="[79]"></a>TextDisplay::foreground(unsigned short)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, textdisplay.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GraphicsDisplay::GraphicsDisplay__sub_object(const char*)
</UL>
<BR>[Address Reference Count : 3]<UL><LI> eaepaper.o(.constdata__ZTV8EaEpaper)
<LI> graphicsdisplay.o(.constdata__ZTV15GraphicsDisplay)
<LI> textdisplay.o(.constdata__ZTV11TextDisplay)
</UL>
<P><STRONG><a name="[7a]"></a>TextDisplay::background(unsigned short)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, textdisplay.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GraphicsDisplay::GraphicsDisplay__sub_object(const char*)
</UL>
<BR>[Address Reference Count : 3]<UL><LI> eaepaper.o(.constdata__ZTV8EaEpaper)
<LI> graphicsdisplay.o(.constdata__ZTV15GraphicsDisplay)
<LI> textdisplay.o(.constdata__ZTV11TextDisplay)
</UL>
<P><STRONG><a name="[74]"></a>TextDisplay::_putc(int)</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, textdisplay.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TextDisplay::_putc(int)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> graphicsdisplay.o(.constdata__ZTV15GraphicsDisplay)
<LI> textdisplay.o(.constdata__ZTV11TextDisplay)
</UL>
<P><STRONG><a name="[75]"></a>TextDisplay::_getc()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, textdisplay.o(.text))
<BR>[Address Reference Count : 3]<UL><LI> eaepaper.o(.constdata__ZTV8EaEpaper)
<LI> graphicsdisplay.o(.constdata__ZTV15GraphicsDisplay)
<LI> textdisplay.o(.constdata__ZTV11TextDisplay)
</UL>
<P><STRONG><a name="[19d]"></a>EPD_Class::SPI_put(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, epd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = EPD_Class::SPI_put(unsigned char) &rArr; mbed::SPI::write(int) &rArr; spi_frequency &rArr; error &rArr; exit &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; serial_set_flow_control &rArr; gpio_init_out_ex &rArr; gpio_init &rArr; pin_function &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::write(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_Class::SPI_put_wait(unsigned char, mbed::DigitalIn)
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_Class::begin()
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_Class::end()
</UL>

<P><STRONG><a name="[19e]"></a>EPD_Class::SPI_put_wait(unsigned char, mbed::DigitalIn)</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, epd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = EPD_Class::SPI_put_wait(unsigned char, mbed::DigitalIn) &rArr; EPD_Class::SPI_put(unsigned char) &rArr; mbed::SPI::write(int) &rArr; spi_frequency &rArr; error &rArr; exit &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; serial_set_flow_control &rArr; gpio_init_out_ex &rArr; gpio_init &rArr; pin_function &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalIn::operator int()
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_Class::SPI_put(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_Class::line(unsigned short, const unsigned char*, unsigned char, bool, EPD_stage)
</UL>

<P><STRONG><a name="[1a0]"></a>EPD_Class::SPI_send(mbed::DigitalOut, const unsigned char*, unsigned short)</STRONG> (Thumb, 60 bytes, Stack size 40 bytes, epd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = EPD_Class::SPI_send(mbed::DigitalOut, const unsigned char*, unsigned short) &rArr; mbed::SPI::write(int) &rArr; spi_frequency &rArr; error &rArr; exit &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; serial_set_flow_control &rArr; gpio_init_out_ex &rArr; gpio_init &rArr; pin_function &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::write(int)
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::operator =(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_Class::line(unsigned short, const unsigned char*, unsigned char, bool, EPD_stage)
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_Class::begin()
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_Class::end()
</UL>

<P><STRONG><a name="[18b]"></a>EPD_Class::begin()</STRONG> (Thumb, 1428 bytes, Stack size 120 bytes, epd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = EPD_Class::begin() &rArr; EPD_Class::SPI_send(mbed::DigitalOut, const unsigned char*, unsigned short) &rArr; mbed::SPI::write(int) &rArr; spi_frequency &rArr; error &rArr; exit &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; serial_set_flow_control &rArr; gpio_init_out_ex &rArr; gpio_init &rArr; pin_function &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalIn::operator int()
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::PwmOut::operator =(float)
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_us
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_Class::SPI_send(mbed::DigitalOut, const unsigned char*, unsigned short)
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_Class::SPI_put(unsigned char)
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::operator =(int)
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EaEpaper::write_disp()
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EaEpaper::clear()
</UL>

<P><STRONG><a name="[1a3]"></a>EPD_Class::line(unsigned short, const unsigned char*, unsigned char, bool, EPD_stage)</STRONG> (Thumb, 770 bytes, Stack size 80 bytes, epd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = EPD_Class::line(unsigned short, const unsigned char*, unsigned char, bool, EPD_stage) &rArr; EPD_Class::SPI_put_wait(unsigned char, mbed::DigitalIn) &rArr; EPD_Class::SPI_put(unsigned char) &rArr; mbed::SPI::write(int) &rArr; spi_frequency &rArr; error &rArr; exit &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; serial_set_flow_control &rArr; gpio_init_out_ex &rArr; gpio_init &rArr; pin_function &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_us
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_Class::SPI_send(mbed::DigitalOut, const unsigned char*, unsigned short)
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_Class::SPI_put_wait(unsigned char, mbed::DigitalIn)
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::operator =(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_Class::frame_cb(unsigned, void(*)(void*, unsigned, unsigned short), EPD_stage)
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_Class::frame_data(const unsigned char*, EPD_stage)
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_Class::frame_fixed(unsigned char, EPD_stage)
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_Class::end()
</UL>

<P><STRONG><a name="[1a4]"></a>EPD_Class::frame_fixed(unsigned char, EPD_stage)</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, epd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = EPD_Class::frame_fixed(unsigned char, EPD_stage) &rArr; EPD_Class::line(unsigned short, const unsigned char*, unsigned char, bool, EPD_stage) &rArr; EPD_Class::SPI_put_wait(unsigned char, mbed::DigitalIn) &rArr; EPD_Class::SPI_put(unsigned char) &rArr; mbed::SPI::write(int) &rArr; spi_frequency &rArr; error &rArr; exit &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; serial_set_flow_control &rArr; gpio_init_out_ex &rArr; gpio_init &rArr; pin_function &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_Class::line(unsigned short, const unsigned char*, unsigned char, bool, EPD_stage)
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_Class::end()
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_Class::frame_fixed_repeat(unsigned char, EPD_stage)
</UL>

<P><STRONG><a name="[18e]"></a>EPD_Class::end()</STRONG> (Thumb, 1174 bytes, Stack size 112 bytes, epd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 712 + Unknown Stack Size
<LI>Call Chain = EPD_Class::end() &rArr; EPD_Class::frame_fixed(unsigned char, EPD_stage) &rArr; EPD_Class::line(unsigned short, const unsigned char*, unsigned char, bool, EPD_stage) &rArr; EPD_Class::SPI_put_wait(unsigned char, mbed::DigitalIn) &rArr; EPD_Class::SPI_put(unsigned char) &rArr; mbed::SPI::write(int) &rArr; spi_frequency &rArr; error &rArr; exit &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; serial_set_flow_control &rArr; gpio_init_out_ex &rArr; gpio_init &rArr; pin_function &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_us
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_Class::frame_fixed(unsigned char, EPD_stage)
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_Class::line(unsigned short, const unsigned char*, unsigned char, bool, EPD_stage)
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_Class::SPI_send(mbed::DigitalOut, const unsigned char*, unsigned short)
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_Class::SPI_put(unsigned char)
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::operator =(int)
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EaEpaper::write_disp()
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EaEpaper::clear()
</UL>

<P><STRONG><a name="[1a5]"></a>EPD_Class::frame_data(const unsigned char*, EPD_stage)</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, epd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = EPD_Class::frame_data(const unsigned char*, EPD_stage) &rArr; EPD_Class::line(unsigned short, const unsigned char*, unsigned char, bool, EPD_stage) &rArr; EPD_Class::SPI_put_wait(unsigned char, mbed::DigitalIn) &rArr; EPD_Class::SPI_put(unsigned char) &rArr; mbed::SPI::write(int) &rArr; spi_frequency &rArr; error &rArr; exit &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; serial_set_flow_control &rArr; gpio_init_out_ex &rArr; gpio_init &rArr; pin_function &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_Class::line(unsigned short, const unsigned char*, unsigned char, bool, EPD_stage)
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_Class::frame_data_repeat(const unsigned char*, EPD_stage)
</UL>

<P><STRONG><a name="[1a6]"></a>EPD_Class::frame_cb(unsigned, void(*)(void*, unsigned, unsigned short), EPD_stage)</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, epd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_Class::line(unsigned short, const unsigned char*, unsigned char, bool, EPD_stage)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_Class::frame_cb_repeat(unsigned, void(*)(void*, unsigned, unsigned short), EPD_stage)
</UL>

<P><STRONG><a name="[18d]"></a>EPD_Class::frame_fixed_repeat(unsigned char, EPD_stage)</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, epd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 632 + Unknown Stack Size
<LI>Call Chain = EPD_Class::frame_fixed_repeat(unsigned char, EPD_stage) &rArr; EPD_Class::frame_fixed(unsigned char, EPD_stage) &rArr; EPD_Class::line(unsigned short, const unsigned char*, unsigned char, bool, EPD_stage) &rArr; EPD_Class::SPI_put_wait(unsigned char, mbed::DigitalIn) &rArr; EPD_Class::SPI_put(unsigned char) &rArr; mbed::SPI::write(int) &rArr; spi_frequency &rArr; error &rArr; exit &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; serial_set_flow_control &rArr; gpio_init_out_ex &rArr; gpio_init &rArr; pin_function &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::read_ms()
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::start()
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_Class::frame_fixed(unsigned char, EPD_stage)
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EaEpaper::clear()
</UL>

<P><STRONG><a name="[190]"></a>EPD_Class::frame_data_repeat(const unsigned char*, EPD_stage)</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, epd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 632 + Unknown Stack Size
<LI>Call Chain = EPD_Class::frame_data_repeat(const unsigned char*, EPD_stage) &rArr; EPD_Class::frame_data(const unsigned char*, EPD_stage) &rArr; EPD_Class::line(unsigned short, const unsigned char*, unsigned char, bool, EPD_stage) &rArr; EPD_Class::SPI_put_wait(unsigned char, mbed::DigitalIn) &rArr; EPD_Class::SPI_put(unsigned char) &rArr; mbed::SPI::write(int) &rArr; spi_frequency &rArr; error &rArr; exit &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; serial_set_flow_control &rArr; gpio_init_out_ex &rArr; gpio_init &rArr; pin_function &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::read_ms()
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::start()
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_Class::frame_data(const unsigned char*, EPD_stage)
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EaEpaper::write_disp()
</UL>

<P><STRONG><a name="[1a9]"></a>EPD_Class::frame_cb_repeat(unsigned, void(*)(void*, unsigned, unsigned short), EPD_stage)</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, epd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::read_ms()
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::start()
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_Class::frame_cb(unsigned, void(*)(void*, unsigned, unsigned short), EPD_stage)
</UL>

<P><STRONG><a name="[2cd]"></a>EPD_Class::temperature_to_factor_10x(int)</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, epd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_Class::setFactor(int)
</UL>

<P><STRONG><a name="[183]"></a>EPD_Class::EPD_Class(EPD_size, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName)</STRONG> (Thumb, 340 bytes, Stack size 40 bytes, epd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = EPD_Class::EPD_Class(EPD_size, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName) &rArr; mbed::SPI::SPI(PinName, PinName, PinName, PinName) &rArr; spi_init &rArr; spi_frequency &rArr; error &rArr; exit &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; serial_set_flow_control &rArr; gpio_init_out_ex &rArr; gpio_init &rArr; pin_function &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmout_init
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::SPI(PinName, PinName, PinName, PinName)
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::frequency(int)
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::DigitalOut(PinName)
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_in
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EaEpaper::EaEpaper(PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, const char*)
</UL>

<P><STRONG><a name="[33a]"></a>EPD_Class::EPD_Class__sub_object(EPD_size, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName)</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, epd.o(.text), UNUSED)

<P><STRONG><a name="[1ac]"></a>isDirectionValid(const char*)</STRONG> (Thumb, 184 bytes, Stack size 8 bytes, joystick.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = isDirectionValid(const char*) &rArr; wait_ms &rArr; us_ticker_read &rArr; NVIC_SetVector &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ms
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;joystick_Int_Handler()
</UL>

<P><STRONG><a name="[1ae]"></a>joystick_Int_Handler()</STRONG> (Thumb, 242 bytes, Stack size 16 bytes, joystick.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = joystick_Int_Handler() &rArr; mbed::Stream::printf(const char*, ...) &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; serial_set_flow_control &rArr; gpio_init_out_ex &rArr; gpio_init &rArr; pin_function &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::AnalogIn::read()
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isDirectionValid(const char*)
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::printf(const char*, ...)
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
</UL>
<BR>[Address Reference Count : 1]<UL><LI> joystick.o(.text)
</UL>
<P><STRONG><a name="[10c]"></a>initialize_joystick()</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, joystick.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = initialize_joystick() &rArr; mbed::Ticker::setup(unsigned) &rArr; us_ticker_read &rArr; NVIC_SetVector &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::setup(unsigned)
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FunctionPointer::attach(void(*)())
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[10]"></a>cmd_helpinfo(unsigned char*, unsigned char)</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, command.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = cmd_helpinfo(unsigned char*, unsigned char) &rArr; mbed::Stream::printf(const char*, ...) &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; serial_set_flow_control &rArr; gpio_init_out_ex &rArr; gpio_init &rArr; pin_function &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::printf(const char*, ...)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>cmd_remove(unsigned char*, unsigned char)</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, command.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = cmd_remove(unsigned char*, unsigned char) &rArr; mbed::Stream::printf(const char*, ...) &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; serial_set_flow_control &rArr; gpio_init_out_ex &rArr; gpio_init &rArr; pin_function &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::printf(const char*, ...)
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_removeall(unsigned char*, unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>cmd_removeall(unsigned char*, unsigned char)</STRONG> (Thumb, 74 bytes, Stack size 48 bytes, command.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = cmd_removeall(unsigned char*, unsigned char) &rArr; cmd_remove(unsigned char*, unsigned char) &rArr; mbed::Stream::printf(const char*, ...) &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; serial_set_flow_control &rArr; gpio_init_out_ex &rArr; gpio_init &rArr; pin_function &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_remove(unsigned char*, unsigned char)
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.data)
</UL>
<P><STRONG><a name="[1b8]"></a>isJPGfile(unsigned char*)</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, command.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = isJPGfile(unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_findvalidfilename(unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[13]"></a>cmd_findvalidfilename(unsigned char*, unsigned char)</STRONG> (Thumb, 230 bytes, Stack size 1048 bytes, command.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1456 + Unknown Stack Size
<LI>Call Chain = cmd_findvalidfilename(unsigned char*, unsigned char) &rArr; mbed::Stream::printf(const char*, ...) &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; serial_set_flow_control &rArr; gpio_init_out_ex &rArr; gpio_init &rArr; pin_function &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::printf(const char*, ...)
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readdir
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closedir
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isJPGfile(unsigned char*)
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.data)
</UL>
<P><STRONG><a name="[14]"></a>cmd_takephoto(unsigned char*, unsigned char)</STRONG> (Thumb, 246 bytes, Stack size 72 bytes, command.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 824 + Unknown Stack Size
<LI>Call Chain = cmd_takephoto(unsigned char*, unsigned char) &rArr; cameraSnapshot(__picture_info*) &rArr; instructCamera(char*, unsigned short, char*) &rArr; getResponse(char**, unsigned short, unsigned short) &rArr; mbed::Stream::printf(const char*, ...) &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; serial_set_flow_control &rArr; gpio_init_out_ex &rArr; gpio_init &rArr; pin_function &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cameraSnapshot(__picture_info*)
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetCamera()
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize()
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::printf(const char*, ...)
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.data)
</UL>
<P><STRONG><a name="[15]"></a>cmd_takepicture(unsigned char*, unsigned char)</STRONG> (Thumb, 194 bytes, Stack size 72 bytes, command.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 776 + Unknown Stack Size
<LI>Call Chain = cmd_takepicture(unsigned char*, unsigned char) &rArr; cameraGo(__picture_info*) &rArr; instructCamera(char*, unsigned short, char*) &rArr; getResponse(char**, unsigned short, unsigned short) &rArr; mbed::Stream::printf(const char*, ...) &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; serial_set_flow_control &rArr; gpio_init_out_ex &rArr; gpio_init &rArr; pin_function &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cameraGo(__picture_info*)
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize()
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::printf(const char*, ...)
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.data)
</UL>
<P><STRONG><a name="[16]"></a>cmd_printer(unsigned char*, unsigned char)</STRONG> (Thumb, 862 bytes, Stack size 32 bytes, command.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = cmd_printer(unsigned char*, unsigned char) &rArr; Adafruit_Thermal::printBitmap(int, int, const unsigned char*, bool) &rArr; Adafruit_Thermal::writeBytes(unsigned char, unsigned char, unsigned char, unsigned char) &rArr; Adafruit_Thermal::write(unsigned char) &rArr; mbed::Stream::putc(int) &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; serial_set_flow_control &rArr; gpio_init_out_ex &rArr; gpio_init &rArr; pin_function &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::printf(const char*, ...)
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::inverseOn()
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::boldOff()
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::boldOn()
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::begin(unsigned char)
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::test()
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::feed(unsigned char)
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::setBarcodeHeight(unsigned char)
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::printBarcode(char*, unsigned char)
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::printBitmap(int, int, const unsigned char*, bool)
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::inverseOff()
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.data)
</UL>
<P><STRONG><a name="[1c9]"></a>flushBImage(int, int, unsigned char*)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, command.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = flushBImage(int, int, unsigned char*) &rArr; bmp1::point(int, int, unsigned char*) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp1::point(int, int, unsigned char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.text)
</UL>
<P><STRONG><a name="[19]"></a>cmd_convertbimage(unsigned char*, unsigned char)</STRONG> (Thumb, 270 bytes, Stack size 48 bytes, command.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = cmd_convertbimage(unsigned char*, unsigned char) &rArr; bmp1::writeFile(const char*) &rArr; fopen &rArr; freopen &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; serial_set_flow_control &rArr; gpio_init_out_ex &rArr; gpio_init &rArr; pin_function &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::printf(const char*, ...)
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp1::writeFile(const char*)
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp1::clear()
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp1::resizeImage(int, int)
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleJpegDecode::setOnResult(void(*)(int, int, unsigned char*))
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BaseJpegDecode::input(unsigned char)
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BaseJpegDecode::clear()
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feof
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.data)
</UL>
<P><STRONG><a name="[1d3]"></a>flush1BPP(int, int, unsigned char*)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, command.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = flush1BPP(int, int, unsigned char*) &rArr; bmp1::flushpoint(int, int, unsigned char*) &rArr; mbed::Stream::printf(const char*, ...) &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; serial_set_flow_control &rArr; gpio_init_out_ex &rArr; gpio_init &rArr; pin_function &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp1::flushpoint(int, int, unsigned char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.text)
</UL>
<P><STRONG><a name="[17]"></a>cmd_convert1bpp(unsigned char*, unsigned char)</STRONG> (Thumb, 242 bytes, Stack size 48 bytes, command.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = cmd_convert1bpp(unsigned char*, unsigned char) &rArr; bmp1::writeFile(const char*) &rArr; fopen &rArr; freopen &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; serial_set_flow_control &rArr; gpio_init_out_ex &rArr; gpio_init &rArr; pin_function &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::printf(const char*, ...)
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp1::writeFile(const char*)
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp1::clear()
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp1::resizeImage(int, int)
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleJpegDecode::setOnResult(void(*)(int, int, unsigned char*))
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BaseJpegDecode::input(unsigned char)
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BaseJpegDecode::clear()
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feof
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.data)
</UL>
<P><STRONG><a name="[1d5]"></a>flushRGB(int, int, unsigned char*)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, command.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = flushRGB(int, int, unsigned char*) &rArr; bmp24::flushblock(int, int, unsigned char*) &rArr; bmp24::writeblock(int, int) &rArr; mbed::Stream::printf(const char*, ...) &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; serial_set_flow_control &rArr; gpio_init_out_ex &rArr; gpio_init &rArr; pin_function &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp24::flushblock(int, int, unsigned char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.text)
</UL>
<P><STRONG><a name="[18]"></a>cmd_convert2bmp(unsigned char*, unsigned char)</STRONG> (Thumb, 574 bytes, Stack size 48 bytes, command.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = cmd_convert2bmp(unsigned char*, unsigned char) &rArr; fopen &rArr; freopen &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; serial_set_flow_control &rArr; gpio_init_out_ex &rArr; gpio_init &rArr; pin_function &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::printf(const char*, ...)
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp24::initFile(int, int)
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleJpegDecode::setOnResult(void(*)(int, int, unsigned char*))
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BaseJpegDecode::input(unsigned char)
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BaseJpegDecode::clear()
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feof
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.data)
</UL>
<P><STRONG><a name="[1a]"></a>cmd_browseSDcard(unsigned char*, unsigned char)</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, command.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = cmd_browseSDcard(unsigned char*, unsigned char) &rArr; mbed::Stream::printf(const char*, ...) &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; serial_set_flow_control &rArr; gpio_init_out_ex &rArr; gpio_init &rArr; pin_function &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::printf(const char*, ...)
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readdir
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closedir
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.data)
</UL>
<P><STRONG><a name="[1b]"></a>cmd_drawrect(unsigned char*, unsigned char)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, command.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> command.o(.data)
</UL>
<P><STRONG><a name="[1c]"></a>cmd_setfont(unsigned char*, unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, command.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cmd_setfont(unsigned char*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EaEpaper::set_font(unsigned char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.data)
</UL>
<P><STRONG><a name="[1d]"></a>cmd_drawstring(unsigned char*, unsigned char)</STRONG> (Thumb, 170 bytes, Stack size 72 bytes, command.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = cmd_drawstring(unsigned char*, unsigned char) &rArr; mbed::Stream::printf(const char*, ...) &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; serial_set_flow_control &rArr; gpio_init_out_ex &rArr; gpio_init &rArr; pin_function &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EaEpaper::print_string(char*, int, int)
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::printf(const char*, ...)
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.data)
</UL>
<P><STRONG><a name="[1e]"></a>cmd_drawchar(unsigned char*, unsigned char)</STRONG> (Thumb, 152 bytes, Stack size 48 bytes, command.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = cmd_drawchar(unsigned char*, unsigned char) &rArr; mbed::Stream::printf(const char*, ...) &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; serial_set_flow_control &rArr; gpio_init_out_ex &rArr; gpio_init &rArr; pin_function &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EaEpaper::putchar(int, int, char)
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::printf(const char*, ...)
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.data)
</UL>
<P><STRONG><a name="[1f]"></a>cmd_drawdot(unsigned char*, unsigned char)</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, command.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = cmd_drawdot(unsigned char*, unsigned char) &rArr; strtoul &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EaEpaper::pixel(int, int, int)
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.data)
</UL>
<P><STRONG><a name="[25]"></a>cmd_setdismode(unsigned char*, unsigned char)</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, command.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = cmd_setdismode(unsigned char*, unsigned char) &rArr; mbed::Stream::printf(const char*, ...) &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; serial_set_flow_control &rArr; gpio_init_out_ex &rArr; gpio_init &rArr; pin_function &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EaEpaper::setmode(int)
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::printf(const char*, ...)
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.data)
</UL>
<P><STRONG><a name="[24]"></a>cmd_cleardisplay(unsigned char*, unsigned char)</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, command.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 760 + Unknown Stack Size
<LI>Call Chain = cmd_cleardisplay(unsigned char*, unsigned char) &rArr; EaEpaper::write_disp() &rArr; EPD_Class::end() &rArr; EPD_Class::frame_fixed(unsigned char, EPD_stage) &rArr; EPD_Class::line(unsigned short, const unsigned char*, unsigned char, bool, EPD_stage) &rArr; EPD_Class::SPI_put_wait(unsigned char, mbed::DigitalIn) &rArr; EPD_Class::SPI_put(unsigned char) &rArr; mbed::SPI::write(int) &rArr; spi_frequency &rArr; error &rArr; exit &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; serial_set_flow_control &rArr; gpio_init_out_ex &rArr; gpio_init &rArr; pin_function &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EaEpaper::write_disp()
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EaEpaper::clear()
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::printf(const char*, ...)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.data)
</UL>
<P><STRONG><a name="[27]"></a>cmd_writedisplay(unsigned char*, unsigned char)</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, command.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 752 + Unknown Stack Size
<LI>Call Chain = cmd_writedisplay(unsigned char*, unsigned char) &rArr; EaEpaper::write_disp() &rArr; EPD_Class::end() &rArr; EPD_Class::frame_fixed(unsigned char, EPD_stage) &rArr; EPD_Class::line(unsigned short, const unsigned char*, unsigned char, bool, EPD_stage) &rArr; EPD_Class::SPI_put_wait(unsigned char, mbed::DigitalIn) &rArr; EPD_Class::SPI_put(unsigned char) &rArr; mbed::SPI::write(int) &rArr; spi_frequency &rArr; error &rArr; exit &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; serial_set_flow_control &rArr; gpio_init_out_ex &rArr; gpio_init &rArr; pin_function &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EaEpaper::write_disp()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.data)
</UL>
<P><STRONG><a name="[26]"></a>cmd_drawcircle(unsigned char*, unsigned char)</STRONG> (Thumb, 192 bytes, Stack size 40 bytes, command.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = cmd_drawcircle(unsigned char*, unsigned char) &rArr; mbed::Stream::printf(const char*, ...) &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; serial_set_flow_control &rArr; gpio_init_out_ex &rArr; gpio_init &rArr; pin_function &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EaEpaper::fillcircle(int, int, int, int)
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::printf(const char*, ...)
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.data)
</UL>
<P><STRONG><a name="[20]"></a>cmd_drawicon(unsigned char*, unsigned char)</STRONG> (Thumb, 292 bytes, Stack size 64 bytes, command.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = cmd_drawicon(unsigned char*, unsigned char) &rArr; mbed::Stream::printf(const char*, ...) &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; serial_set_flow_control &rArr; gpio_init_out_ex &rArr; gpio_init &rArr; pin_function &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EaEpaper::print_bm(Bitmap, int, int)
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::printf(const char*, ...)
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.data)
</UL>
<P><STRONG><a name="[21]"></a>cmd_drawmenu(unsigned char*, unsigned char)</STRONG> (Thumb, 184 bytes, Stack size 48 bytes, command.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = cmd_drawmenu(unsigned char*, unsigned char) &rArr; mbed::Stream::printf(const char*, ...) &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; serial_set_flow_control &rArr; gpio_init_out_ex &rArr; gpio_init &rArr; pin_function &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EaEpaper::print_string(char*, int, int)
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EaEpaper::print_bm(Bitmap, int, int)
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EaEpaper::line(int, int, int, int, int)
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::printf(const char*, ...)
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.data)
</UL>
<P><STRONG><a name="[22]"></a>cmd_getbuttonevent(unsigned char*, unsigned char)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, command.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> command.o(.data)
</UL>
<P><STRONG><a name="[23]"></a>cmd_display(unsigned char*, unsigned char)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, command.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> command.o(.data)
</UL>
<P><STRONG><a name="[1db]"></a>getUserInput(unsigned char*, unsigned char)</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, command.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::putc(int)
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::getc()
</UL>

<P><STRONG><a name="[33b]"></a>callbackRGB(int, int, unsigned char*)</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, command.o(.text), UNUSED)

<P><STRONG><a name="[1e1]"></a>adjust(int)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, simplejpegdecode.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convYUVtoRGB(unsigned char*, int, int, int)
</UL>

<P><STRONG><a name="[1e0]"></a>convYUVtoRGB(unsigned char*, int, int, int)</STRONG> (Thumb, 110 bytes, Stack size 20 bytes, simplejpegdecode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = convYUVtoRGB(unsigned char*, int, int, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleJpegDecode::format_RGB24(int, int, signed char*)
</UL>

<P><STRONG><a name="[1e3]"></a>SimpleJpegDecode::clearOnResult()</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, simplejpegdecode.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleJpegDecode::SimpleJpegDecode(unsigned char)
</UL>

<P><STRONG><a name="[1dc]"></a>SimpleJpegDecode::SimpleJpegDecode(unsigned char)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, simplejpegdecode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SimpleJpegDecode::SimpleJpegDecode(unsigned char) &rArr; BaseJpegDecode::BaseJpegDecode__sub_object() &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BaseJpegDecode::BaseJpegDecode__sub_object()
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleJpegDecode::clearOnResult()
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___11_command_cpp_369aa827
</UL>

<P><STRONG><a name="[33c]"></a>SimpleJpegDecode::SimpleJpegDecode__sub_object(unsigned char)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, simplejpegdecode.o(.text), UNUSED)

<P><STRONG><a name="[1e5]"></a>SimpleJpegDecode::onResult(int, int, unsigned char*)</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, simplejpegdecode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SimpleJpegDecode::onResult(int, int, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleJpegDecode::format_RGB24(int, int, signed char*)
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleJpegDecode::format_YUV(int, int, signed char*)
</UL>

<P><STRONG><a name="[1e4]"></a>SimpleJpegDecode::format_YUV(int, int, signed char*)</STRONG> (Thumb, 452 bytes, Stack size 64 bytes, simplejpegdecode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = SimpleJpegDecode::format_YUV(int, int, signed char*) &rArr; exit &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; serial_set_flow_control &rArr; gpio_init_out_ex &rArr; gpio_init &rArr; pin_function &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleJpegDecode::onResult(int, int, unsigned char*)
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleJpegDecode::outputBLOCK(int, int, signed char*)
</UL>

<P><STRONG><a name="[1e6]"></a>SimpleJpegDecode::format_RGB24(int, int, signed char*)</STRONG> (Thumb, 518 bytes, Stack size 72 bytes, simplejpegdecode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = SimpleJpegDecode::format_RGB24(int, int, signed char*) &rArr; exit &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; serial_set_flow_control &rArr; gpio_init_out_ex &rArr; gpio_init &rArr; pin_function &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleJpegDecode::onResult(int, int, unsigned char*)
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convYUVtoRGB(unsigned char*, int, int, int)
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleJpegDecode::outputBLOCK(int, int, signed char*)
</UL>

<P><STRONG><a name="[1e7]"></a>SimpleJpegDecode::output(int, int, int, int)</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, simplejpegdecode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = SimpleJpegDecode::output(int, int, int, int) &rArr; inverseDCT::inputBLOCK(int, int, int, int) &rArr; aanIDCT::conv(signed char*, short*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inverseDCT::inputBLOCK(int, int, int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleJpegDecode::outputAC(int, int, int, int)
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleJpegDecode::outputDC(int, int, int)
</UL>

<P><STRONG><a name="[a6]"></a>SimpleJpegDecode::outputDC(int, int, int)</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, simplejpegdecode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = SimpleJpegDecode::outputDC(int, int, int) &rArr; SimpleJpegDecode::output(int, int, int, int) &rArr; inverseDCT::inputBLOCK(int, int, int, int) &rArr; aanIDCT::conv(signed char*, short*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleJpegDecode::output(int, int, int, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> simplejpegdecode.o(.constdata__ZTV16SimpleJpegDecode)
</UL>
<P><STRONG><a name="[a7]"></a>SimpleJpegDecode::outputAC(int, int, int, int)</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, simplejpegdecode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = SimpleJpegDecode::outputAC(int, int, int, int) &rArr; SimpleJpegDecode::output(int, int, int, int) &rArr; inverseDCT::inputBLOCK(int, int, int, int) &rArr; aanIDCT::conv(signed char*, short*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleJpegDecode::output(int, int, int, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> simplejpegdecode.o(.constdata__ZTV16SimpleJpegDecode)
</UL>
<P><STRONG><a name="[a8]"></a>SimpleJpegDecode::outputMARK(unsigned char)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, simplejpegdecode.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> simplejpegdecode.o(.constdata__ZTV16SimpleJpegDecode)
</UL>
<P><STRONG><a name="[a9]"></a>SimpleJpegDecode::outputBLOCK(int, int, signed char*)</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, simplejpegdecode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = SimpleJpegDecode::outputBLOCK(int, int, signed char*) &rArr; SimpleJpegDecode::format_RGB24(int, int, signed char*) &rArr; exit &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; serial_set_flow_control &rArr; gpio_init_out_ex &rArr; gpio_init &rArr; pin_function &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleJpegDecode::format_RGB24(int, int, signed char*)
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleJpegDecode::format_YUV(int, int, signed char*)
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thunk{-96} to SimpleJpegDecode::outputBLOCK(int, int, signed char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> simplejpegdecode.o(.constdata__ZTV16SimpleJpegDecode)
</UL>
<P><STRONG><a name="[aa]"></a>thunk{-96} to SimpleJpegDecode::outputBLOCK(int, int, signed char*)</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, simplejpegdecode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = thunk{-96} to SimpleJpegDecode::outputBLOCK(int, int, signed char*) &rArr; SimpleJpegDecode::outputBLOCK(int, int, signed char*) &rArr; SimpleJpegDecode::format_RGB24(int, int, signed char*) &rArr; exit &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; serial_set_flow_control &rArr; gpio_init_out_ex &rArr; gpio_init &rArr; pin_function &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleJpegDecode::outputBLOCK(int, int, signed char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> simplejpegdecode.o(.constdata__ZTV16SimpleJpegDecode)
</UL>
<P><STRONG><a name="[1cd]"></a>SimpleJpegDecode::setOnResult(void(*)(int, int, unsigned char*))</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, simplejpegdecode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SimpleJpegDecode::setOnResult(void(*)(int, int, unsigned char*))
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_convertbimage(unsigned char*, unsigned char)
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_convert2bmp(unsigned char*, unsigned char)
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_convert1bpp(unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[1ea]"></a>DEQUANTIZE(int, int)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aanidct.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aanIDCT::conv(signed char*, short*)
</UL>

<P><STRONG><a name="[1eb]"></a>MULTIPLY(int, int)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aanidct.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aanIDCT::conv(signed char*, short*)
</UL>

<P><STRONG><a name="[1ec]"></a>IDESCALE(int)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, aanidct.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aanIDCT::conv(signed char*, short*)
</UL>

<P><STRONG><a name="[1ed]"></a>range_limit(int)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, aanidct.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aanIDCT::conv(signed char*, short*)
</UL>

<P><STRONG><a name="[1e9]"></a>aanIDCT::conv(signed char*, short*)</STRONG> (Thumb, 1114 bytes, Stack size 100 bytes, aanidct.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = aanIDCT::conv(signed char*, short*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;range_limit(int)
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDESCALE(int)
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPLY(int, int)
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEQUANTIZE(int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inverseDCT::inputBLOCK(int, int, int, int)
</UL>

<P><STRONG><a name="[1ce]"></a>BaseJpegDecode::clear()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, basejpegdecode.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_convertbimage(unsigned char*, unsigned char)
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BaseJpegDecode::BaseJpegDecode__sub_object()
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_convert2bmp(unsigned char*, unsigned char)
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_convert1bpp(unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[1e2]"></a>BaseJpegDecode::BaseJpegDecode__sub_object()</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, basejpegdecode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = BaseJpegDecode::BaseJpegDecode__sub_object() &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitPattern::BitPattern()
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BaseJpegDecode::clear()
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleJpegDecode::SimpleJpegDecode(unsigned char)
</UL>

<P><STRONG><a name="[1ef]"></a>BaseJpegDecode::restart()</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, basejpegdecode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BaseJpegDecode::restart()
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitPattern::clear()
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BaseJpegDecode::input(unsigned char)
</UL>

<P><STRONG><a name="[1f1]"></a>BaseJpegDecode::inputScan(unsigned char)</STRONG> (Thumb, 350 bytes, Stack size 32 bytes, basejpegdecode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = BaseJpegDecode::inputScan(unsigned char) &rArr; HuffmanDecode::getValue(sthuff*, BitPattern*) &rArr; BitPattern::get(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HuffmanDecode::getValue(sthuff*, BitPattern*)
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HuffmanDecode::Lookup(int, int, BitPattern*)
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitPattern::operator +=(unsigned char)
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitPattern::size()
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitPattern::get(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BaseJpegDecode::input(unsigned char)
</UL>

<P><STRONG><a name="[1f8]"></a>BaseJpegDecode::inputSOF(unsigned char, int, int)</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, basejpegdecode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BaseJpegDecode::inputSOF(unsigned char, int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BaseJpegDecode::input(unsigned char)
</UL>

<P><STRONG><a name="[1f7]"></a>BaseJpegDecode::inputDQT(unsigned char, int, int)</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, basejpegdecode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BaseJpegDecode::inputDQT(unsigned char, int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BaseJpegDecode::input(unsigned char)
</UL>

<P><STRONG><a name="[1d0]"></a>BaseJpegDecode::input(unsigned char)</STRONG> (Thumb, 356 bytes, Stack size 16 bytes, basejpegdecode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = BaseJpegDecode::input(unsigned char) &rArr; BaseJpegDecode::inputScan(unsigned char) &rArr; HuffmanDecode::getValue(sthuff*, BitPattern*) &rArr; BitPattern::get(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BaseJpegDecode::inputDQT(unsigned char, int, int)
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BaseJpegDecode::inputSOF(unsigned char, int, int)
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BaseJpegDecode::inputScan(unsigned char)
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BaseJpegDecode::restart()
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_convertbimage(unsigned char*, unsigned char)
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BaseJpegDecode::input(unsigned char*, int)
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_convert2bmp(unsigned char*, unsigned char)
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_convert1bpp(unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[1f9]"></a>BaseJpegDecode::input(unsigned char*, int)</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, basejpegdecode.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BaseJpegDecode::input(unsigned char)
</UL>

<P><STRONG><a name="[1f0]"></a>BitPattern::clear()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bitpattern.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitPattern::operator =(const char*)
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitPattern::BitPattern(const char*)
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitPattern::BitPattern(unsigned, int)
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitPattern::BitPattern()
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BaseJpegDecode::restart()
</UL>

<P><STRONG><a name="[1ee]"></a>BitPattern::BitPattern()</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, bitpattern.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = BitPattern::BitPattern()
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitPattern::clear()
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BaseJpegDecode::BaseJpegDecode__sub_object()
</UL>

<P><STRONG><a name="[33d]"></a>BitPattern::BitPattern__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, bitpattern.o(.text), UNUSED)

<P><STRONG><a name="[1fb]"></a>BitPattern::put(unsigned, int)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, bitpattern.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitPattern::operator +=(const char*)
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitPattern::BitPattern(unsigned, int)
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitPattern::operator +=(unsigned char)
</UL>

<P><STRONG><a name="[1fa]"></a>BitPattern::BitPattern(unsigned, int)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, bitpattern.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitPattern::put(unsigned, int)
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitPattern::clear()
</UL>

<P><STRONG><a name="[33e]"></a>BitPattern::BitPattern__sub_object(unsigned, int)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, bitpattern.o(.text), UNUSED)

<P><STRONG><a name="[1fc]"></a>BitPattern::operator +=(const char*)</STRONG> (Thumb, 38 bytes, Stack size 20 bytes, bitpattern.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitPattern::put(unsigned, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitPattern::operator =(const char*)
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitPattern::BitPattern(const char*)
</UL>

<P><STRONG><a name="[1fd]"></a>BitPattern::BitPattern(const char*)</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, bitpattern.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitPattern::operator +=(const char*)
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitPattern::clear()
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitPattern::match(const char*)
</UL>

<P><STRONG><a name="[33f]"></a>BitPattern::BitPattern__sub_object(const char*)</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, bitpattern.o(.text), UNUSED)

<P><STRONG><a name="[1f2]"></a>BitPattern::operator +=(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 12 bytes, bitpattern.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = BitPattern::operator +=(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitPattern::put(unsigned, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BaseJpegDecode::inputScan(unsigned char)
</UL>

<P><STRONG><a name="[340]"></a>BitPattern::operator [](int)</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, bitpattern.o(.text), UNUSED)

<P><STRONG><a name="[1fe]"></a>BitPattern::peek(int)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bitpattern.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitPattern::match(BitPattern&)
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HuffmanDecode::Lookup(int, int, BitPattern*)
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitPattern::get(int)
</UL>

<P><STRONG><a name="[1f4]"></a>BitPattern::get(int)</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, bitpattern.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BitPattern::get(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitPattern::peek(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HuffmanDecode::getValue(sthuff*, BitPattern*)
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BaseJpegDecode::inputScan(unsigned char)
</UL>

<P><STRONG><a name="[1f5]"></a>BitPattern::size()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bitpattern.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitPattern::match(BitPattern&)
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HuffmanDecode::Lookup(int, int, BitPattern*)
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BaseJpegDecode::inputScan(unsigned char)
</UL>

<P><STRONG><a name="[1ff]"></a>BitPattern::match(BitPattern&)</STRONG> (Thumb, 64 bytes, Stack size 20 bytes, bitpattern.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitPattern::peek(int)
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitPattern::size()
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitPattern::match(const char*)
</UL>

<P><STRONG><a name="[200]"></a>BitPattern::match(const char*)</STRONG> (Thumb, 24 bytes, Stack size 20 bytes, bitpattern.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitPattern::match(BitPattern&)
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitPattern::BitPattern(const char*)
</UL>

<P><STRONG><a name="[201]"></a>BitPattern::operator =(const char*)</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, bitpattern.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitPattern::operator +=(const char*)
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitPattern::clear()
</UL>

<P><STRONG><a name="[341]"></a>BitPattern::operator ==(BitPattern&)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, bitpattern.o(.text), UNUSED)

<P><STRONG><a name="[1f3]"></a>HuffmanDecode::Lookup(int, int, BitPattern*)</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, huffmandecode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HuffmanDecode::Lookup(int, int, BitPattern*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitPattern::peek(int)
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitPattern::size()
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BaseJpegDecode::inputScan(unsigned char)
</UL>

<P><STRONG><a name="[1f6]"></a>HuffmanDecode::getValue(sthuff*, BitPattern*)</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, huffmandecode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HuffmanDecode::getValue(sthuff*, BitPattern*) &rArr; BitPattern::get(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitPattern::get(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BaseJpegDecode::inputScan(unsigned char)
</UL>

<P><STRONG><a name="[1e8]"></a>inverseDCT::inputBLOCK(int, int, int, int)</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, inversedct.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = inverseDCT::inputBLOCK(int, int, int, int) &rArr; aanIDCT::conv(signed char*, short*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aanIDCT::conv(signed char*, short*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleJpegDecode::output(int, int, int, int)
</UL>

<P><STRONG><a name="[1dd]"></a>Adafruit_Thermal::Adafruit_Thermal(PinName, PinName, int, unsigned char)</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, adafruit_thermal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = Adafruit_Thermal::Adafruit_Thermal(PinName, PinName, int, unsigned char) &rArr; mbed::Serial::Serial(PinName, PinName, const char*) &rArr; mbed::Stream::Stream__sub_object(const char*) &rArr; fopen &rArr; freopen &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; serial_set_flow_control &rArr; gpio_init_out_ex &rArr; gpio_init &rArr; pin_function &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Serial::Serial(PinName, PinName, const char*)
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::baud(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___11_command_cpp_369aa827
</UL>

<P><STRONG><a name="[342]"></a>Adafruit_Thermal::Adafruit_Thermal__sub_object(PinName, PinName, int, unsigned char)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, adafruit_thermal.o(.text), UNUSED)

<P><STRONG><a name="[204]"></a>Adafruit_Thermal::timeoutSet(unsigned long)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, adafruit_thermal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::testPage()
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::feedRows(unsigned char)
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::wake()
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::writeBytes(unsigned char)
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::writeBytes(unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::writeBytes(unsigned char, unsigned char)
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::writeBytes(unsigned char, unsigned char, unsigned char)
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::write(unsigned char)
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::begin(unsigned char)
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::feed(unsigned char)
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::printBarcode(char*, unsigned char)
</UL>

<P><STRONG><a name="[202]"></a>Adafruit_Thermal::timeoutWait()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, adafruit_thermal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Adafruit_Thermal::timeoutWait() &rArr; wait_us &rArr; us_ticker_read &rArr; NVIC_SetVector &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_us
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::writeBytes(unsigned char)
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::writeBytes(unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::writeBytes(unsigned char, unsigned char)
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::writeBytes(unsigned char, unsigned char, unsigned char)
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::write(unsigned char)
</UL>

<P><STRONG><a name="[203]"></a>Adafruit_Thermal::write(unsigned char)</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, adafruit_thermal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = Adafruit_Thermal::write(unsigned char) &rArr; mbed::Stream::putc(int) &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; serial_set_flow_control &rArr; gpio_init_out_ex &rArr; gpio_init &rArr; pin_function &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::putc(int)
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::timeoutWait()
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::timeoutSet(unsigned long)
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::writeBytes(unsigned char)
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::writeBytes(unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::writeBytes(unsigned char, unsigned char)
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::writeBytes(unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[205]"></a>Adafruit_Thermal::writeBytes(unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, adafruit_thermal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = Adafruit_Thermal::writeBytes(unsigned char, unsigned char, unsigned char) &rArr; Adafruit_Thermal::write(unsigned char) &rArr; mbed::Stream::putc(int) &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; serial_set_flow_control &rArr; gpio_init_out_ex &rArr; gpio_init &rArr; pin_function &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::write(unsigned char)
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::timeoutWait()
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::timeoutSet(unsigned long)
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::hasPaper()
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::underlineOn(unsigned char)
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::setLineHeight(int)
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::underlineOff()
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::setSize(char)
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::setCodePage(unsigned char)
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::setCharset(unsigned char)
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::setCharSpacing(int)
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::online()
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::offline()
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::justify(char)
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::feedRows(unsigned char)
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::writePrintMode()
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::inverseOn()
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::begin(unsigned char)
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::feed(unsigned char)
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::setBarcodeHeight(unsigned char)
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::printBarcode(char*, unsigned char)
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::inverseOff()
</UL>

<P><STRONG><a name="[206]"></a>Adafruit_Thermal::writeBytes(unsigned char, unsigned char)</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, adafruit_thermal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = Adafruit_Thermal::writeBytes(unsigned char, unsigned char) &rArr; Adafruit_Thermal::write(unsigned char) &rArr; mbed::Stream::putc(int) &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; serial_set_flow_control &rArr; gpio_init_out_ex &rArr; gpio_init &rArr; pin_function &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::write(unsigned char)
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::timeoutWait()
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::timeoutSet(unsigned long)
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::testPage()
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::reset()
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::begin(unsigned char)
</UL>

<P><STRONG><a name="[207]"></a>Adafruit_Thermal::writeBytes(unsigned char, unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, adafruit_thermal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = Adafruit_Thermal::writeBytes(unsigned char, unsigned char, unsigned char, unsigned char) &rArr; Adafruit_Thermal::write(unsigned char) &rArr; mbed::Stream::putc(int) &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; serial_set_flow_control &rArr; gpio_init_out_ex &rArr; gpio_init &rArr; pin_function &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::write(unsigned char)
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::timeoutWait()
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::timeoutSet(unsigned long)
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::sleepAfter(unsigned short)
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::wake()
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::reset()
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::printBitmap(int, int, const unsigned char*, bool)
</UL>

<P><STRONG><a name="[208]"></a>Adafruit_Thermal::reset()</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, adafruit_thermal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = Adafruit_Thermal::reset() &rArr; Adafruit_Thermal::writeBytes(unsigned char, unsigned char, unsigned char, unsigned char) &rArr; Adafruit_Thermal::write(unsigned char) &rArr; mbed::Stream::putc(int) &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; serial_set_flow_control &rArr; gpio_init_out_ex &rArr; gpio_init &rArr; pin_function &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::writeBytes(unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::writeBytes(unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::begin(unsigned char)
</UL>

<P><STRONG><a name="[209]"></a>Adafruit_Thermal::writeBytes(unsigned char)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, adafruit_thermal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = Adafruit_Thermal::writeBytes(unsigned char) &rArr; Adafruit_Thermal::write(unsigned char) &rArr; mbed::Stream::putc(int) &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; serial_set_flow_control &rArr; gpio_init_out_ex &rArr; gpio_init &rArr; pin_function &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::write(unsigned char)
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::timeoutWait()
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::timeoutSet(unsigned long)
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::tab()
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::flush()
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::wake()
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::printBarcode(char*, unsigned char)
</UL>

<P><STRONG><a name="[20a]"></a>Adafruit_Thermal::wake()</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, adafruit_thermal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = Adafruit_Thermal::wake() &rArr; Adafruit_Thermal::writeBytes(unsigned char, unsigned char, unsigned char, unsigned char) &rArr; Adafruit_Thermal::write(unsigned char) &rArr; mbed::Stream::putc(int) &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; serial_set_flow_control &rArr; gpio_init_out_ex &rArr; gpio_init &rArr; pin_function &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ms
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::writeBytes(unsigned char)
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::writeBytes(unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::timeoutSet(unsigned long)
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::begin(unsigned char)
</UL>

<P><STRONG><a name="[1bf]"></a>Adafruit_Thermal::begin(unsigned char)</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, adafruit_thermal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = Adafruit_Thermal::begin(unsigned char) &rArr; Adafruit_Thermal::wake() &rArr; Adafruit_Thermal::writeBytes(unsigned char, unsigned char, unsigned char, unsigned char) &rArr; Adafruit_Thermal::write(unsigned char) &rArr; mbed::Stream::putc(int) &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; serial_set_flow_control &rArr; gpio_init_out_ex &rArr; gpio_init &rArr; pin_function &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::wake()
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::reset()
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::writeBytes(unsigned char, unsigned char)
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::writeBytes(unsigned char, unsigned char, unsigned char)
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::timeoutSet(unsigned long)
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_printer(unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[20b]"></a>Adafruit_Thermal::writePrintMode()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, adafruit_thermal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = Adafruit_Thermal::writePrintMode() &rArr; Adafruit_Thermal::writeBytes(unsigned char, unsigned char, unsigned char) &rArr; Adafruit_Thermal::write(unsigned char) &rArr; mbed::Stream::putc(int) &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; serial_set_flow_control &rArr; gpio_init_out_ex &rArr; gpio_init &rArr; pin_function &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::writeBytes(unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::normal()
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::setPrintMode(unsigned char)
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::unsetPrintMode(unsigned char)
</UL>

<P><STRONG><a name="[20c]"></a>Adafruit_Thermal::unsetPrintMode(unsigned char)</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, adafruit_thermal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = Adafruit_Thermal::unsetPrintMode(unsigned char) &rArr; Adafruit_Thermal::writePrintMode() &rArr; Adafruit_Thermal::writeBytes(unsigned char, unsigned char, unsigned char) &rArr; Adafruit_Thermal::write(unsigned char) &rArr; mbed::Stream::putc(int) &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; serial_set_flow_control &rArr; gpio_init_out_ex &rArr; gpio_init &rArr; pin_function &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::writePrintMode()
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::upsideDownOff()
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::strikeOff()
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::doubleWidthOff()
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::doubleHeightOff()
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::boldOff()
</UL>

<P><STRONG><a name="[1c5]"></a>Adafruit_Thermal::boldOff()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, adafruit_thermal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = Adafruit_Thermal::boldOff() &rArr; Adafruit_Thermal::unsetPrintMode(unsigned char) &rArr; Adafruit_Thermal::writePrintMode() &rArr; Adafruit_Thermal::writeBytes(unsigned char, unsigned char, unsigned char) &rArr; Adafruit_Thermal::write(unsigned char) &rArr; mbed::Stream::putc(int) &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; serial_set_flow_control &rArr; gpio_init_out_ex &rArr; gpio_init &rArr; pin_function &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::unsetPrintMode(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_printer(unsigned char*, unsigned char)
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::setDefault()
</UL>

<P><STRONG><a name="[20d]"></a>Adafruit_Thermal::setPrintMode(unsigned char)</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, adafruit_thermal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = Adafruit_Thermal::setPrintMode(unsigned char) &rArr; Adafruit_Thermal::writePrintMode() &rArr; Adafruit_Thermal::writeBytes(unsigned char, unsigned char, unsigned char) &rArr; Adafruit_Thermal::write(unsigned char) &rArr; mbed::Stream::putc(int) &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; serial_set_flow_control &rArr; gpio_init_out_ex &rArr; gpio_init &rArr; pin_function &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::writePrintMode()
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::upsideDownOn()
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::strikeOn()
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::doubleWidthOn()
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::doubleHeightOn()
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::boldOn()
</UL>

<P><STRONG><a name="[1c4]"></a>Adafruit_Thermal::boldOn()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, adafruit_thermal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = Adafruit_Thermal::boldOn() &rArr; Adafruit_Thermal::setPrintMode(unsigned char) &rArr; Adafruit_Thermal::writePrintMode() &rArr; Adafruit_Thermal::writeBytes(unsigned char, unsigned char, unsigned char) &rArr; Adafruit_Thermal::write(unsigned char) &rArr; mbed::Stream::putc(int) &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; serial_set_flow_control &rArr; gpio_init_out_ex &rArr; gpio_init &rArr; pin_function &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::setPrintMode(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_printer(unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[20e]"></a>Adafruit_Thermal::doubleHeightOff()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, adafruit_thermal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::unsetPrintMode(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::setDefault()
</UL>

<P><STRONG><a name="[20f]"></a>Adafruit_Thermal::doubleHeightOn()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, adafruit_thermal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::setPrintMode(unsigned char)
</UL>

<P><STRONG><a name="[210]"></a>Adafruit_Thermal::doubleWidthOff()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, adafruit_thermal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::unsetPrintMode(unsigned char)
</UL>

<P><STRONG><a name="[211]"></a>Adafruit_Thermal::doubleWidthOn()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, adafruit_thermal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::setPrintMode(unsigned char)
</UL>

<P><STRONG><a name="[1c2]"></a>Adafruit_Thermal::feed(unsigned char)</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, adafruit_thermal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = Adafruit_Thermal::feed(unsigned char) &rArr; Adafruit_Thermal::writeBytes(unsigned char, unsigned char, unsigned char) &rArr; Adafruit_Thermal::write(unsigned char) &rArr; mbed::Stream::putc(int) &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; serial_set_flow_control &rArr; gpio_init_out_ex &rArr; gpio_init &rArr; pin_function &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::writeBytes(unsigned char, unsigned char, unsigned char)
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::timeoutSet(unsigned long)
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_printer(unsigned char*, unsigned char)
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::test()
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::printBarcode(char*, unsigned char)
</UL>

<P><STRONG><a name="[212]"></a>Adafruit_Thermal::feedRows(unsigned char)</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, adafruit_thermal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::writeBytes(unsigned char, unsigned char, unsigned char)
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::timeoutSet(unsigned long)
</UL>

<P><STRONG><a name="[213]"></a>Adafruit_Thermal::flush()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, adafruit_thermal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::writeBytes(unsigned char)
</UL>

<P><STRONG><a name="[1c3]"></a>Adafruit_Thermal::inverseOff()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, adafruit_thermal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = Adafruit_Thermal::inverseOff() &rArr; Adafruit_Thermal::writeBytes(unsigned char, unsigned char, unsigned char) &rArr; Adafruit_Thermal::write(unsigned char) &rArr; mbed::Stream::putc(int) &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; serial_set_flow_control &rArr; gpio_init_out_ex &rArr; gpio_init &rArr; pin_function &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::writeBytes(unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_printer(unsigned char*, unsigned char)
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::setDefault()
</UL>

<P><STRONG><a name="[1c1]"></a>Adafruit_Thermal::inverseOn()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, adafruit_thermal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = Adafruit_Thermal::inverseOn() &rArr; Adafruit_Thermal::writeBytes(unsigned char, unsigned char, unsigned char) &rArr; Adafruit_Thermal::write(unsigned char) &rArr; mbed::Stream::putc(int) &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; serial_set_flow_control &rArr; gpio_init_out_ex &rArr; gpio_init &rArr; pin_function &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::writeBytes(unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_printer(unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[215]"></a>Adafruit_Thermal::toupper(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, adafruit_thermal.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::setSize(char)
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::justify(char)
</UL>

<P><STRONG><a name="[214]"></a>Adafruit_Thermal::justify(char)</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, adafruit_thermal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::toupper(unsigned char)
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::writeBytes(unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::setDefault()
</UL>

<P><STRONG><a name="[216]"></a>Adafruit_Thermal::offline()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, adafruit_thermal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::writeBytes(unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[217]"></a>Adafruit_Thermal::online()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, adafruit_thermal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::writeBytes(unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::setDefault()
</UL>

<P><STRONG><a name="[1c7]"></a>Adafruit_Thermal::printBarcode(char*, unsigned char)</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, adafruit_thermal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = Adafruit_Thermal::printBarcode(char*, unsigned char) &rArr; Adafruit_Thermal::feed(unsigned char) &rArr; Adafruit_Thermal::writeBytes(unsigned char, unsigned char, unsigned char) &rArr; Adafruit_Thermal::write(unsigned char) &rArr; mbed::Stream::putc(int) &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; serial_set_flow_control &rArr; gpio_init_out_ex &rArr; gpio_init &rArr; pin_function &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::writeBytes(unsigned char)
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::writeBytes(unsigned char, unsigned char, unsigned char)
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::timeoutSet(unsigned long)
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::feed(unsigned char)
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_printer(unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[1c6]"></a>Adafruit_Thermal::printBitmap(int, int, const unsigned char*, bool)</STRONG> (Thumb, 128 bytes, Stack size 48 bytes, adafruit_thermal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = Adafruit_Thermal::printBitmap(int, int, const unsigned char*, bool) &rArr; Adafruit_Thermal::writeBytes(unsigned char, unsigned char, unsigned char, unsigned char) &rArr; Adafruit_Thermal::write(unsigned char) &rArr; mbed::Stream::putc(int) &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; serial_set_flow_control &rArr; gpio_init_out_ex &rArr; gpio_init &rArr; pin_function &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::putc(int)
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::writeBytes(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_printer(unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[343]"></a>Adafruit_Thermal::printBitmap(int, int, unsigned char*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, adafruit_thermal.o(.text), UNUSED)

<P><STRONG><a name="[344]"></a>Adafruit_Thermal::printBitmap(const char*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, adafruit_thermal.o(.text), UNUSED)

<P><STRONG><a name="[218]"></a>Adafruit_Thermal::normal()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, adafruit_thermal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::writePrintMode()
</UL>

<P><STRONG><a name="[1c8]"></a>Adafruit_Thermal::setBarcodeHeight(unsigned char)</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, adafruit_thermal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = Adafruit_Thermal::setBarcodeHeight(unsigned char) &rArr; Adafruit_Thermal::writeBytes(unsigned char, unsigned char, unsigned char) &rArr; Adafruit_Thermal::write(unsigned char) &rArr; mbed::Stream::putc(int) &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; serial_set_flow_control &rArr; gpio_init_out_ex &rArr; gpio_init &rArr; pin_function &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::writeBytes(unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_printer(unsigned char*, unsigned char)
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::setDefault()
</UL>

<P><STRONG><a name="[219]"></a>Adafruit_Thermal::setCharSpacing(int)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, adafruit_thermal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::writeBytes(unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[21a]"></a>Adafruit_Thermal::setCharset(unsigned char)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, adafruit_thermal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::writeBytes(unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::setDefault()
</UL>

<P><STRONG><a name="[21b]"></a>Adafruit_Thermal::setCodePage(unsigned char)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, adafruit_thermal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::writeBytes(unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::setDefault()
</UL>

<P><STRONG><a name="[21c]"></a>Adafruit_Thermal::setSize(char)</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, adafruit_thermal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::toupper(unsigned char)
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::writeBytes(unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::setDefault()
</UL>

<P><STRONG><a name="[21d]"></a>Adafruit_Thermal::underlineOff()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, adafruit_thermal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::writeBytes(unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::setDefault()
</UL>

<P><STRONG><a name="[21e]"></a>Adafruit_Thermal::setLineHeight(int)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, adafruit_thermal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::writeBytes(unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::setDefault()
</UL>

<P><STRONG><a name="[21f]"></a>Adafruit_Thermal::setDefault()</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, adafruit_thermal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::setLineHeight(int)
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::underlineOff()
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::setSize(char)
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::setCodePage(unsigned char)
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::setCharset(unsigned char)
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::online()
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::justify(char)
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::doubleHeightOff()
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::boldOff()
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::setBarcodeHeight(unsigned char)
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::inverseOff()
</UL>

<P><STRONG><a name="[345]"></a>Adafruit_Thermal::setMaxChunkHeight(int)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, adafruit_thermal.o(.text), UNUSED)

<P><STRONG><a name="[346]"></a>Adafruit_Thermal::setTimes(unsigned long, unsigned long)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, adafruit_thermal.o(.text), UNUSED)

<P><STRONG><a name="[220]"></a>Adafruit_Thermal::sleepAfter(unsigned short)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, adafruit_thermal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::writeBytes(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::sleep()
</UL>

<P><STRONG><a name="[221]"></a>Adafruit_Thermal::sleep()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, adafruit_thermal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::sleepAfter(unsigned short)
</UL>

<P><STRONG><a name="[222]"></a>Adafruit_Thermal::strikeOff()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, adafruit_thermal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::unsetPrintMode(unsigned char)
</UL>

<P><STRONG><a name="[223]"></a>Adafruit_Thermal::strikeOn()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, adafruit_thermal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::setPrintMode(unsigned char)
</UL>

<P><STRONG><a name="[224]"></a>Adafruit_Thermal::tab()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, adafruit_thermal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::writeBytes(unsigned char)
</UL>

<P><STRONG><a name="[1c0]"></a>Adafruit_Thermal::test()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, adafruit_thermal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = Adafruit_Thermal::test() &rArr; Adafruit_Thermal::feed(unsigned char) &rArr; Adafruit_Thermal::writeBytes(unsigned char, unsigned char, unsigned char) &rArr; Adafruit_Thermal::write(unsigned char) &rArr; mbed::Stream::putc(int) &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; serial_set_flow_control &rArr; gpio_init_out_ex &rArr; gpio_init &rArr; pin_function &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::printf(const char*, ...)
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::feed(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_printer(unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[225]"></a>Adafruit_Thermal::testPage()</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, adafruit_thermal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::writeBytes(unsigned char, unsigned char)
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::timeoutSet(unsigned long)
</UL>

<P><STRONG><a name="[226]"></a>Adafruit_Thermal::underlineOn(unsigned char)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, adafruit_thermal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::writeBytes(unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[227]"></a>Adafruit_Thermal::upsideDownOff()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, adafruit_thermal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::unsetPrintMode(unsigned char)
</UL>

<P><STRONG><a name="[228]"></a>Adafruit_Thermal::upsideDownOn()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, adafruit_thermal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::setPrintMode(unsigned char)
</UL>

<P><STRONG><a name="[229]"></a>Adafruit_Thermal::hasPaper()</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, adafruit_thermal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::getc()
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::readable()
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ms
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::writeBytes(unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[28]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_LPC17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC17xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_LPC17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC17xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_LPC17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC17xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_LPC17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC17xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_LPC17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC17xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_LPC17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC17xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_LPC17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC17xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_LPC17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC17xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_LPC17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC17xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_LPC17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC17xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_LPC17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC17xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>BOD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_LPC17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC17xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>CAN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_LPC17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC17xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>DMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_LPC17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC17xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>EINT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_LPC17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC17xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>EINT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_LPC17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC17xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>EINT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_LPC17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC17xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>EINT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_LPC17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC17xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>ENET_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_LPC17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC17xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_LPC17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC17xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_LPC17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC17xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_LPC17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC17xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>I2S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_LPC17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC17xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>MCPWM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_LPC17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC17xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>PLL0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_LPC17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC17xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>PLL1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_LPC17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC17xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>PWM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_LPC17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC17xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>QEI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_LPC17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC17xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>RIT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_LPC17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC17xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_LPC17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC17xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>SPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_LPC17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC17xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>SSP0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_LPC17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC17xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>SSP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_LPC17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC17xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_LPC17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC17xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_LPC17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC17xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_LPC17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC17xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_LPC17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC17xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>UART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_LPC17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC17xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_LPC17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC17xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>UART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_LPC17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC17xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>UART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_LPC17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC17xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>USB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_LPC17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC17xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_LPC17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC17xx.o(RESET)
</UL>
<P><STRONG><a name="[22a]"></a>vfprintf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, vfprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = vfprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
</UL>

<P><STRONG><a name="[116]"></a>__c89vfprintf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, c89vfprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = __c89vfprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_if(int, const char*, ...)
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_if(int, const char*, ...)
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_if(int, const char*, ...)
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug(const char*, ...)
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_if(int, const char*, ...)
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::printf(const char*, ...)
</UL>

<P><STRONG><a name="[19a]"></a>__2fprintf</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, __2fprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TextDisplay::claim(std::__FILE*)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleJpegDecode::outputBLOCK(int, int, signed char*)
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleJpegDecode::format_RGB24(int, int, signed char*)
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleJpegDecode::format_YUV(int, int, signed char*)
</UL>

<P><STRONG><a name="[10d]"></a>__2sprintf</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, __2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::Stream__sub_object(const char*)
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TextDisplay::TextDisplay__sub_object(const char*)
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFileSystem::open(const char*, int)
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_removeall(unsigned char*, unsigned char)
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[22e]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[22f]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[22d]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[d8]"></a>_printf_int_dec</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
</UL>

<P><STRONG><a name="[233]"></a>_printf_longlong_hex</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[de]"></a>_printf_int_hex</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[e6]"></a>_printf_ll_hex</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx
</UL>

<P><STRONG><a name="[d0]"></a>_printf_hex_ptr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
</UL>

<P><STRONG><a name="[234]"></a>__printf</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[237]"></a>__0sscanf</STRONG> (Thumb, 52 bytes, Stack size 72 bytes, __0sscanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[239]"></a>_scanf_int</STRONG> (Thumb, 332 bytes, Stack size 56 bytes, _scanf_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[1bb]"></a>strtoul</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = strtoul &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_findvalidfilename(unsigned char*, unsigned char)
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_convertbimage(unsigned char*, unsigned char)
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_drawmenu(unsigned char*, unsigned char)
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_drawicon(unsigned char*, unsigned char)
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_drawcircle(unsigned char*, unsigned char)
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_setdismode(unsigned char*, unsigned char)
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_drawdot(unsigned char*, unsigned char)
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_drawchar(unsigned char*, unsigned char)
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_drawstring(unsigned char*, unsigned char)
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_convert2bmp(unsigned char*, unsigned char)
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_convert1bpp(unsigned char*, unsigned char)
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_takephoto(unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[23e]"></a>_do_fflush</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, fflush.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; serial_set_flow_control &rArr; gpio_init_out_ex &rArr; gpio_init &rArr; pin_function &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_flushlinebuffered
</UL>

<P><STRONG><a name="[241]"></a>fflush</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, fflush.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; serial_set_flow_control &rArr; gpio_init_out_ex &rArr; gpio_init &rArr; pin_function &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::putc(int)
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::getc()
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::printf(const char*, ...)
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[240]"></a>_fseek</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, fseek.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _fseek &rArr; _ftell_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_istty
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
</UL>

<P><STRONG><a name="[2cb]"></a>fseek</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, fseek.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fseek
</UL>
<BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp24::writeblock(int, int)
</UL>

<P><STRONG><a name="[19c]"></a>setvbuf</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, setvbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = setvbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TextDisplay::claim(std::__FILE*)
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setbuf
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[19b]"></a>freopen</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, fopen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = freopen &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; serial_set_flow_control &rArr; gpio_init_out_ex &rArr; gpio_init &rArr; pin_function &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TextDisplay::claim(std::__FILE*)
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[17c]"></a>fopen</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, fopen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = fopen &rArr; freopen &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; serial_set_flow_control &rArr; gpio_init_out_ex &rArr; gpio_init &rArr; pin_function &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::Stream__sub_object(const char*)
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cameraGo(__picture_info*)
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cameraSnapshot(__picture_info*)
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_convertbimage(unsigned char*, unsigned char)
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp1::writeFile(const char*)
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_convert2bmp(unsigned char*, unsigned char)
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_convert1bpp(unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[249]"></a>setbuf</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, setbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = setbuf &rArr; setvbuf
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::mbed_set_unbuffered_stream(std::__FILE*)
</UL>

<P><STRONG><a name="[246]"></a>_fclose_internal</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, fclose.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; serial_set_flow_control &rArr; gpio_init_out_ex &rArr; gpio_init &rArr; pin_function &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_close
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[17d]"></a>fclose</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, fclose.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fclose
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cameraGo(__picture_info*)
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cameraSnapshot(__picture_info*)
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::~Stream__sub_object()
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_convertbimage(unsigned char*, unsigned char)
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp1::writeFile(const char*)
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_convert2bmp(unsigned char*, unsigned char)
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_convert1bpp(unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[1b7]"></a>strtok</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, strtok.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = strtok &rArr; __strtok_internal &rArr; strspn
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtok_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_findvalidfilename(unsigned char*, unsigned char)
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_convertbimage(unsigned char*, unsigned char)
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_takepicture(unsigned char*, unsigned char)
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_printer(unsigned char*, unsigned char)
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_drawmenu(unsigned char*, unsigned char)
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_drawicon(unsigned char*, unsigned char)
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_drawcircle(unsigned char*, unsigned char)
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_setdismode(unsigned char*, unsigned char)
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_drawdot(unsigned char*, unsigned char)
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_drawchar(unsigned char*, unsigned char)
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_drawstring(unsigned char*, unsigned char)
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_convert2bmp(unsigned char*, unsigned char)
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_convert1bpp(unsigned char*, unsigned char)
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_takephoto(unsigned char*, unsigned char)
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_remove(unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[1be]"></a>strcpy</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, strcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_takepicture(unsigned char*, unsigned char)
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_drawstring(unsigned char*, unsigned char)
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_takephoto(unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[171]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TextDisplay::TextDisplay__sub_object(const char*)
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;preCapture()
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::lookup(const char*, unsigned)
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::printBarcode(char*, unsigned char)
</UL>

<P><STRONG><a name="[1ad]"></a>strncmp</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isDirectionValid(const char*)
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::lookup(const char*, unsigned)
</UL>

<P><STRONG><a name="[105]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EaEpaper::write_disp()
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATDirHandle::readdir()
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleJpegDecode::format_RGB24(int, int, signed char*)
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleJpegDecode::format_YUV(int, int, signed char*)
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite
</UL>

<P><STRONG><a name="[24d]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[347]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[103]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cameraGo(__picture_info*)
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cameraSnapshot(__picture_info*)
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetCamera()
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFileHandle::FATFileHandle(FIL)
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATDirHandle::FATDirHandle(const FATFS_DIR&)
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFileSystem::open(const char*, int)
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp1::flushpoint(int, int, unsigned char*)
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove_w
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[348]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[349]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[34a]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[294]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove4
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetVector
</UL>

<P><STRONG><a name="[34b]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[24e]"></a>__rt_memmove_w</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[34c]"></a>__memmove_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[34d]"></a>__memmove_lastfew_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[178]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EaEpaper::cls()
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EaEpaper::clear()
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize()
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EaEpaper::EaEpaper(PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, const char*)
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp1::bmp1()
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp1::clear()
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>

<P><STRONG><a name="[24f]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[34e]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[113]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_Class::EPD_Class(EPD_size, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName)
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___17_serial_camera_cpp_OE
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::DigitalOut(PinName)
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDFileSystem::SDFileSystem(PinName, PinName, PinName, PinName, const char*)
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_findvalidfilename(unsigned char*, unsigned char)
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_removeall(unsigned char*, unsigned char)
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_sd
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileSystemLike::opendir()
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp24::bmp24()
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp1::bmp1()
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp1::clear()
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_drawstring(unsigned char*, unsigned char)
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_localtime_r
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[34f]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[350]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[250]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[251]"></a>strncpy</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::BaseDirHandle::readdir()
</UL>

<P><STRONG><a name="[1b9]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_printer(unsigned char*, unsigned char)
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_drawicon(unsigned char*, unsigned char)
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isJPGfile(unsigned char*)
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[131]"></a>localtime</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, localtime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = localtime &rArr; _localtime_r &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_localtime_r
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_write
</UL>

<P><STRONG><a name="[253]"></a>mktime</STRONG> (Thumb, 356 bytes, Stack size 56 bytes, mktime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = mktime &rArr; _tm_carry
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tm_carry
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_read
</UL>

<P><STRONG><a name="[c8]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, init_aeabi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_cpp_2
</UL>

<P><STRONG><a name="[23c]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
</UL>

<P><STRONG><a name="[2ce]"></a>__rt_new_handler_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_new_handler_addr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>

<P><STRONG><a name="[2cf]"></a>__rt_ddtor_pointer_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_ddtor_pointer_addr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[23b]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[351]"></a>__errno</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr.o(.text), UNUSED)

<P><STRONG><a name="[352]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr.o(.text), UNUSED)

<P><STRONG><a name="[248]"></a>malloc</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, h1_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_exceptions_buffer_init
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>

<P><STRONG><a name="[24b]"></a>free</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[230]"></a>_printf_truncate_signed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[231]"></a>_printf_truncate_unsigned</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[232]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[ce]"></a>_printf_charcount</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, _printf_charcount.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n
</UL>

<P><STRONG><a name="[22c]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[5b]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> __2sprintf.o(.text)
</UL>
<P><STRONG><a name="[257]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[e8]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[ea]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[22b]"></a>_printf_char_file</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vfprintf
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfprintf
</UL>

<P><STRONG><a name="[259]"></a>_printf_wctomb</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, _printf_wctomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>

<P><STRONG><a name="[e0]"></a>_printf_longlong_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_longlong_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli
</UL>

<P><STRONG><a name="[25c]"></a>_printf_longlong_oct</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[dc]"></a>_printf_int_oct</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
</UL>

<P><STRONG><a name="[e4]"></a>_printf_ll_oct</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo
</UL>

<P><STRONG><a name="[23a]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[238]"></a>__vfscanf_char</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>

<P><STRONG><a name="[5c]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[5d]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[23d]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
</UL>

<P><STRONG><a name="[258]"></a>ferror</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ferror.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[25e]"></a>_readbuf</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, filbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_read
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
</UL>

<P><STRONG><a name="[264]"></a>_seteof</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, filbuf.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
</UL>

<P><STRONG><a name="[260]"></a>__filbuf</STRONG> (Thumb, 476 bytes, Stack size 32 bytes, filbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_seek
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_flushlinebuffered
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seteof
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_readbuf
</UL>

<P><STRONG><a name="[2d8]"></a>__filbuf_byte</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, filbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __filbuf_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
</UL>

<P><STRONG><a name="[353]"></a>__filbuf_wide</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, filbuf.o(.text), UNUSED)

<P><STRONG><a name="[265]"></a>__flsbuf</STRONG> (Thumb, 470 bytes, Stack size 32 bytes, flsbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_istty
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>

<P><STRONG><a name="[280]"></a>__flsbuf_byte</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, flsbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __flsbuf_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite
</UL>

<P><STRONG><a name="[354]"></a>__flsbuf_wide</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, flsbuf.o(.text), UNUSED)

<P><STRONG><a name="[243]"></a>_ftell_internal</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, ftell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ftell_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[355]"></a>ftell</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, ftell.o(.text), UNUSED)

<P><STRONG><a name="[245]"></a>_seterr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_readbuf
</UL>

<P><STRONG><a name="[266]"></a>_writebuf</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, stdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = _writebuf &rArr; _sys_write &rArr; serial_init &rArr; serial_set_flow_control &rArr; gpio_init_out_ex &rArr; gpio_init &rArr; pin_function &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_seek
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[23f]"></a>_fflush</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; serial_set_flow_control &rArr; gpio_init_out_ex &rArr; gpio_init &rArr; pin_function &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
</UL>

<P><STRONG><a name="[261]"></a>_deferredlazyseek</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
</UL>

<P><STRONG><a name="[f7]"></a>_initio</STRONG> (Thumb, 210 bytes, Stack size 8 bytes, initio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = _initio &rArr; freopen &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; serial_set_flow_control &rArr; gpio_init_out_ex &rArr; gpio_init &rArr; pin_function &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_stdio_2
</UL>

<P><STRONG><a name="[269]"></a>_terminateio</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, initio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[26a]"></a>__rt_SIGPVFN</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_pvfn_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGPVFN &rArr; __rt_SIGPVFN_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN_inner
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_pure_virtual
</UL>

<P><STRONG><a name="[24c]"></a>__strtok_internal</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, strtok_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __strtok_internal &rArr; strspn
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strspn
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcspn
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
</UL>

<P><STRONG><a name="[252]"></a>_localtime_r</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, localtime_internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _localtime_r &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
</UL>

<P><STRONG><a name="[356]"></a>_n$localtime_r</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, localtime_internal.o(.text), UNUSED)

<P><STRONG><a name="[67]"></a>__default_new_handler()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, arm_newhandler_noexceptions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = __default_new_handler() &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> new.o(i._Znwj)
</UL>
<P><STRONG><a name="[255]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_heap_descriptor.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[f2]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
</UL>

<P><STRONG><a name="[357]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[358]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[6]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[5]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[256]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_expand
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[272]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[f0]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_expand
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_escrow
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[275]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[9]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[25b]"></a>_ll_udiv10</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[62]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = isspace &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[359]"></a>__lib_sel_fp_printf</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, _printf_fp_dec.o(.text), UNUSED)

<P><STRONG><a name="[27b]"></a>_printf_fp_dec_real</STRONG> (Thumb, 616 bytes, Stack size 104 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[27e]"></a>_printf_fp_hex_real</STRONG> (Thumb, 750 bytes, Stack size 72 bytes, _printf_fp_hex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[27f]"></a>_printf_lcs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[ec]"></a>_printf_wchar</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
</UL>

<P><STRONG><a name="[ee]"></a>_printf_wstring</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls
</UL>

<P><STRONG><a name="[25d]"></a>__vfscanf</STRONG> (Thumb, 872 bytes, Stack size 96 bytes, _scanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>

<P><STRONG><a name="[17f]"></a>fwrite</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, fwritefast.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = fwrite &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; serial_set_flow_control &rArr; gpio_init_out_ex &rArr; gpio_init &rArr; pin_function &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cameraGo(__picture_info*)
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cameraSnapshot(__picture_info*)
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp24::initFile(int, int)
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp24::writeblock(int, int)
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp1::writeFile(const char*)
</UL>

<P><STRONG><a name="[263]"></a>_flushlinebuffered</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, flushlinebuffered.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
</UL>

<P><STRONG><a name="[25a]"></a>_wcrtomb</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, _wcrtomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>

<P><STRONG><a name="[26c]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[268]"></a>__rt_SIGRTRED</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtred_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTRED &rArr; __rt_SIGRTRED_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[26b]"></a>__rt_SIGPVFN_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_pvfn_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGPVFN_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN
</UL>

<P><STRONG><a name="[26e]"></a>strcspn</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, strcspn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strcspn
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtok_internal
</UL>

<P><STRONG><a name="[26d]"></a>strspn</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, strspn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strspn
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtok_internal
</UL>

<P><STRONG><a name="[26f]"></a>std::terminate()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, arm_exceptions_terminate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_new_handler()
</UL>

<P><STRONG><a name="[281]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[271]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[27d]"></a>_printf_fp_infnan</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[277]"></a>_btod_etento</STRONG> (Thumb, 212 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[285]"></a>abort</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, abort.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_terminate_handler()
</UL>

<P><STRONG><a name="[283]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN_inner
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
</UL>

<P><STRONG><a name="[282]"></a>__rt_SIGRTRED_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtred_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTRED_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
</UL>

<P><STRONG><a name="[273]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[274]"></a>__rt_heap_escrow</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, heapauxa.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[270]"></a>__rt_heap_expand</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, heapauxa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __rt_heap_expand
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[284]"></a>__cxa_get_globals</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, arm_exceptions_globs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_exceptions_buffer_init
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_eh_globals_addr
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>

<P><STRONG><a name="[287]"></a>_ttywrch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[35a]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[35b]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[289]"></a>__rt_eh_globals_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_eh_globals_addr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>

<P><STRONG><a name="[35c]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[286]"></a>__rt_SIGABRT</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[288]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[28a]"></a>__ARM_exceptions_buffer_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, arm_exceptions_mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>

<P><STRONG><a name="[35d]"></a>__ARM_exceptions_buffer_allocate</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, arm_exceptions_mem.o(.text), UNUSED)

<P><STRONG><a name="[35e]"></a>__ARM_exceptions_buffer_free</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, arm_exceptions_mem.o(.text), UNUSED)

<P><STRONG><a name="[28b]"></a>__rt_SIGABRT_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[278]"></a>_btod_d2e</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[28d]"></a>_d2e_denorm_low</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[28c]"></a>_d2e_norm_op1</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[28e]"></a>__btod_div_common</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[28f]"></a>_e2e</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[279]"></a>_btod_ediv</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _btod_ediv &rArr; __btod_div_common
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[27a]"></a>_btod_emul</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[290]"></a>__btod_mult_common</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[100]"></a>main</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, retarget.o(i.$Sub$$main))
<BR><BR>[Stack]<UL><LI>Max Depth = 1792 + Unknown Stack Size
<LI>Call Chain = main &rArr; $Super$$main &rArr; cmd_findvalidfilename(unsigned char*, unsigned char) &rArr; mbed::Stream::printf(const char*, ...) &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; serial_set_flow_control &rArr; gpio_init_out_ex &rArr; gpio_init &rArr; pin_function &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_sdk_init
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_main
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[293]"></a>NVIC_SetVector</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, cmsis_nvic.o(i.NVIC_SetVector))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = NVIC_SetVector &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove4
</UL>
<BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_init
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_read
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_irq_set_internal
</UL>

<P><STRONG><a name="[59]"></a>SystemInit</STRONG> (Thumb, 150 bytes, Stack size 0 bytes, system_LPC17xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC17xx.o(.text)
</UL>
<P><STRONG><a name="[81]"></a>FATDirHandle::~FATDirHandle__deallocating()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, fatdirhandle.o(i._ZN12FATDirHandleD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FATDirHandle::~FATDirHandle__deallocating() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATDirHandle::~FATDirHandle()
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fatdirhandle.o(.constdata__ZTV12FATDirHandle)
</UL>
<P><STRONG><a name="[80]"></a>FATDirHandle::~FATDirHandle()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fatdirhandle.o(i._ZN12FATDirHandleD1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATDirHandle::~FATDirHandle__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fatdirhandle.o(.constdata__ZTV12FATDirHandle)
</UL>
<P><STRONG><a name="[35f]"></a>FATDirHandle::~FATDirHandle__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fatdirhandle.o(i._ZN12FATDirHandleD1Ev), UNUSED)

<P><STRONG><a name="[53]"></a>SDFileSystem::~SDFileSystem()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, main.o(i._ZN12SDFileSystemD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SDFileSystem::~SDFileSystem() &rArr; FATFileSystem::~FATFileSystem__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFileSystem::~FATFileSystem__sub_object()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> main.o(.text)
<LI> sdfilesystem.o(.constdata__ZTV12SDFileSystem)
</UL>
<P><STRONG><a name="[360]"></a>SDFileSystem::~SDFileSystem__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, main.o(i._ZN12SDFileSystemD1Ev), UNUSED)

<P><STRONG><a name="[95]"></a>FATFileHandle::~FATFileHandle__deallocating()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, fatfilehandle.o(i._ZN13FATFileHandleD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FATFileHandle::~FATFileHandle__deallocating() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFileHandle::~FATFileHandle()
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fatfilehandle.o(.constdata__ZTV13FATFileHandle)
</UL>
<P><STRONG><a name="[94]"></a>FATFileHandle::~FATFileHandle()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, fatfilehandle.o(i._ZN13FATFileHandleD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FATFileHandle::~FATFileHandle() &rArr; mbed::FileHandle::~FileHandle__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileHandle::~FileHandle__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFileHandle::~FATFileHandle__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fatfilehandle.o(.constdata__ZTV13FATFileHandle)
</UL>
<P><STRONG><a name="[361]"></a>FATFileHandle::~FATFileHandle__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, fatfilehandle.o(i._ZN13FATFileHandleD1Ev), UNUSED)

<P><STRONG><a name="[99]"></a>FATFileSystem::disk_status()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fatfilesystem.o(i._ZN13FATFileSystem11disk_statusEv))
<BR>[Address Reference Count : 1]<UL><LI> fatfilesystem.o(.constdata__ZTV13FATFileSystem)
</UL>
<P><STRONG><a name="[98]"></a>FATFileSystem::disk_initialize()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fatfilesystem.o(i._ZN13FATFileSystem15disk_initializeEv))
<BR>[Address Reference Count : 1]<UL><LI> fatfilesystem.o(.constdata__ZTV13FATFileSystem)
</UL>
<P><STRONG><a name="[9a]"></a>FATFileSystem::disk_sync()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fatfilesystem.o(i._ZN13FATFileSystem9disk_syncEv))
<BR>[Address Reference Count : 1]<UL><LI> fatfilesystem.o(.constdata__ZTV13FATFileSystem)
</UL>
<P><STRONG><a name="[58]"></a>Adafruit_Thermal::~Adafruit_Thermal()</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, command.o(i._ZN16Adafruit_ThermalD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Adafruit_Thermal::~Adafruit_Thermal() &rArr; mbed::Stream::~Stream__sub_object() &rArr; fclose
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::~Stream__sub_object()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> command.o(.text)
<LI> adafruit_thermal.o(.constdata__ZTV16Adafruit_Thermal)
</UL>
<P><STRONG><a name="[362]"></a>Adafruit_Thermal::~Adafruit_Thermal__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, command.o(i._ZN16Adafruit_ThermalD1Ev), UNUSED)

<P><STRONG><a name="[1d4]"></a>bmp1::flushpoint(int, int, unsigned char*)</STRONG> (Thumb, 334 bytes, Stack size 56 bytes, command.o(i._ZN4bmp110flushpointEiiPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = bmp1::flushpoint(int, int, unsigned char*) &rArr; mbed::Stream::printf(const char*, ...) &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; serial_set_flow_control &rArr; gpio_init_out_ex &rArr; gpio_init &rArr; pin_function &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::printf(const char*, ...)
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp1::ConvertTo1Bpp(int, int, int)
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp1::getGrayLevel(unsigned char, unsigned char, unsigned char)
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flush1BPP(int, int, unsigned char*)
</UL>

<P><STRONG><a name="[1cb]"></a>bmp1::resizeImage(int, int)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, command.o(i._ZN4bmp111resizeImageEii))
<BR><BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_convertbimage(unsigned char*, unsigned char)
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_convert1bpp(unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[295]"></a>bmp1::getGrayLevel(unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 112 bytes, Stack size 72 bytes, command.o(i._ZN4bmp112getGrayLevelEhhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = bmp1::getGrayLevel(unsigned char, unsigned char, unsigned char) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp1::flushpoint(int, int, unsigned char*)
</UL>

<P><STRONG><a name="[299]"></a>bmp1::ConvertTo1Bpp(int, int, int)</STRONG> (Thumb, 422 bytes, Stack size 44 bytes, command.o(i._ZN4bmp113ConvertTo1BppEiii))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = bmp1::ConvertTo1Bpp(int, int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp1::flushpoint(int, int, unsigned char*)
</UL>

<P><STRONG><a name="[1cc]"></a>bmp1::clear()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, command.o(i._ZN4bmp15clearEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = bmp1::clear() &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_convertbimage(unsigned char*, unsigned char)
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_convert1bpp(unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[1ca]"></a>bmp1::point(int, int, unsigned char*)</STRONG> (Thumb, 196 bytes, Stack size 80 bytes, command.o(i._ZN4bmp15pointEiiPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = bmp1::point(int, int, unsigned char*) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flushBImage(int, int, unsigned char*)
</UL>

<P><STRONG><a name="[29e]"></a>bmp1::LE32write(unsigned char*, int)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, command.o(i._ZN4bmp19LE32writeEPhi))
<BR><BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp1::writeFile(const char*)
</UL>

<P><STRONG><a name="[1d2]"></a>bmp1::writeFile(const char*)</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, command.o(i._ZN4bmp19writeFileEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = bmp1::writeFile(const char*) &rArr; fopen &rArr; freopen &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; serial_set_flow_control &rArr; gpio_init_out_ex &rArr; gpio_init &rArr; pin_function &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp1::LE32write(unsigned char*, int)
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_convertbimage(unsigned char*, unsigned char)
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_convert1bpp(unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[1df]"></a>bmp1::bmp1()</STRONG> (Thumb, 182 bytes, Stack size 8 bytes, command.o(i._ZN4bmp1C1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = bmp1::bmp1() &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___11_command_cpp_369aa827
</UL>

<P><STRONG><a name="[363]"></a>bmp1::bmp1__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, command.o(i._ZN4bmp1C1Ev), UNUSED)

<P><STRONG><a name="[177]"></a>mbed::DigitalOut::write(int)</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, main.o(i._ZN4mbed10DigitalOut5writeEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = mbed::DigitalOut::write(int) &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize()
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::operator =(int)
</UL>

<P><STRONG><a name="[112]"></a>mbed::DigitalOut::DigitalOut(PinName)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, main.o(i._ZN4mbed10DigitalOutC1E7PinName))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = mbed::DigitalOut::DigitalOut(PinName) &rArr; gpio_init_out &rArr; gpio_init &rArr; pin_function &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_out
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_Class::EPD_Class(EPD_size, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName)
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_sd
</UL>

<P><STRONG><a name="[364]"></a>mbed::DigitalOut::DigitalOut__sub_object(PinName)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, main.o(i._ZN4mbed10DigitalOutC1E7PinName), UNUSED)

<P><STRONG><a name="[107]"></a>mbed::DigitalOut::operator =(int)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, main.o(i._ZN4mbed10DigitalOutaSEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = mbed::DigitalOut::operator =(int) &rArr; mbed::DigitalOut::write(int) &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::write(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_Class::line(unsigned short, const unsigned char*, unsigned char, bool, EPD_stage)
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_Class::SPI_send(mbed::DigitalOut, const unsigned char*, unsigned short)
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_Class::begin()
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_Class::end()
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDFileSystem::_write(const unsigned char*, unsigned)
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDFileSystem::initialise_card()
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDFileSystem::_cmd8()
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDFileSystem::_cmd58()
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDFileSystem::_cmdx(int, int)
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDFileSystem::_read(unsigned char*, unsigned)
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDFileSystem::_cmd(int, int)
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDFileSystem::SDFileSystem(PinName, PinName, PinName, PinName, const char*)
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turnonLED(int, int)
</UL>

<P><STRONG><a name="[b4]"></a>mbed::FileHandle::flen()</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, retarget.o(i._ZN4mbed10FileHandle4flenEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbed::FileHandle::flen()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> retarget.o(.constdata__ZTVN4mbed10FileHandleE)
<LI> FileLike.o(.constdata__ZTVN4mbed8FileLikeE)
</UL>
<P><STRONG><a name="[365]"></a>mbed::FileHandle::~FileHandle()</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, retarget.o(i._ZN4mbed10FileHandleD2Ev), UNUSED)

<P><STRONG><a name="[b5]"></a>mbed::FileHandle::~FileHandle__sub_object()</STRONG> (Thumb, 38 bytes, Stack size 4 bytes, retarget.o(i._ZN4mbed10FileHandleD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = mbed::FileHandle::~FileHandle__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFileHandle::~FATFileHandle()
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileLike::~FileLike__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> retarget.o(.constdata__ZTVN4mbed10FileHandleE)
</UL>
<P><STRONG><a name="[2a0]"></a>mbed::SerialBase::_base_getc()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, SerialBase.o(i._ZN4mbed10SerialBase10_base_getcEv))
<BR><BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_getc
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thunk{-72} to mbed::Serial::_getc()
</UL>

<P><STRONG><a name="[2a2]"></a>mbed::SerialBase::_base_putc(int)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, SerialBase.o(i._ZN4mbed10SerialBase10_base_putcEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mbed::SerialBase::_base_putc(int) &rArr; serial_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_putc
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thunk{-72} to mbed::Serial::_putc(int)
</UL>

<P><STRONG><a name="[65]"></a>mbed::SerialBase::_irq_handler(unsigned, SerialIrq)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, SerialBase.o(i._ZN4mbed10SerialBase12_irq_handlerEj9SerialIrq))
<BR><BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FunctionPointer::call()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> SerialBase.o(i._ZN4mbed10SerialBaseC1E7PinNameS1_)
</UL>
<P><STRONG><a name="[10a]"></a>mbed::SerialBase::baud(int)</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, SerialBase.o(i._ZN4mbed10SerialBase4baudEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = mbed::SerialBase::baud(int) &rArr; serial_baud &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_baud
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize()
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::Adafruit_Thermal(PinName, PinName, int, unsigned char)
</UL>

<P><STRONG><a name="[179]"></a>mbed::SerialBase::attach(void(*)(), mbed::SerialBase::IrqType)</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, SerialBase.o(i._ZN4mbed10SerialBase6attachEPFvvENS0_7IrqTypeE))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mbed::SerialBase::attach(void(*)(), mbed::SerialBase::IrqType) &rArr; serial_irq_set &rArr; serial_irq_set_internal &rArr; NVIC_SetVector &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FunctionPointer::attach(void(*)())
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_irq_set
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize()
</UL>

<P><STRONG><a name="[16a]"></a>mbed::SerialBase::readable()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, SerialBase.o(i._ZN4mbed10SerialBase8readableEv))
<BR><BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_readable
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearRxBuf()
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxIntHandler()
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::hasPaper()
</UL>

<P><STRONG><a name="[2a8]"></a>mbed::SerialBase::SerialBase(PinName, PinName)</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, SerialBase.o(i._ZN4mbed10SerialBaseC1E7PinNameS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = mbed::SerialBase::SerialBase(PinName, PinName) &rArr; serial_init &rArr; serial_set_flow_control &rArr; gpio_init_out_ex &rArr; gpio_init &rArr; pin_function &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_irq_handler
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Serial::Serial(PinName, PinName, const char*)
</UL>

<P><STRONG><a name="[366]"></a>mbed::SerialBase::SerialBase__sub_object(PinName, PinName)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, SerialBase.o(i._ZN4mbed10SerialBaseC1E7PinNameS1_), UNUSED)

<P><STRONG><a name="[66]"></a>mbed::TimerEvent::irq(unsigned)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, TimerEvent.o(i._ZN4mbed10TimerEvent3irqEj))
<BR>[Address Reference Count : 1]<UL><LI> TimerEvent.o(i._ZN4mbed10TimerEventC2Ev)
</UL>
<P><STRONG><a name="[2ac]"></a>mbed::TimerEvent::insert(unsigned)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, TimerEvent.o(i._ZN4mbed10TimerEvent6insertEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbed::TimerEvent::insert(unsigned) &rArr; us_ticker_insert_event
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_insert_event
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::setup(unsigned)
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::handler()
</UL>

<P><STRONG><a name="[2ae]"></a>mbed::TimerEvent::remove()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, TimerEvent.o(i._ZN4mbed10TimerEvent6removeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::TimerEvent::remove() &rArr; us_ticker_remove_event
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_remove_event
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::setup(unsigned)
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::~Ticker()
</UL>

<P><STRONG><a name="[1b4]"></a>mbed::TimerEvent::TimerEvent__sub_object()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, TimerEvent.o(i._ZN4mbed10TimerEventC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mbed::TimerEvent::TimerEvent__sub_object() &rArr; us_ticker_set_handler &rArr; us_ticker_init &rArr; NVIC_SetVector &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_set_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___12_joystick_cpp_joystick
</UL>

<P><STRONG><a name="[367]"></a>mbed::TimerEvent::~TimerEvent()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, TimerEvent.o(i._ZN4mbed10TimerEventD2Ev), UNUSED)

<P><STRONG><a name="[b6]"></a>mbed::TimerEvent::~TimerEvent__sub_object()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, TimerEvent.o(i._ZN4mbed10TimerEventD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbed::TimerEvent::~TimerEvent__sub_object() &rArr; us_ticker_remove_event
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_remove_event
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::~Ticker()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> TimerEvent.o(.constdata__ZTVN4mbed10TimerEventE)
</UL>
<P><STRONG><a name="[b8]"></a>mbed::BaseDirHandle::readdir()</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, FileSystemLike.o(i._ZN4mbed13BaseDirHandle7readdirEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbed::BaseDirHandle::readdir() &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::getName()
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::get(int)
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> FileSystemLike.o(.constdata__ZTVN4mbed13BaseDirHandleE)
</UL>
<P><STRONG><a name="[b7]"></a>mbed::BaseDirHandle::closedir()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, FileSystemLike.o(i._ZN4mbed13BaseDirHandle8closedirEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::BaseDirHandle::closedir()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> FileSystemLike.o(.constdata__ZTVN4mbed13BaseDirHandleE)
</UL>
<P><STRONG><a name="[b9]"></a>mbed::BaseDirHandle::~BaseDirHandle__deallocating()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, FileSystemLike.o(i._ZN4mbed13BaseDirHandleD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbed::BaseDirHandle::~BaseDirHandle__deallocating() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> FileSystemLike.o(.constdata__ZTVN4mbed13BaseDirHandleE)
</UL>
<P><STRONG><a name="[bb]"></a>mbed::FileSystemLike::remove(const char*)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, FileSystemLike.o(i._ZN4mbed14FileSystemLike6removeEPKc))
<BR>[Address Reference Count : 1]<UL><LI> FileSystemLike.o(.constdata__ZTVN4mbed14FileSystemLikeE)
</UL>
<P><STRONG><a name="[bc]"></a>mbed::FileSystemLike::opendir(const char*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, FileSystemLike.o(i._ZN4mbed14FileSystemLike7opendirEPKc))
<BR>[Address Reference Count : 1]<UL><LI> FileSystemLike.o(.constdata__ZTVN4mbed14FileSystemLikeE)
</UL>
<P><STRONG><a name="[2b3]"></a>mbed::FileSystemLike::opendir()</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, FileSystemLike.o(i._ZN4mbed14FileSystemLike7opendirEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mbed::FileSystemLike::opendir() &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
</UL>

<P><STRONG><a name="[132]"></a>mbed::FileSystemLike::FileSystemLike__sub_object(const char*)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, FileSystemLike.o(i._ZN4mbed14FileSystemLikeC2EPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::FileSystemLike::FileSystemLike__sub_object(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::FileBase(const char*, mbed::PathType)
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFileSystem::FATFileSystem__sub_object(const char*)
</UL>

<P><STRONG><a name="[368]"></a>mbed::FileSystemLike::~FileSystemLike()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, FileSystemLike.o(i._ZN4mbed14FileSystemLikeD2Ev), UNUSED)

<P><STRONG><a name="[ba]"></a>mbed::FileSystemLike::~FileSystemLike__sub_object()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, FileSystemLike.o(i._ZN4mbed14FileSystemLikeD2Ev))
<BR><BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::~FileBase()
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFileSystem::~FATFileSystem__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> FileSystemLike.o(.constdata__ZTVN4mbed14FileSystemLikeE)
</UL>
<P><STRONG><a name="[2a4]"></a>mbed::FunctionPointer::call()</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, FunctionPointer.o(i._ZN4mbed15FunctionPointer4callEv))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::_irq_handler(unsigned, SerialIrq)
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::handler()
</UL>

<P><STRONG><a name="[1b2]"></a>mbed::FunctionPointer::attach(void(*)())</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, FunctionPointer.o(i._ZN4mbed15FunctionPointer6attachEPFvvE))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::attach(void(*)(), mbed::SerialBase::IrqType)
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_joystick()
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::~Ticker()
</UL>

<P><STRONG><a name="[1b5]"></a>mbed::FunctionPointer::FunctionPointer(void(*)())</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, FunctionPointer.o(i._ZN4mbed15FunctionPointerC1EPFvvE))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___12_joystick_cpp_joystick
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;&lang;Func1&rang;
</UL>

<P><STRONG><a name="[369]"></a>mbed::FunctionPointer::FunctionPointer__sub_object(void(*)())</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, FunctionPointer.o(i._ZN4mbed15FunctionPointerC1EPFvvE), UNUSED)

<P><STRONG><a name="[2b5]"></a>mbed::mbed_set_unbuffered_stream(std::__FILE*)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, retarget.o(i._ZN4mbed26mbed_set_unbuffered_streamEPSt6__FILE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbed::mbed_set_unbuffered_stream(std::__FILE*) &rArr; setbuf &rArr; setvbuf
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::Stream__sub_object(const char*)
</UL>

<P><STRONG><a name="[189]"></a>mbed::I2C::read(int, char*, int, bool)</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, I2C.o(i._ZN4mbed3I2C4readEiPcib))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = mbed::I2C::read(int, char*, int, bool) &rArr; i2c_read
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_frequency
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EaEpaper::readTemperature()
</UL>

<P><STRONG><a name="[188]"></a>mbed::I2C::write(int, const char*, int, bool)</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, I2C.o(i._ZN4mbed3I2C5writeEiPKcib))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = mbed::I2C::write(int, const char*, int, bool) &rArr; i2c_write
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_write
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_frequency
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EaEpaper::readTemperature()
</UL>

<P><STRONG><a name="[184]"></a>mbed::I2C::I2C(PinName, PinName)</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, I2C.o(i._ZN4mbed3I2CC1E7PinNameS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = mbed::I2C::I2C(PinName, PinName) &rArr; i2c_init &rArr; pinmap_pinout &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_init
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EaEpaper::EaEpaper(PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, const char*)
</UL>

<P><STRONG><a name="[36a]"></a>mbed::I2C::I2C__sub_object(PinName, PinName)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, I2C.o(i._ZN4mbed3I2CC1E7PinNameS1_), UNUSED)

<P><STRONG><a name="[bd]"></a>mbed::SPI::write(int)</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, SPI.o(i._ZN4mbed3SPI5writeEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = mbed::SPI::write(int) &rArr; spi_frequency &rArr; error &rArr; exit &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; serial_set_flow_control &rArr; gpio_init_out_ex &rArr; gpio_init &rArr; pin_function &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_master_write
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_frequency
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_format
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_Class::SPI_send(mbed::DigitalOut, const unsigned char*, unsigned short)
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_Class::SPI_put(unsigned char)
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDFileSystem::_write(const unsigned char*, unsigned)
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDFileSystem::initialise_card()
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDFileSystem::_cmd8()
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDFileSystem::_cmd58()
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDFileSystem::_cmdx(int, int)
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDFileSystem::_read(unsigned char*, unsigned)
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDFileSystem::_cmd(int, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> SPI.o(.constdata__ZTVN4mbed3SPIE)
</UL>
<P><STRONG><a name="[125]"></a>mbed::SPI::frequency(int)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, SPI.o(i._ZN4mbed3SPI9frequencyEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = mbed::SPI::frequency(int) &rArr; spi_frequency &rArr; error &rArr; exit &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; serial_set_flow_control &rArr; gpio_init_out_ex &rArr; gpio_init &rArr; pin_function &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_frequency
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_format
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_Class::EPD_Class(EPD_size, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName)
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDFileSystem::disk_initialize()
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDFileSystem::initialise_card()
</UL>

<P><STRONG><a name="[118]"></a>mbed::SPI::SPI(PinName, PinName, PinName, PinName)</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, SPI.o(i._ZN4mbed3SPIC1E7PinNameS1_S1_S1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = mbed::SPI::SPI(PinName, PinName, PinName, PinName) &rArr; spi_init &rArr; spi_frequency &rArr; error &rArr; exit &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; serial_set_flow_control &rArr; gpio_init_out_ex &rArr; gpio_init &rArr; pin_function &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_frequency
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_format
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_Class::EPD_Class(EPD_size, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName)
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDFileSystem::SDFileSystem(PinName, PinName, PinName, PinName, const char*)
</UL>

<P><STRONG><a name="[36b]"></a>mbed::SPI::SPI__sub_object(PinName, PinName, PinName, PinName)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, SPI.o(i._ZN4mbed3SPIC1E7PinNameS1_S1_S1_), UNUSED)

<P><STRONG><a name="[1a7]"></a>mbed::Timer::start()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, Timer.o(i._ZN4mbed5Timer5startEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mbed::Timer::start() &rArr; us_ticker_read &rArr; NVIC_SetVector &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_read
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_Class::frame_cb_repeat(unsigned, void(*)(void*, unsigned, unsigned short), EPD_stage)
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_Class::frame_fixed_repeat(unsigned char, EPD_stage)
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_Class::frame_data_repeat(const unsigned char*, EPD_stage)
</UL>

<P><STRONG><a name="[1a8]"></a>mbed::Timer::read_ms()</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, Timer.o(i._ZN4mbed5Timer7read_msEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mbed::Timer::read_ms() &rArr; us_ticker_read &rArr; NVIC_SetVector &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_read
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_Class::frame_cb_repeat(unsigned, void(*)(void*, unsigned, unsigned short), EPD_stage)
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_Class::frame_fixed_repeat(unsigned char, EPD_stage)
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_Class::frame_data_repeat(const unsigned char*, EPD_stage)
</UL>

<P><STRONG><a name="[1ab]"></a>mbed::Timer::Timer()</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, Timer.o(i._ZN4mbed5TimerC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mbed::Timer::Timer() &rArr; us_ticker_read &rArr; NVIC_SetVector &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_read
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___7_EPD_cpp__time
</UL>

<P><STRONG><a name="[36c]"></a>mbed::Timer::Timer__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, Timer.o(i._ZN4mbed5TimerC1Ev), UNUSED)

<P><STRONG><a name="[1a1]"></a>mbed::PwmOut::operator =(float)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, epd.o(i._ZN4mbed6PwmOutaSEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mbed::PwmOut::operator =(float) &rArr; pwmout_write &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmout_write
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_Class::begin()
</UL>

<P><STRONG><a name="[111]"></a>mbed::Serial::Serial(PinName, PinName, const char*)</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, Serial.o(i._ZN4mbed6SerialC1E7PinNameS1_PKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = mbed::Serial::Serial(PinName, PinName, const char*) &rArr; mbed::Stream::Stream__sub_object(const char*) &rArr; fopen &rArr; freopen &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; serial_set_flow_control &rArr; gpio_init_out_ex &rArr; gpio_init &rArr; pin_function &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::Stream__sub_object(const char*)
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::SerialBase(PinName, PinName)
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___17_serial_camera_cpp_OE
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_sd
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::Adafruit_Thermal(PinName, PinName, int, unsigned char)
</UL>

<P><STRONG><a name="[36d]"></a>mbed::Serial::Serial__sub_object(PinName, PinName, const char*)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, Serial.o(i._ZN4mbed6SerialC1E7PinNameS1_PKc), UNUSED)

<P><STRONG><a name="[55]"></a>mbed::Serial::~Serial()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, Serial.o(i._ZN4mbed6SerialD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mbed::Serial::~Serial() &rArr; mbed::Stream::~Stream__sub_object() &rArr; fclose
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::~Stream__sub_object()
</UL>
<BR>[Address Reference Count : 3]<UL><LI> main.o(.text)
<LI> serial_camera.o(.text)
<LI> Serial.o(.constdata__ZTVN4mbed6SerialE)
</UL>
<P><STRONG><a name="[36e]"></a>mbed::Serial::~Serial__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, Serial.o(i._ZN4mbed6SerialD1Ev), UNUSED)

<P><STRONG><a name="[73]"></a>mbed::Stream::flen()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, Stream.o(i._ZN4mbed6Stream4flenEv))
<BR>[Address Reference Count : 6]<UL><LI> eaepaper.o(.constdata__ZTV8EaEpaper)
<LI> graphicsdisplay.o(.constdata__ZTV15GraphicsDisplay)
<LI> textdisplay.o(.constdata__ZTV11TextDisplay)
<LI> Serial.o(.constdata__ZTVN4mbed6SerialE)
<LI> adafruit_thermal.o(.constdata__ZTV16Adafruit_Thermal)
<LI> Stream.o(.constdata__ZTVN4mbed6StreamE)
</UL>
<P><STRONG><a name="[169]"></a>mbed::Stream::getc()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, Stream.o(i._ZN4mbed6Stream4getcEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = mbed::Stream::getc() &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; serial_set_flow_control &rArr; gpio_init_out_ex &rArr; gpio_init &rArr; pin_function &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::mbed_getc(std::__FILE*)
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearRxBuf()
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxIntHandler()
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::hasPaper()
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getUserInput(unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[16d]"></a>mbed::Stream::putc(int)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, Stream.o(i._ZN4mbed6Stream4putcEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = mbed::Stream::putc(int) &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; serial_set_flow_control &rArr; gpio_init_out_ex &rArr; gpio_init &rArr; pin_function &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TextDisplay::cls()
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendCmd(char*, int)
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::write(unsigned char)
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::printBitmap(int, int, const unsigned char*, bool)
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getUserInput(unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[70]"></a>mbed::Stream::read(void*, unsigned)</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, Stream.o(i._ZN4mbed6Stream4readEPvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbed::Stream::read(void*, unsigned)
</UL>
<BR>[Address Reference Count : 6]<UL><LI> eaepaper.o(.constdata__ZTV8EaEpaper)
<LI> graphicsdisplay.o(.constdata__ZTV15GraphicsDisplay)
<LI> textdisplay.o(.constdata__ZTV11TextDisplay)
<LI> Serial.o(.constdata__ZTVN4mbed6SerialE)
<LI> adafruit_thermal.o(.constdata__ZTV16Adafruit_Thermal)
<LI> Stream.o(.constdata__ZTVN4mbed6StreamE)
</UL>
<P><STRONG><a name="[6f]"></a>mbed::Stream::close()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, Stream.o(i._ZN4mbed6Stream5closeEv))
<BR>[Address Reference Count : 6]<UL><LI> eaepaper.o(.constdata__ZTV8EaEpaper)
<LI> graphicsdisplay.o(.constdata__ZTV15GraphicsDisplay)
<LI> textdisplay.o(.constdata__ZTV11TextDisplay)
<LI> Serial.o(.constdata__ZTVN4mbed6SerialE)
<LI> adafruit_thermal.o(.constdata__ZTV16Adafruit_Thermal)
<LI> Stream.o(.constdata__ZTVN4mbed6StreamE)
</UL>
<P><STRONG><a name="[72]"></a>mbed::Stream::lseek(long, int)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, Stream.o(i._ZN4mbed6Stream5lseekEli))
<BR>[Address Reference Count : 6]<UL><LI> eaepaper.o(.constdata__ZTV8EaEpaper)
<LI> graphicsdisplay.o(.constdata__ZTV15GraphicsDisplay)
<LI> textdisplay.o(.constdata__ZTV11TextDisplay)
<LI> Serial.o(.constdata__ZTVN4mbed6SerialE)
<LI> adafruit_thermal.o(.constdata__ZTV16Adafruit_Thermal)
<LI> Stream.o(.constdata__ZTVN4mbed6StreamE)
</UL>
<P><STRONG><a name="[6e]"></a>mbed::Stream::write(const void*, unsigned)</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, Stream.o(i._ZN4mbed6Stream5writeEPKvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbed::Stream::write(const void*, unsigned)
</UL>
<BR>[Address Reference Count : 6]<UL><LI> eaepaper.o(.constdata__ZTV8EaEpaper)
<LI> graphicsdisplay.o(.constdata__ZTV15GraphicsDisplay)
<LI> textdisplay.o(.constdata__ZTV11TextDisplay)
<LI> Serial.o(.constdata__ZTVN4mbed6SerialE)
<LI> adafruit_thermal.o(.constdata__ZTV16Adafruit_Thermal)
<LI> Stream.o(.constdata__ZTVN4mbed6StreamE)
</UL>
<P><STRONG><a name="[71]"></a>mbed::Stream::isatty()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, Stream.o(i._ZN4mbed6Stream6isattyEv))
<BR>[Address Reference Count : 6]<UL><LI> eaepaper.o(.constdata__ZTV8EaEpaper)
<LI> graphicsdisplay.o(.constdata__ZTV15GraphicsDisplay)
<LI> textdisplay.o(.constdata__ZTV11TextDisplay)
<LI> Serial.o(.constdata__ZTVN4mbed6SerialE)
<LI> adafruit_thermal.o(.constdata__ZTV16Adafruit_Thermal)
<LI> Stream.o(.constdata__ZTVN4mbed6StreamE)
</UL>
<P><STRONG><a name="[10b]"></a>mbed::Stream::printf(const char*, ...)</STRONG> (Thumb, 30 bytes, Stack size 32 bytes, Stream.o(i._ZN4mbed6Stream6printfEPKcz))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = mbed::Stream::printf(const char*, ...) &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; serial_set_flow_control &rArr; gpio_init_out_ex &rArr; gpio_init &rArr; pin_function &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vfprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;joystick_Int_Handler()
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debuginfo(char*, unsigned short)
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPictureData(__picture_info*)
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cameraGo(__picture_info*)
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cameraSnapshot(__picture_info*)
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetCamera()
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize()
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;instructCamera(char*, unsigned short, char*)
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;makeConnection(char*, unsigned short)
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getResponse(char**, unsigned short, unsigned short)
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verifyPackage(char*, unsigned short)
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_findvalidfilename(unsigned char*, unsigned char)
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_convertbimage(unsigned char*, unsigned char)
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_takepicture(unsigned char*, unsigned char)
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_printer(unsigned char*, unsigned char)
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp24::writeblock(int, int)
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp1::flushpoint(int, int, unsigned char*)
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::test()
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_drawmenu(unsigned char*, unsigned char)
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_drawicon(unsigned char*, unsigned char)
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_drawcircle(unsigned char*, unsigned char)
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_cleardisplay(unsigned char*, unsigned char)
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_setdismode(unsigned char*, unsigned char)
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_drawchar(unsigned char*, unsigned char)
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_drawstring(unsigned char*, unsigned char)
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_browseSDcard(unsigned char*, unsigned char)
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_convert2bmp(unsigned char*, unsigned char)
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_convert1bpp(unsigned char*, unsigned char)
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_takephoto(unsigned char*, unsigned char)
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_remove(unsigned char*, unsigned char)
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_helpinfo(unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[198]"></a>mbed::Stream::Stream__sub_object(const char*)</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, Stream.o(i._ZN4mbed6StreamC2EPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = mbed::Stream::Stream__sub_object(const char*) &rArr; fopen &rArr; freopen &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; serial_set_flow_control &rArr; gpio_init_out_ex &rArr; gpio_init &rArr; pin_function &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileLike::FileLike__sub_object(const char*)
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::mbed_set_unbuffered_stream(std::__FILE*)
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TextDisplay::TextDisplay__sub_object(const char*)
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Serial::Serial(PinName, PinName, const char*)
</UL>

<P><STRONG><a name="[36f]"></a>mbed::Stream::~Stream()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, Stream.o(i._ZN4mbed6StreamD2Ev), UNUSED)

<P><STRONG><a name="[be]"></a>mbed::Stream::~Stream__sub_object()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, Stream.o(i._ZN4mbed6StreamD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mbed::Stream::~Stream__sub_object() &rArr; fclose
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileLike::~FileLike__sub_object()
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EaEpaper::~EaEpaper()
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Serial::~Serial()
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::~Adafruit_Thermal()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> Stream.o(.constdata__ZTVN4mbed6StreamE)
</UL>
<P><STRONG><a name="[1b3]"></a>mbed::Ticker::setup(unsigned)</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, Ticker.o(i._ZN4mbed6Ticker5setupEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mbed::Ticker::setup(unsigned) &rArr; us_ticker_read &rArr; NVIC_SetVector &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_read
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::remove()
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::insert(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_joystick()
</UL>

<P><STRONG><a name="[bf]"></a>mbed::Ticker::handler()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, Ticker.o(i._ZN4mbed6Ticker7handlerEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbed::Ticker::handler() &rArr; mbed::TimerEvent::insert(unsigned) &rArr; us_ticker_insert_event
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::insert(unsigned)
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FunctionPointer::call()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> Ticker.o(.constdata__ZTVN4mbed6TickerE)
</UL>
<P><STRONG><a name="[56]"></a>mbed::Ticker::~Ticker()</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, Ticker.o(i._ZN4mbed6TickerD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbed::Ticker::~Ticker() &rArr; mbed::TimerEvent::~TimerEvent__sub_object() &rArr; us_ticker_remove_event
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FunctionPointer::attach(void(*)())
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::~TimerEvent__sub_object()
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::remove()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> joystick.o(.text)
<LI> Ticker.o(.constdata__ZTVN4mbed6TickerE)
</UL>
<P><STRONG><a name="[370]"></a>mbed::Ticker::~Ticker__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, Ticker.o(i._ZN4mbed6TickerD1Ev), UNUSED)

<P><STRONG><a name="[1af]"></a>mbed::AnalogIn::read()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, joystick.o(i._ZN4mbed8AnalogIn4readEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbed::AnalogIn::read() &rArr; analogin_read &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analogin_read
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;joystick_Int_Handler()
</UL>

<P><STRONG><a name="[1b6]"></a>mbed::AnalogIn::AnalogIn(PinName)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, joystick.o(i._ZN4mbed8AnalogInC1E7PinName))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = mbed::AnalogIn::AnalogIn(PinName) &rArr; analogin_init &rArr; pinmap_pinout &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analogin_init
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___12_joystick_cpp_joystick
</UL>

<P><STRONG><a name="[371]"></a>mbed::AnalogIn::AnalogIn__sub_object(PinName)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, joystick.o(i._ZN4mbed8AnalogInC1E7PinName), UNUSED)

<P><STRONG><a name="[2c6]"></a>mbed::FileBase::getPathType()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, FileBase.o(i._ZN4mbed8FileBase11getPathTypeEv))
<BR><BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::isFile()
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::file()
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::fileSystem()
</UL>

<P><STRONG><a name="[2b1]"></a>mbed::FileBase::get(int)</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, FileBase.o(i._ZN4mbed8FileBase3getEi))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::BaseDirHandle::readdir()
</UL>

<P><STRONG><a name="[2c4]"></a>mbed::FileBase::lookup(const char*, unsigned)</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, FileBase.o(i._ZN4mbed8FileBase6lookupEPKcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbed::FileBase::lookup(const char*, unsigned) &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::FilePath(const char*)
</UL>

<P><STRONG><a name="[2b2]"></a>mbed::FileBase::getName()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, FileBase.o(i._ZN4mbed8FileBase7getNameEv))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::BaseDirHandle::readdir()
</UL>

<P><STRONG><a name="[2b4]"></a>mbed::FileBase::FileBase(const char*, mbed::PathType)</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, FileBase.o(i._ZN4mbed8FileBaseC1EPKcNS_8PathTypeE))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileSystemLike::FileSystemLike__sub_object(const char*)
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileLike::FileLike__sub_object(const char*)
</UL>

<P><STRONG><a name="[372]"></a>mbed::FileBase::FileBase__sub_object(const char*, mbed::PathType)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, FileBase.o(i._ZN4mbed8FileBaseC1EPKcNS_8PathTypeE), UNUSED)

<P><STRONG><a name="[c0]"></a>mbed::FileBase::~FileBase()</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, FileBase.o(i._ZN4mbed8FileBaseD1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileSystemLike::~FileSystemLike__sub_object()
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileLike::~FileLike__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> FileBase.o(.constdata__ZTVN4mbed8FileBaseE)
</UL>
<P><STRONG><a name="[373]"></a>mbed::FileBase::~FileBase__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, FileBase.o(i._ZN4mbed8FileBaseD1Ev), UNUSED)

<P><STRONG><a name="[2c1]"></a>mbed::FileLike::FileLike__sub_object(const char*)</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, FileLike.o(i._ZN4mbed8FileLikeC2EPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::FileLike::FileLike__sub_object(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::FileBase(const char*, mbed::PathType)
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::Stream__sub_object(const char*)
</UL>

<P><STRONG><a name="[374]"></a>mbed::FileLike::~FileLike()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, FileLike.o(i._ZN4mbed8FileLikeD2Ev), UNUSED)

<P><STRONG><a name="[c1]"></a>mbed::FileLike::~FileLike__sub_object()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, FileLike.o(i._ZN4mbed8FileLikeD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mbed::FileLike::~FileLike__sub_object() &rArr; mbed::FileHandle::~FileHandle__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileHandle::~FileHandle__sub_object()
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::~FileBase()
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::~Stream__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> FileLike.o(.constdata__ZTVN4mbed8FileLikeE)
</UL>
<P><STRONG><a name="[2c5]"></a>mbed::FilePath::fileSystem()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, FilePath.o(i._ZN4mbed8FilePath10fileSystemEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::FilePath::fileSystem()
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::getPathType()
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
</UL>

<P><STRONG><a name="[2c7]"></a>mbed::FilePath::file()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, FilePath.o(i._ZN4mbed8FilePath4fileEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::FilePath::file()
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::getPathType()
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[2d0]"></a>mbed::FilePath::exists()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, FilePath.o(i._ZN4mbed8FilePath6existsEv))
<BR><BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[2c8]"></a>mbed::FilePath::isFile()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, FilePath.o(i._ZN4mbed8FilePath6isFileEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::FilePath::isFile()
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::getPathType()
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[2d1]"></a>mbed::FilePath::fileName()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, FilePath.o(i._ZN4mbed8FilePath8fileNameEv))
<BR><BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
</UL>

<P><STRONG><a name="[2c9]"></a>mbed::FilePath::FilePath(const char*)</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, FilePath.o(i._ZN4mbed8FilePathC1EPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mbed::FilePath::FilePath(const char*) &rArr; mbed::FileBase::lookup(const char*, unsigned) &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::lookup(const char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
</UL>

<P><STRONG><a name="[375]"></a>mbed::FilePath::FilePath__sub_object(const char*)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, FilePath.o(i._ZN4mbed8FilePathC1EPKc), UNUSED)

<P><STRONG><a name="[19f]"></a>mbed::DigitalIn::operator int()</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, epd.o(i._ZN4mbed9DigitalIncviEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = mbed::DigitalIn::operator int() &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_Class::SPI_put_wait(unsigned char, mbed::DigitalIn)
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_Class::begin()
</UL>

<P><STRONG><a name="[2c0]"></a>mbed::mbed_getc(std::__FILE*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, retarget.o(i._ZN4mbed9mbed_getcEPSt6__FILE))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbed::mbed_getc(std::__FILE*) &rArr; fgetc &rArr; __filbuf_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::getc()
</UL>

<P><STRONG><a name="[1d6]"></a>bmp24::flushblock(int, int, unsigned char*)</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, command.o(i._ZN5bmp2410flushblockEiiPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = bmp24::flushblock(int, int, unsigned char*) &rArr; bmp24::writeblock(int, int) &rArr; mbed::Stream::printf(const char*, ...) &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; serial_set_flow_control &rArr; gpio_init_out_ex &rArr; gpio_init &rArr; pin_function &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp24::writeblock(int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flushRGB(int, int, unsigned char*)
</UL>

<P><STRONG><a name="[2ca]"></a>bmp24::writeblock(int, int)</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, command.o(i._ZN5bmp2410writeblockEii))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = bmp24::writeblock(int, int) &rArr; mbed::Stream::printf(const char*, ...) &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; serial_set_flow_control &rArr; gpio_init_out_ex &rArr; gpio_init &rArr; pin_function &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::printf(const char*, ...)
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fseek
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp24::flushblock(int, int, unsigned char*)
</UL>

<P><STRONG><a name="[1d7]"></a>bmp24::initFile(int, int)</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, command.o(i._ZN5bmp248initFileEii))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = bmp24::initFile(int, int) &rArr; fwrite &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; serial_set_flow_control &rArr; gpio_init_out_ex &rArr; gpio_init &rArr; pin_function &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp24::LE32write(unsigned char*, int)
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_convert2bmp(unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[2cc]"></a>bmp24::LE32write(unsigned char*, int)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, command.o(i._ZN5bmp249LE32writeEPhi))
<BR><BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp24::initFile(int, int)
</UL>

<P><STRONG><a name="[1de]"></a>bmp24::bmp24()</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, command.o(i._ZN5bmp24C1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = bmp24::bmp24() &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___11_command_cpp_369aa827
</UL>

<P><STRONG><a name="[376]"></a>bmp24::bmp24__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, command.o(i._ZN5bmp24C1Ev), UNUSED)

<P><STRONG><a name="[54]"></a>EaEpaper::~EaEpaper()</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, main.o(i._ZN8EaEpaperD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = EaEpaper::~EaEpaper() &rArr; mbed::Stream::~Stream__sub_object() &rArr; fclose
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::~Stream__sub_object()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> main.o(.text)
<LI> eaepaper.o(.constdata__ZTV8EaEpaper)
</UL>
<P><STRONG><a name="[377]"></a>EaEpaper::~EaEpaper__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, main.o(i._ZN8EaEpaperD1Ev), UNUSED)

<P><STRONG><a name="[18c]"></a>EPD_Class::setFactor(int)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, eaepaper.o(i._ZN9EPD_Class9setFactorEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EPD_Class::setFactor(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_Class::temperature_to_factor_10x(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EaEpaper::write_disp()
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EaEpaper::clear()
</UL>

<P><STRONG><a name="[a5]"></a>thunk{-72} to mbed::Serial::_getc()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, Serial.o(i._ZThn72_N4mbed6Serial5_getcEv))
<BR><BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::_base_getc()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> Serial.o(.constdata__ZTVN4mbed6SerialE)
<LI> adafruit_thermal.o(.constdata__ZTV16Adafruit_Thermal)
</UL>
<P><STRONG><a name="[a4]"></a>thunk{-72} to mbed::Serial::_putc(int)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, Serial.o(i._ZThn72_N4mbed6Serial5_putcEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = thunk{-72} to mbed::Serial::_putc(int) &rArr; mbed::SerialBase::_base_putc(int) &rArr; serial_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::_base_putc(int)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> Serial.o(.constdata__ZTVN4mbed6SerialE)
<LI> adafruit_thermal.o(.constdata__ZTV16Adafruit_Thermal)
</UL>
<P><STRONG><a name="[135]"></a>operator delete (void*)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, delete.o(i._ZdlPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFileSystem::~FATFileSystem__deallocating()
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFileHandle::~FATFileHandle__deallocating()
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATDirHandle::~FATDirHandle__deallocating()
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::BaseDirHandle::~BaseDirHandle__deallocating()
</UL>

<P><STRONG><a name="[199]"></a>operator new[] (unsigned)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, array_new.o(i._Znaj))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TextDisplay::TextDisplay__sub_object(const char*)
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BaseJpegDecode::BaseJpegDecode__sub_object()
</UL>

<P><STRONG><a name="[137]"></a>operator new(unsigned)</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, new.o(i._Znwj))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_new_handler_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFileSystem::opendir(const char*)
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFileSystem::open(const char*, int)
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileSystemLike::opendir()
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BaseJpegDecode::BaseJpegDecode__sub_object()
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
</UL>

<P><STRONG><a name="[27c]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[10f]"></a>__aeabi_atexit</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, aeabi_atexit.o(i.__aeabi_atexit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___11_command_cpp_369aa827
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___12_joystick_cpp_joystick
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___17_serial_camera_cpp_OE
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_sd
</UL>

<P><STRONG><a name="[2a9]"></a>__aeabi_vec_ctor_nocookie_nodtor</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, aeabi_vec_ctor_nocookie_nodtor.o(i.__aeabi_vec_ctor_nocookie_nodtor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::SerialBase(PinName, PinName)
</UL>

<P><STRONG><a name="[fa]"></a>__cxa_finalize</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, cxa_finalize.o(i.__cxa_finalize))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_cpp_1
</UL>

<P><STRONG><a name="[6d]"></a>__cxa_pure_virtual</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pure_virt.o(i.__cxa_pure_virtual))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __cxa_pure_virtual &rArr; __rt_SIGPVFN &rArr; __rt_SIGPVFN_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN
</UL>
<BR>[Address Reference Count : 11]<UL><LI> fatfilesystem.o(.constdata__ZTV13FATFileSystem)
<LI> fatdirhandle.o(.constdata__ZTVN4mbed9DirHandleE)
<LI> graphicsdisplay.o(.constdata__ZTV15GraphicsDisplay)
<LI> textdisplay.o(.constdata__ZTV11TextDisplay)
<LI> simplejpegdecode.o(.constdata__ZTV10inverseDCT)
<LI> FileSystemLike.o(.constdata__ZTVN4mbed14FileSystemLikeE)
<LI> basejpegdecode.o(.constdata__ZTV14BaseJpegDecode)
<LI> retarget.o(.constdata__ZTVN4mbed10FileHandleE)
<LI> TimerEvent.o(.constdata__ZTVN4mbed10TimerEventE)
<LI> Stream.o(.constdata__ZTVN4mbed6StreamE)
<LI> FileLike.o(.constdata__ZTVN4mbed8FileLikeE)
</UL>
<P><STRONG><a name="[fc]"></a>__user_setup_stackheap</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, sys.o(i.__user_setup_stackheap))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[235]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[24a]"></a>_sys_close</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, retarget.o(i._sys_close))
<BR><BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[244]"></a>_sys_flen</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, retarget.o(i._sys_flen))
<BR><BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[242]"></a>_sys_istty</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, retarget.o(i._sys_istty))
<BR><BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[247]"></a>_sys_open</STRONG> (Thumb, 300 bytes, Stack size 32 bytes, retarget.o(i._sys_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = _sys_open &rArr; serial_init &rArr; serial_set_flow_control &rArr; gpio_init_out_ex &rArr; gpio_init &rArr; pin_function &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::FilePath(const char*)
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::fileName()
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::isFile()
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::exists()
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::file()
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::fileSystem()
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[25f]"></a>_sys_read</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, retarget.o(i._sys_read), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_getc
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_readbuf
</UL>

<P><STRONG><a name="[262]"></a>_sys_seek</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, retarget.o(i._sys_seek))
<BR><BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
</UL>

<P><STRONG><a name="[267]"></a>_sys_write</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, retarget.o(i._sys_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = _sys_write &rArr; serial_init &rArr; serial_set_flow_control &rArr; gpio_init_out_ex &rArr; gpio_init &rArr; pin_function &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_putc
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>

<P><STRONG><a name="[2c3]"></a>analogin_init</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, analogin_api.o(i.analogin_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = analogin_init &rArr; pinmap_pinout &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_pinout
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_peripheral
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::AnalogIn::AnalogIn(PinName)
</UL>

<P><STRONG><a name="[2c2]"></a>analogin_read</STRONG> (Thumb, 200 bytes, Stack size 8 bytes, analogin_api.o(i.analogin_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = analogin_read &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::AnalogIn::read()
</UL>

<P><STRONG><a name="[1bd]"></a>closedir</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, retarget.o(i.closedir))
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_findvalidfilename(unsigned char*, unsigned char)
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_browseSDcard(unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[134]"></a>error</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, error.o(i.error))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = error &rArr; exit &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; serial_set_flow_control &rArr; gpio_init_out_ex &rArr; gpio_init &rArr; pin_function &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFileSystem::FATFileSystem__sub_object(const char*)
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_frequency
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_merge
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_pinout
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_peripheral
</UL>

<P><STRONG><a name="[101]"></a>exit</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, exit.o(i.exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = exit &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; serial_set_flow_control &rArr; gpio_init_out_ex &rArr; gpio_init &rArr; pin_function &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;semihost_exit
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_interface_connected
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_die
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleJpegDecode::outputBLOCK(int, int, signed char*)
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleJpegDecode::format_RGB24(int, int, signed char*)
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleJpegDecode::format_YUV(int, int, signed char*)
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[1cf]"></a>fgetc</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fgetc.o(i.fgetc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fgetc &rArr; __filbuf_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_convertbimage(unsigned char*, unsigned char)
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::mbed_getc(std::__FILE*)
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_convert2bmp(unsigned char*, unsigned char)
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_convert1bpp(unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[2d9]"></a>floor</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, floor.o(i.floor))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = floor &rArr; __aeabi_dadd
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_frequency
</UL>

<P><STRONG><a name="[60]"></a>fputc</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fputc.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fputc &rArr; __flsbuf_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::putc(int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[2dc]"></a>gpio_dir</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, gpio_api.o(i.gpio_dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = gpio_dir &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_out
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_in
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_out_ex
</UL>

<P><STRONG><a name="[2dd]"></a>gpio_init</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, gpio_api.o(i.gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = gpio_init &rArr; pin_function &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_function
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_out
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_in
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_out_ex
</UL>

<P><STRONG><a name="[114]"></a>gpio_init_in</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, gpio.o(i.gpio_init_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = gpio_init_in &rArr; gpio_init &rArr; pin_function &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_dir
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_Class::EPD_Class(EPD_size, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName)
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_sd
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_set_flow_control
</UL>

<P><STRONG><a name="[119]"></a>gpio_init_out</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, gpio.o(i.gpio_init_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = gpio_init_out &rArr; gpio_init &rArr; pin_function &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_dir
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___17_serial_camera_cpp_OE
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::DigitalOut(PinName)
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDFileSystem::SDFileSystem(PinName, PinName, PinName, PinName, const char*)
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_die
</UL>

<P><STRONG><a name="[2e0]"></a>gpio_init_out_ex</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, gpio.o(i.gpio_init_out_ex))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = gpio_init_out_ex &rArr; gpio_init &rArr; pin_function &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_dir
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_set_flow_control
</UL>

<P><STRONG><a name="[2df]"></a>gpio_mode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gpio_api.o(i.gpio_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = gpio_mode &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_out
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_in
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_out_ex
</UL>

<P><STRONG><a name="[2b6]"></a>i2c_frequency</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, i2c_api.o(i.i2c_frequency))
<BR><BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::write(int, const char*, int, bool)
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::read(int, char*, int, bool)
</UL>

<P><STRONG><a name="[2b9]"></a>i2c_init</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, i2c_api.o(i.i2c_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = i2c_init &rArr; pinmap_pinout &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_merge
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_pinout
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_peripheral
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::I2C(PinName, PinName)
</UL>

<P><STRONG><a name="[2b7]"></a>i2c_read</STRONG> (Thumb, 382 bytes, Stack size 36 bytes, i2c_api.o(i.i2c_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = i2c_read
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::read(int, char*, int, bool)
</UL>

<P><STRONG><a name="[2e3]"></a>i2c_stop</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, i2c_api.o(i.i2c_stop))
<BR><BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_write
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read
</UL>

<P><STRONG><a name="[2b8]"></a>i2c_write</STRONG> (Thumb, 296 bytes, Stack size 28 bytes, i2c_api.o(i.i2c_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = i2c_write
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::write(int, const char*, int, bool)
</UL>

<P><STRONG><a name="[29f]"></a>mbed_assert_internal</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, assert.o(i.mbed_assert_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_die
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analogin_init
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalIn::operator int()
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmout_init
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::write(int)
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_out
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_function
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_dir
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_format
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_init
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_mode
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_out_ex
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_format
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_baud
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_die
</UL>

<P><STRONG><a name="[2d7]"></a>mbed_die</STRONG> (Thumb, 242 bytes, Stack size 96 bytes, board.o(i.mbed_die))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = mbed_die &rArr; gpio_init_out &rArr; gpio_init &rArr; pin_function &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ms
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_out
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[2d5]"></a>mbed_interface_connected</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mbed_interface.o(i.mbed_interface_connected))
<BR><BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;semihost_connected
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[292]"></a>mbed_main</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, retarget.o(i.mbed_main))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[291]"></a>mbed_sdk_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, retarget.o(i.mbed_sdk_init))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1ba]"></a>opendir</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, retarget.o(i.opendir))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = opendir &rArr; mbed::FileSystemLike::opendir() &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::FilePath(const char*)
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::fileName()
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::fileSystem()
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileSystemLike::opendir()
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_findvalidfilename(unsigned char*, unsigned char)
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_browseSDcard(unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[2de]"></a>pin_function</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, pinmap.o(i.pin_function))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = pin_function &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_pinout
</UL>

<P><STRONG><a name="[2e1]"></a>pin_mode</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, pinmap.o(i.pin_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_pinout
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
</UL>

<P><STRONG><a name="[2ea]"></a>pinmap_find_peripheral</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, pinmap_common.o(i.pinmap_find_peripheral))
<BR><BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_set_flow_control
</UL>

<P><STRONG><a name="[2e2]"></a>pinmap_merge</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, pinmap_common.o(i.pinmap_merge))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = pinmap_merge &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
</UL>
<BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_init
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
</UL>

<P><STRONG><a name="[2d2]"></a>pinmap_peripheral</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, pinmap_common.o(i.pinmap_peripheral))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = pinmap_peripheral &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analogin_init
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmout_init
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_init
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
</UL>

<P><STRONG><a name="[2d3]"></a>pinmap_pinout</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, pinmap_common.o(i.pinmap_pinout))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = pinmap_pinout &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_function
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analogin_init
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmout_init
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_init
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_set_flow_control
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
</UL>

<P><STRONG><a name="[1aa]"></a>pwmout_init</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, pwmout_api.o(i.pwmout_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = pwmout_init &rArr; pinmap_pinout &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_pinout
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_peripheral
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_Class::EPD_Class(EPD_size, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName)
</UL>

<P><STRONG><a name="[2bf]"></a>pwmout_write</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, pwmout_api.o(i.pwmout_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pwmout_write &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::PwmOut::operator =(float)
</UL>

<P><STRONG><a name="[1bc]"></a>readdir</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, retarget.o(i.readdir))
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_findvalidfilename(unsigned char*, unsigned char)
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_browseSDcard(unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[17e]"></a>remove</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, retarget.o(i.remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = remove &rArr; mbed::FilePath::FilePath(const char*) &rArr; mbed::FileBase::lookup(const char*, unsigned) &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::FilePath(const char*)
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::fileName()
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::fileSystem()
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cameraGo(__picture_info*)
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cameraSnapshot(__picture_info*)
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_remove(unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[2f0]"></a>rtc_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtc_api.o(i.rtc_init))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
</UL>

<P><STRONG><a name="[2ef]"></a>rtc_isenabled</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rtc_api.o(i.rtc_isenabled))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
</UL>

<P><STRONG><a name="[2e5]"></a>rtc_read</STRONG> (Thumb, 46 bytes, Stack size 48 bytes, rtc_api.o(i.rtc_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = rtc_read &rArr; mktime &rArr; _tm_carry
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
</UL>

<P><STRONG><a name="[2e6]"></a>rtc_write</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, rtc_api.o(i.rtc_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = rtc_write &rArr; localtime &rArr; _localtime_r &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
</UL>

<P><STRONG><a name="[2e4]"></a>semihost_connected</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, semihost_api.o(i.semihost_connected))
<BR><BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_interface_connected
</UL>

<P><STRONG><a name="[2d6]"></a>semihost_exit</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, semihost_api.o(i.semihost_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = semihost_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[2a5]"></a>serial_baud</STRONG> (Thumb, 408 bytes, Stack size 40 bytes, serial_api.o(i.serial_baud))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = serial_baud &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::baud(int)
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
</UL>

<P><STRONG><a name="[2e7]"></a>serial_format</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, serial_api.o(i.serial_format))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = serial_format &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
</UL>

<P><STRONG><a name="[2a1]"></a>serial_getc</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, serial_api.o(i.serial_getc))
<BR><BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::_base_getc()
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_read
</UL>

<P><STRONG><a name="[2aa]"></a>serial_init</STRONG> (Thumb, 334 bytes, Stack size 32 bytes, serial_api.o(i.serial_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = serial_init &rArr; serial_set_flow_control &rArr; gpio_init_out_ex &rArr; gpio_init &rArr; pin_function &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_merge
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_mode
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_set_flow_control
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_format
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_baud
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_pinout
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_peripheral
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::SerialBase(PinName, PinName)
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_read
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[2ab]"></a>serial_irq_handler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, serial_api.o(i.serial_irq_handler))
<BR><BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::SerialBase(PinName, PinName)
</UL>

<P><STRONG><a name="[2a6]"></a>serial_irq_set</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, serial_api.o(i.serial_irq_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = serial_irq_set &rArr; serial_irq_set_internal &rArr; NVIC_SetVector &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_irq_set_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::attach(void(*)(), mbed::SerialBase::IrqType)
</UL>

<P><STRONG><a name="[2a3]"></a>serial_putc</STRONG> (Thumb, 100 bytes, Stack size 12 bytes, serial_api.o(i.serial_putc))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = serial_putc
</UL>
<BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::_base_putc(int)
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
</UL>

<P><STRONG><a name="[2a7]"></a>serial_readable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, serial_api.o(i.serial_readable))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::readable()
</UL>

<P><STRONG><a name="[2e8]"></a>serial_set_flow_control</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, serial_api.o(i.serial_set_flow_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = serial_set_flow_control &rArr; gpio_init_out_ex &rArr; gpio_init &rArr; pin_function &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_in
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_find_peripheral
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_out_ex
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_irq_set_internal
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_pinout
</UL>
<BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
</UL>

<P><STRONG><a name="[2ba]"></a>spi_format</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, spi_api.o(i.spi_format))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = spi_format &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::SPI(PinName, PinName, PinName, PinName)
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::frequency(int)
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::write(int)
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
</UL>

<P><STRONG><a name="[2bb]"></a>spi_frequency</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, spi_api.o(i.spi_frequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = spi_frequency &rArr; error &rArr; exit &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; serial_set_flow_control &rArr; gpio_init_out_ex &rArr; gpio_init &rArr; pin_function &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::SPI(PinName, PinName, PinName, PinName)
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::frequency(int)
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::write(int)
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
</UL>

<P><STRONG><a name="[2bd]"></a>spi_init</STRONG> (Thumb, 232 bytes, Stack size 40 bytes, spi_api.o(i.spi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = spi_init &rArr; spi_frequency &rArr; error &rArr; exit &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; serial_set_flow_control &rArr; gpio_init_out_ex &rArr; gpio_init &rArr; pin_function &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_frequency
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_format
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_merge
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_pinout
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_peripheral
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::SPI(PinName, PinName, PinName, PinName)
</UL>

<P><STRONG><a name="[2bc]"></a>spi_master_write</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, spi_api.o(i.spi_master_write))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::write(int)
</UL>

<P><STRONG><a name="[130]"></a>time</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, rtc_time.o(i.time))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = time &rArr; rtc_read &rArr; mktime &rArr; _tm_carry
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_write
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_read
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_isenabled
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
</UL>

<P><STRONG><a name="[68]"></a>uart0_irq</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, serial_api.o(i.uart0_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uart0_irq &rArr; uart_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_api.o(i.serial_irq_set_internal)
</UL>
<P><STRONG><a name="[69]"></a>uart1_irq</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, serial_api.o(i.uart1_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uart1_irq &rArr; uart_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_api.o(i.serial_irq_set_internal)
</UL>
<P><STRONG><a name="[6a]"></a>uart2_irq</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, serial_api.o(i.uart2_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uart2_irq &rArr; uart_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_api.o(i.serial_irq_set_internal)
</UL>
<P><STRONG><a name="[6b]"></a>uart3_irq</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, serial_api.o(i.uart3_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uart3_irq &rArr; uart_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_api.o(i.serial_irq_set_internal)
</UL>
<P><STRONG><a name="[2f4]"></a>us_ticker_clear_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, us_ticker.o(i.us_ticker_clear_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_irq_handler
</UL>

<P><STRONG><a name="[2f5]"></a>us_ticker_disable_interrupt</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, us_ticker.o(i.us_ticker_disable_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_irq_handler
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_remove_event
</UL>

<P><STRONG><a name="[2f2]"></a>us_ticker_init</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, us_ticker.o(i.us_ticker_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = us_ticker_init &rArr; NVIC_SetVector &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetVector
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_set_handler
</UL>

<P><STRONG><a name="[2ad]"></a>us_ticker_insert_event</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, us_ticker_api.o(i.us_ticker_insert_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = us_ticker_insert_event
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_set_interrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::insert(unsigned)
</UL>

<P><STRONG><a name="[6c]"></a>us_ticker_irq_handler</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, us_ticker_api.o(i.us_ticker_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = us_ticker_irq_handler &rArr; us_ticker_read &rArr; NVIC_SetVector &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_set_interrupt
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_disable_interrupt
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_clear_interrupt
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_read
</UL>
<BR>[Address Reference Count : 2]<UL><LI> us_ticker.o(i.us_ticker_init)
<LI> us_ticker.o(i.us_ticker_read)
</UL>
<P><STRONG><a name="[2be]"></a>us_ticker_read</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, us_ticker.o(i.us_ticker_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = us_ticker_read &rArr; NVIC_SetVector &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetVector
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::setup(unsigned)
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_us
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::Timer()
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::read_ms()
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::start()
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ms
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_irq_handler
</UL>

<P><STRONG><a name="[2af]"></a>us_ticker_remove_event</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, us_ticker_api.o(i.us_ticker_remove_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = us_ticker_remove_event
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_set_interrupt
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_disable_interrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::~TimerEvent__sub_object()
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::remove()
</UL>

<P><STRONG><a name="[2b0]"></a>us_ticker_set_handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, us_ticker_api.o(i.us_ticker_set_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = us_ticker_set_handler &rArr; us_ticker_init &rArr; NVIC_SetVector &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::TimerEvent__sub_object()
</UL>

<P><STRONG><a name="[2f3]"></a>us_ticker_set_interrupt</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, us_ticker.o(i.us_ticker_set_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_irq_handler
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_remove_event
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_insert_event
</UL>

<P><STRONG><a name="[108]"></a>wait_ms</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, wait_api.o(i.wait_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = wait_ms &rArr; us_ticker_read &rArr; NVIC_SetVector &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_read
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isDirectionValid(const char*)
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_Class::begin()
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_Class::end()
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getResponse(char**, unsigned short, unsigned short)
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDFileSystem::initialise_card_v2()
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turnonLED(int, int)
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_die
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::hasPaper()
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::wake()
</UL>

<P><STRONG><a name="[1a2]"></a>wait_us</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, wait_api.o(i.wait_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = wait_us &rArr; us_ticker_read &rArr; NVIC_SetVector &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_read
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_Class::line(unsigned short, const unsigned char*, unsigned char, bool, EPD_stage)
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_Class::begin()
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_Class::end()
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::timeoutWait()
</UL>

<P><STRONG><a name="[5e]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[f5]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[29b]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp1::point(int, int, unsigned char*)
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp1::getGrayLevel(unsigned char, unsigned char, unsigned char)
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
</UL>

<P><STRONG><a name="[2f6]"></a>_dadd</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[2fe]"></a>__fpl_dcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dcmpi.o(x$fpl$dcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
</UL>

<P><STRONG><a name="[29c]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp1::getGrayLevel(unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[2fa]"></a>_ddiv</STRONG> (Thumb, 552 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[298]"></a>__aeabi_d2iz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_frequency
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp1::flushpoint(int, int, unsigned char*)
</UL>

<P><STRONG><a name="[2fb]"></a>_dfix</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[29d]"></a>__aeabi_d2uiz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp1::point(int, int, unsigned char*)
</UL>

<P><STRONG><a name="[2fc]"></a>_dfixu</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[29a]"></a>__aeabi_ui2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp1::point(int, int, unsigned char*)
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp1::getGrayLevel(unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[378]"></a>_dfltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu), UNUSED)

<P><STRONG><a name="[379]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)

<P><STRONG><a name="[2fd]"></a>_dcmple</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[301]"></a>__fpl_dcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drcmple
</UL>

<P><STRONG><a name="[297]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp1::point(int, int, unsigned char*)
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp1::getGrayLevel(unsigned char, unsigned char, unsigned char)
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp1::flushpoint(int, int, unsigned char*)
</UL>

<P><STRONG><a name="[2ff]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[2f9]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfixu
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
</UL>

<P><STRONG><a name="[2f8]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[2da]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
</UL>

<P><STRONG><a name="[300]"></a>_drcmple</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmple_InfNaN
</UL>

<P><STRONG><a name="[2db]"></a>__aeabi_drsub</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
</UL>

<P><STRONG><a name="[302]"></a>_drsb</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[296]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp1::flushpoint(int, int, unsigned char*)
</UL>

<P><STRONG><a name="[304]"></a>_dsub</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[2ee]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_frequency
</UL>

<P><STRONG><a name="[305]"></a>_f2d</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[2ed]"></a>__aeabi_fadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_frequency
</UL>

<P><STRONG><a name="[307]"></a>_fadd</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[2ec]"></a>__aeabi_fdiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_frequency
</UL>

<P><STRONG><a name="[30a]"></a>_fdiv</STRONG> (Thumb, 384 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[1b1]"></a>__aeabi_f2uiz</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, ffixu.o(x$fpl$ffixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;joystick_Int_Handler()
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmout_write
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmout_init
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_joystick()
</UL>

<P><STRONG><a name="[30b]"></a>_ffixu</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ffixu.o(x$fpl$ffixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[2eb]"></a>__aeabi_i2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$fflt))
<BR><BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_frequency
</UL>

<P><STRONG><a name="[37a]"></a>_fflt</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$fflt), UNUSED)

<P><STRONG><a name="[2d4]"></a>__aeabi_ui2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu))
<BR><BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analogin_read
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmout_write
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmout_init
</UL>

<P><STRONG><a name="[37b]"></a>_ffltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu), UNUSED)

<P><STRONG><a name="[1b0]"></a>__aeabi_fmul</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analogin_read
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;joystick_Int_Handler()
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmout_write
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmout_init
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_joystick()
</UL>

<P><STRONG><a name="[30c]"></a>_fmul</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[306]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffixu
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[309]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>

<P><STRONG><a name="[37c]"></a>__aeabi_fsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)

<P><STRONG><a name="[30d]"></a>_fsub</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[d2]"></a>_printf_fp_dec</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>

<P><STRONG><a name="[d6]"></a>_printf_fp_hex</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf2.o(x$fpl$printf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_a
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[c2]"></a>__sti___8_main_cpp_sd</STRONG> (Thumb, 208 bytes, Stack size 56 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = __sti___8_main_cpp_sd &rArr; EaEpaper::EaEpaper(PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, const char*) &rArr; EPD_Class::EPD_Class(EPD_size, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName) &rArr; mbed::SPI::SPI(PinName, PinName, PinName, PinName) &rArr; spi_init &rArr; spi_frequency &rArr; error &rArr; exit &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; serial_set_flow_control &rArr; gpio_init_out_ex &rArr; gpio_init &rArr; pin_function &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::DigitalOut(PinName)
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_in
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EaEpaper::EaEpaper(PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, const char*)
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Serial::Serial(PinName, PinName, const char*)
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDFileSystem::SDFileSystem(PinName, PinName, PinName, PinName, const char*)
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.init_array)
</UL>
<P><STRONG><a name="[115]"></a>debug_if(int, const char*, ...)</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, sdfilesystem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = debug_if(int, const char*, ...) &rArr; __c89vfprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vfprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDFileSystem::disk_initialize()
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDFileSystem::initialise_card_v2()
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDFileSystem::initialise_card_v1()
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDFileSystem::_sd_sectors()
</UL>

<P><STRONG><a name="[11f]"></a>ext_bits(unsigned char*, int, int)</STRONG> (Thumb, 62 bytes, Stack size 28 bytes, sdfilesystem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ext_bits(unsigned char*, int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDFileSystem::_sd_sectors()
</UL>

<P><STRONG><a name="[11e]"></a>debug(const char*, ...)</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, sdfilesystem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = debug(const char*, ...) &rArr; __c89vfprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vfprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDFileSystem::disk_initialize()
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDFileSystem::initialise_card()
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDFileSystem::initialise_card_v2()
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDFileSystem::initialise_card_v1()
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDFileSystem::_sd_sectors()
</UL>

<P><STRONG><a name="[127]"></a>debug_if(int, const char*, ...)</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, fatfilehandle.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = debug_if(int, const char*, ...) &rArr; __c89vfprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vfprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFileHandle::fsync()
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFileHandle::lseek(long, int)
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFileHandle::read(void*, unsigned)
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFileHandle::write(const void*, unsigned)
</UL>

<P><STRONG><a name="[12e]"></a>debug_if(int, const char*, ...)</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, fatfilesystem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = debug_if(int, const char*, ...) &rArr; __c89vfprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vfprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFileSystem::FATFileSystem__sub_object(const char*)
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFileSystem::remove(const char*)
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFileSystem::format()
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFileSystem::open(const char*, int)
</UL>

<P><STRONG><a name="[14c]"></a>mem_cpy(void*, const void*, unsigned)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mem_cpy(void*, const void*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_numname(unsigned char*, const unsigned char*, const unsigned short*, unsigned short)
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register(FATFS_DIR*)
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
</UL>

<P><STRONG><a name="[140]"></a>mem_set(void*, int, unsigned)</STRONG> (Thumb, 20 bytes, Stack size 12 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mem_set(void*, int, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name(FATFS_DIR*, const char**)
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register(FATFS_DIR*)
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next(FATFS_DIR*, int)
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync(FATFS*)
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[14f]"></a>mem_cmp(const void*, const void*, unsigned)</STRONG> (Thumb, 38 bytes, Stack size 20 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mem_cmp(const void*, const void*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find(FATFS_DIR*)
</UL>

<P><STRONG><a name="[157]"></a>chk_chr(const char*, int)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ff.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name(FATFS_DIR*, const char**)
</UL>

<P><STRONG><a name="[13c]"></a>move_window(FATFS*, unsigned long)</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = move_window(FATFS*, unsigned long) &rArr; disk_read(unsigned char, unsigned char*, unsigned long, unsigned char) &rArr; debug_if(int, const char*, ...) &rArr; __c89vfprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read(unsigned char, unsigned char*, unsigned long, unsigned char)
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write(unsigned char, const unsigned char*, unsigned long, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat(FATFS*, unsigned long, unsigned long)
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat(FATFS*, unsigned long)
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove(FATFS_DIR*)
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register(FATFS_DIR*)
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read(FATFS_DIR*)
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find(FATFS_DIR*)
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next(FATFS_DIR*, int)
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync(FATFS*)
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[13f]"></a>sync(FATFS*)</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = sync(FATFS*) &rArr; move_window(FATFS*, unsigned long) &rArr; disk_read(unsigned char, unsigned char*, unsigned long, unsigned char) &rArr; debug_if(int, const char*, ...) &rArr; __c89vfprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write(unsigned char, const unsigned char*, unsigned long, unsigned char)
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl(unsigned char, unsigned char, void*)
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window(FATFS*, unsigned long)
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set(void*, int, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_utime
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_chmod
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[144]"></a>remove_chain(FATFS*, unsigned long)</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = remove_chain(FATFS*, unsigned long) &rArr; put_fat(FATFS*, unsigned long, unsigned long) &rArr; move_window(FATFS*, unsigned long) &rArr; disk_read(unsigned char, unsigned char*, unsigned long, unsigned char) &rArr; debug_if(int, const char*, ...) &rArr; __c89vfprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat(FATFS*, unsigned long, unsigned long)
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat(FATFS*, unsigned long)
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[145]"></a>create_chain(FATFS*, unsigned long)</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = create_chain(FATFS*, unsigned long) &rArr; put_fat(FATFS*, unsigned long, unsigned long) &rArr; move_window(FATFS*, unsigned long) &rArr; disk_read(unsigned char, unsigned char*, unsigned long, unsigned char) &rArr; debug_if(int, const char*, ...) &rArr; __c89vfprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat(FATFS*, unsigned long, unsigned long)
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat(FATFS*, unsigned long)
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next(FATFS_DIR*, int)
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>

<P><STRONG><a name="[146]"></a>dir_sdi(FATFS_DIR*, unsigned short)</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = dir_sdi(FATFS_DIR*, unsigned short) &rArr; get_fat(FATFS*, unsigned long) &rArr; move_window(FATFS*, unsigned long) &rArr; disk_read(unsigned char, unsigned char*, unsigned long, unsigned char) &rArr; debug_if(int, const char*, ...) &rArr; __c89vfprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat(FATFS*, unsigned long)
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect(FATFS*, unsigned long)
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path(FATFS_DIR*, const char*)
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove(FATFS_DIR*)
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register(FATFS_DIR*)
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find(FATFS_DIR*)
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
</UL>

<P><STRONG><a name="[148]"></a>dir_next(FATFS_DIR*, int)</STRONG> (Thumb, 280 bytes, Stack size 24 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = dir_next(FATFS_DIR*, int) &rArr; create_chain(FATFS*, unsigned long) &rArr; put_fat(FATFS*, unsigned long, unsigned long) &rArr; move_window(FATFS*, unsigned long) &rArr; disk_read(unsigned char, unsigned char*, unsigned long, unsigned char) &rArr; debug_if(int, const char*, ...) &rArr; __c89vfprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat(FATFS*, unsigned long)
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect(FATFS*, unsigned long)
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain(FATFS*, unsigned long)
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window(FATFS*, unsigned long)
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set(void*, int, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove(FATFS_DIR*)
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register(FATFS_DIR*)
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read(FATFS_DIR*)
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find(FATFS_DIR*)
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
</UL>

<P><STRONG><a name="[15a]"></a>ld_clust(FATFS*, unsigned char*)</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ld_clust(FATFS*, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path(FATFS_DIR*, const char*)
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[160]"></a>st_clust(unsigned char*, unsigned long)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ff.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[149]"></a>cmp_lfn(unsigned short*, unsigned char*)</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cmp_lfn(unsigned short*, unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_wtoupper
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find(FATFS_DIR*)
</UL>

<P><STRONG><a name="[151]"></a>pick_lfn(unsigned short*, unsigned char*)</STRONG> (Thumb, 112 bytes, Stack size 20 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = pick_lfn(unsigned short*, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read(FATFS_DIR*)
</UL>

<P><STRONG><a name="[153]"></a>fit_lfn(const unsigned short*, unsigned char*, unsigned char, unsigned char)</STRONG> (Thumb, 122 bytes, Stack size 20 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = fit_lfn(const unsigned short*, unsigned char*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register(FATFS_DIR*)
</UL>

<P><STRONG><a name="[14e]"></a>sum_sfn(const unsigned char*)</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = sum_sfn(const unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register(FATFS_DIR*)
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read(FATFS_DIR*)
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find(FATFS_DIR*)
</UL>

<P><STRONG><a name="[14d]"></a>dir_find(FATFS_DIR*)</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = dir_find(FATFS_DIR*) &rArr; dir_next(FATFS_DIR*, int) &rArr; create_chain(FATFS*, unsigned long) &rArr; put_fat(FATFS*, unsigned long, unsigned long) &rArr; move_window(FATFS*, unsigned long) &rArr; disk_read(unsigned char, unsigned char*, unsigned long, unsigned char) &rArr; debug_if(int, const char*, ...) &rArr; __c89vfprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn(const unsigned char*)
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn(unsigned short*, unsigned char*)
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next(FATFS_DIR*, int)
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi(FATFS_DIR*, unsigned short)
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window(FATFS*, unsigned long)
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cmp(const void*, const void*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path(FATFS_DIR*, const char*)
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register(FATFS_DIR*)
</UL>

<P><STRONG><a name="[150]"></a>dir_read(FATFS_DIR*)</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = dir_read(FATFS_DIR*) &rArr; dir_next(FATFS_DIR*, int) &rArr; create_chain(FATFS*, unsigned long) &rArr; put_fat(FATFS*, unsigned long, unsigned long) &rArr; move_window(FATFS*, unsigned long) &rArr; disk_read(unsigned char, unsigned char*, unsigned long, unsigned char) &rArr; debug_if(int, const char*, ...) &rArr; __c89vfprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn(const unsigned char*)
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pick_lfn(unsigned short*, unsigned char*)
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next(FATFS_DIR*, int)
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window(FATFS*, unsigned long)
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
</UL>

<P><STRONG><a name="[152]"></a>dir_register(FATFS_DIR*)</STRONG> (Thumb, 400 bytes, Stack size 56 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = dir_register(FATFS_DIR*) &rArr; dir_find(FATFS_DIR*) &rArr; dir_next(FATFS_DIR*, int) &rArr; create_chain(FATFS*, unsigned long) &rArr; put_fat(FATFS*, unsigned long, unsigned long) &rArr; move_window(FATFS*, unsigned long) &rArr; disk_read(unsigned char, unsigned char*, unsigned long, unsigned char) &rArr; debug_if(int, const char*, ...) &rArr; __c89vfprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_numname(unsigned char*, const unsigned char*, const unsigned short*, unsigned short)
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find(FATFS_DIR*)
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn(const unsigned char*)
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fit_lfn(const unsigned short*, unsigned char*, unsigned char, unsigned char)
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next(FATFS_DIR*, int)
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi(FATFS_DIR*, unsigned short)
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window(FATFS*, unsigned long)
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set(void*, int, unsigned)
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy(void*, const void*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[154]"></a>dir_remove(FATFS_DIR*)</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = dir_remove(FATFS_DIR*) &rArr; dir_next(FATFS_DIR*, int) &rArr; create_chain(FATFS*, unsigned long) &rArr; put_fat(FATFS*, unsigned long, unsigned long) &rArr; move_window(FATFS*, unsigned long) &rArr; disk_read(unsigned char, unsigned char*, unsigned long, unsigned char) &rArr; debug_if(int, const char*, ...) &rArr; __c89vfprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next(FATFS_DIR*, int)
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi(FATFS_DIR*, unsigned short)
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window(FATFS*, unsigned long)
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
</UL>

<P><STRONG><a name="[155]"></a>create_name(FATFS_DIR*, const char**)</STRONG> (Thumb, 534 bytes, Stack size 56 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = create_name(FATFS_DIR*, const char**) &rArr; mem_set(void*, int, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_chr(const char*, int)
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set(void*, int, unsigned)
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_convert
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path(FATFS_DIR*, const char*)
</UL>

<P><STRONG><a name="[158]"></a>get_fileinfo(FATFS_DIR*, FILINFO*)</STRONG> (Thumb, 296 bytes, Stack size 48 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = get_fileinfo(FATFS_DIR*, FILINFO*) &rArr; ff_convert
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_convert
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
</UL>

<P><STRONG><a name="[159]"></a>follow_path(FATFS_DIR*, const char*)</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = follow_path(FATFS_DIR*, const char*) &rArr; dir_find(FATFS_DIR*) &rArr; dir_next(FATFS_DIR*, int) &rArr; create_chain(FATFS*, unsigned long) &rArr; put_fat(FATFS*, unsigned long, unsigned long) &rArr; move_window(FATFS*, unsigned long) &rArr; disk_read(unsigned char, unsigned char*, unsigned long, unsigned char) &rArr; debug_if(int, const char*, ...) &rArr; __c89vfprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name(FATFS_DIR*, const char**)
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find(FATFS_DIR*)
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust(FATFS*, unsigned char*)
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi(FATFS_DIR*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_utime
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_chmod
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[15b]"></a>check_fs(FATFS*, unsigned long)</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = check_fs(FATFS*, unsigned long) &rArr; disk_read(unsigned char, unsigned char*, unsigned long, unsigned char) &rArr; debug_if(int, const char*, ...) &rArr; __c89vfprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read(unsigned char, unsigned char*, unsigned long, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted(const char**, FATFS**, unsigned char)
</UL>

<P><STRONG><a name="[15c]"></a>chk_mounted(const char**, FATFS**, unsigned char)</STRONG> (Thumb, 904 bytes, Stack size 80 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = chk_mounted(const char**, FATFS**, unsigned char) &rArr; check_fs(FATFS*, unsigned long) &rArr; disk_read(unsigned char, unsigned char*, unsigned long, unsigned char) &rArr; debug_if(int, const char*, ...) &rArr; __c89vfprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read(unsigned char, unsigned char*, unsigned long, unsigned char)
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize(unsigned char)
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status(unsigned char)
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs(FATFS*, unsigned long)
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_utime
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_chmod
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[15f]"></a>validate(void*)</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = validate(void*) &rArr; disk_status(unsigned char) &rArr; debug_if(int, const char*, ...) &rArr; __c89vfprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
</UL>

<P><STRONG><a name="[167]"></a>debug_if(int, const char*, ...)</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, diskio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = debug_if(int, const char*, ...) &rArr; __c89vfprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vfprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read(unsigned char, unsigned char*, unsigned long, unsigned char)
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize(unsigned char)
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status(unsigned char)
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write(unsigned char, const unsigned char*, unsigned long, unsigned char)
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl(unsigned char, unsigned char, void*)
</UL>

<P><STRONG><a name="[c3]"></a>__sti___17_serial_camera_cpp_OE</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, serial_camera.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = __sti___17_serial_camera_cpp_OE &rArr; mbed::Serial::Serial(PinName, PinName, const char*) &rArr; mbed::Stream::Stream__sub_object(const char*) &rArr; fopen &rArr; freopen &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; serial_set_flow_control &rArr; gpio_init_out_ex &rArr; gpio_init &rArr; pin_function &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_out
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Serial::Serial(PinName, PinName, const char*)
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_camera.o(.init_array)
</UL>
<P><STRONG><a name="[c4]"></a>__sti___7_EPD_cpp__time</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, epd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __sti___7_EPD_cpp__time &rArr; mbed::Timer::Timer() &rArr; us_ticker_read &rArr; NVIC_SetVector &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::Timer()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> epd.o(.init_array)
</UL>
<P><STRONG><a name="[c5]"></a>__sti___12_joystick_cpp_joystick</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, joystick.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = __sti___12_joystick_cpp_joystick &rArr; mbed::AnalogIn::AnalogIn(PinName) &rArr; analogin_init &rArr; pinmap_pinout &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::AnalogIn::AnalogIn(PinName)
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FunctionPointer::FunctionPointer(void(*)())
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::TimerEvent__sub_object()
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> joystick.o(.init_array)
</UL>
<P><STRONG><a name="[c6]"></a>__sti___11_command_cpp_369aa827</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, command.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = __sti___11_command_cpp_369aa827 &rArr; Adafruit_Thermal::Adafruit_Thermal(PinName, PinName, int, unsigned char) &rArr; mbed::Serial::Serial(PinName, PinName, const char*) &rArr; mbed::Stream::Stream__sub_object(const char*) &rArr; fopen &rArr; freopen &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; serial_set_flow_control &rArr; gpio_init_out_ex &rArr; gpio_init &rArr; pin_function &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp24::bmp24()
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp1::bmp1()
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleJpegDecode::SimpleJpegDecode(unsigned char)
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_Thermal::Adafruit_Thermal(PinName, PinName, int, unsigned char)
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.init_array)
</UL>
<P><STRONG><a name="[2e9]"></a>serial_irq_set_internal</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, serial_api.o(i.serial_irq_set_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = serial_irq_set_internal &rArr; NVIC_SetVector &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetVector
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_set_flow_control
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_irq_set
</UL>

<P><STRONG><a name="[2f1]"></a>uart_irq</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, serial_api.o(i.uart_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uart_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_irq
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_irq
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_irq
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_irq
</UL>

<P><STRONG><a name="[64]"></a>&lang;Func1&rang;</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, SerialBase.o(i.<Func1>))
<BR><BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FunctionPointer::FunctionPointer(void(*)())
</UL>
<BR>[Address Reference Count : 1]<UL><LI> SerialBase.o(i._ZN4mbed10SerialBaseC1E7PinNameS1_)
</UL>
<P><STRONG><a name="[254]"></a>_tm_carry</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, mktime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _tm_carry
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
</UL>

<P><STRONG><a name="[303]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
</UL>

<P><STRONG><a name="[2f7]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[30e]"></a>_fadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
</UL>

<P><STRONG><a name="[308]"></a>_fsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>

<P><STRONG><a name="[5f]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[61]"></a>_scanf_char_input</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[276]"></a>_fp_digits</STRONG> (Thumb, 428 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[63]"></a>__default_terminate_handler()</STRONG> (Thumb, 6 bytes, Stack size 8 bytes, arm_exceptions_globs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __default_terminate_handler() &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_exceptions_globs.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
